<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1078.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1061" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1061" > </text>
<g id="frames">
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="674.1" y="501" width="0.2" height="15.0" fill="rgb(214,149,10)" rx="2" ry="2" />
<text  x="677.12" y="511.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="96.5" y="565" width="0.2" height="15.0" fill="rgb(210,20,46)" rx="2" ry="2" />
<text  x="99.49" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::Channel*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="243.9" y="597" width="0.2" height="15.0" fill="rgb(227,125,5)" rx="2" ry="2" />
<text  x="246.93" y="607.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (2 samples, 0.03%)</title><rect x="362.8" y="725" width="0.3" height="15.0" fill="rgb(244,74,38)" rx="2" ry="2" />
<text  x="365.76" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (664 samples, 9.10%)</title><rect x="137.2" y="725" width="107.4" height="15.0" fill="rgb(242,17,11)" rx="2" ry="2" />
<text  x="140.23" y="735.5" >std::__invoke..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1024.3" y="661" width="0.2" height="15.0" fill="rgb(252,82,5)" rx="2" ry="2" />
<text  x="1027.29" y="671.5" ></text>
</g>
<g >
<title>tcp_write_xmit (194 samples, 2.66%)</title><rect x="896.7" y="757" width="31.4" height="15.0" fill="rgb(221,26,46)" rx="2" ry="2" />
<text  x="899.74" y="767.5" >tc..</text>
</g>
<g >
<title>vmware_sched_clock (1 samples, 0.01%)</title><rect x="482.5" y="405" width="0.2" height="15.0" fill="rgb(224,99,20)" rx="2" ry="2" />
<text  x="485.55" y="415.5" ></text>
</g>
<g >
<title>mod_timer (4 samples, 0.05%)</title><rect x="483.0" y="373" width="0.7" height="15.0" fill="rgb(224,209,43)" rx="2" ry="2" />
<text  x="486.03" y="383.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="124.0" y="773" width="0.1" height="15.0" fill="rgb(218,83,5)" rx="2" ry="2" />
<text  x="126.97" y="783.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (1 samples, 0.01%)</title><rect x="251.7" y="773" width="0.2" height="15.0" fill="rgb(218,45,49)" rx="2" ry="2" />
<text  x="254.69" y="783.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (10 samples, 0.14%)</title><rect x="497.7" y="789" width="1.7" height="15.0" fill="rgb(235,47,42)" rx="2" ry="2" />
<text  x="500.75" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9 samples, 0.12%)</title><rect x="344.0" y="533" width="1.5" height="15.0" fill="rgb(242,74,28)" rx="2" ry="2" />
<text  x="347.00" y="543.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="673.5" y="629" width="0.1" height="15.0" fill="rgb(223,99,13)" rx="2" ry="2" />
<text  x="676.48" y="639.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="116.5" y="805" width="0.2" height="15.0" fill="rgb(227,56,24)" rx="2" ry="2" />
<text  x="119.54" y="815.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::operator bool (1 samples, 0.01%)</title><rect x="259.1" y="837" width="0.2" height="15.0" fill="rgb(214,6,32)" rx="2" ry="2" />
<text  x="262.13" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="1160.4" y="613" width="0.2" height="15.0" fill="rgb(236,8,18)" rx="2" ry="2" />
<text  x="1163.42" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="657.5" y="709" width="0.1" height="15.0" fill="rgb(211,184,31)" rx="2" ry="2" />
<text  x="660.47" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1134.2" y="533" width="0.2" height="15.0" fill="rgb(220,92,22)" rx="2" ry="2" />
<text  x="1137.23" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="88.2" y="325" width="0.4" height="15.0" fill="rgb(248,221,45)" rx="2" ry="2" />
<text  x="91.25" y="335.5" ></text>
</g>
<g >
<title>std::__search&lt;char*, char const*, __gnu_cxx::__ops::_Iter_equal_to_iter&gt; (9 samples, 0.12%)</title><rect x="1000.4" y="677" width="1.4" height="15.0" fill="rgb(229,144,9)" rx="2" ry="2" />
<text  x="1003.37" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~tuple (3 samples, 0.04%)</title><rect x="658.4" y="757" width="0.5" height="15.0" fill="rgb(217,20,38)" rx="2" ry="2" />
<text  x="661.44" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="985.7" y="949" width="0.1" height="15.0" fill="rgb(209,159,49)" rx="2" ry="2" />
<text  x="988.65" y="959.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.01%)</title><rect x="265.4" y="965" width="0.2" height="15.0" fill="rgb(220,117,50)" rx="2" ry="2" />
<text  x="268.43" y="975.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="928.7" y="821" width="0.4" height="15.0" fill="rgb(226,157,6)" rx="2" ry="2" />
<text  x="931.75" y="831.5" ></text>
</g>
<g >
<title>__lock_text_start (5 samples, 0.07%)</title><rect x="166.3" y="37" width="0.8" height="15.0" fill="rgb(233,104,25)" rx="2" ry="2" />
<text  x="169.33" y="47.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="383.4" y="789" width="0.2" height="15.0" fill="rgb(238,116,37)" rx="2" ry="2" />
<text  x="386.45" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="28.8" y="949" width="0.1" height="15.0" fill="rgb(237,49,4)" rx="2" ry="2" />
<text  x="31.75" y="959.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="763.8" y="501" width="0.2" height="15.0" fill="rgb(226,198,10)" rx="2" ry="2" />
<text  x="766.85" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="314.7" y="645" width="0.2" height="15.0" fill="rgb(242,160,19)" rx="2" ry="2" />
<text  x="317.74" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1185.8" y="965" width="0.2" height="15.0" fill="rgb(238,82,30)" rx="2" ry="2" />
<text  x="1188.80" y="975.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (18 samples, 0.25%)</title><rect x="376.8" y="741" width="2.9" height="15.0" fill="rgb(240,105,5)" rx="2" ry="2" />
<text  x="379.82" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="69.5" y="661" width="0.2" height="15.0" fill="rgb(241,33,31)" rx="2" ry="2" />
<text  x="72.49" y="671.5" ></text>
</g>
<g >
<title>do_futex (11 samples, 0.15%)</title><rect x="1025.4" y="565" width="1.8" height="15.0" fill="rgb(246,88,9)" rx="2" ry="2" />
<text  x="1028.42" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="374.9" y="773" width="0.1" height="15.0" fill="rgb(226,125,52)" rx="2" ry="2" />
<text  x="377.88" y="783.5" ></text>
</g>
<g >
<title>bictcp_cong_avoid (1 samples, 0.01%)</title><rect x="561.9" y="405" width="0.2" height="15.0" fill="rgb(249,38,51)" rx="2" ry="2" />
<text  x="564.93" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="253.1" y="757" width="0.2" height="15.0" fill="rgb(229,96,38)" rx="2" ry="2" />
<text  x="256.15" y="767.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tidString (1 samples, 0.01%)</title><rect x="119.8" y="773" width="0.1" height="15.0" fill="rgb(233,116,50)" rx="2" ry="2" />
<text  x="122.77" y="783.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="89.1" y="629" width="0.1" height="15.0" fill="rgb(230,77,43)" rx="2" ry="2" />
<text  x="92.05" y="639.5" ></text>
</g>
<g >
<title>skb_entail (2 samples, 0.03%)</title><rect x="156.5" y="485" width="0.3" height="15.0" fill="rgb(238,4,33)" rx="2" ry="2" />
<text  x="159.47" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5 samples, 0.07%)</title><rect x="1159.8" y="677" width="0.8" height="15.0" fill="rgb(222,79,53)" rx="2" ry="2" />
<text  x="1162.77" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1161.9" y="549" width="0.1" height="15.0" fill="rgb(248,217,21)" rx="2" ry="2" />
<text  x="1164.87" y="559.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (4 samples, 0.05%)</title><rect x="925.0" y="549" width="0.7" height="15.0" fill="rgb(237,177,28)" rx="2" ry="2" />
<text  x="928.03" y="559.5" ></text>
</g>
<g >
<title>__libc_enable_asynccancel (1 samples, 0.01%)</title><rect x="336.7" y="661" width="0.2" height="15.0" fill="rgb(237,141,16)" rx="2" ry="2" />
<text  x="339.73" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1014.4" y="597" width="0.2" height="15.0" fill="rgb(212,71,49)" rx="2" ry="2" />
<text  x="1017.43" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; &gt;::tuple (4 samples, 0.05%)</title><rect x="347.4" y="501" width="0.6" height="15.0" fill="rgb(210,131,0)" rx="2" ry="2" />
<text  x="350.40" y="511.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::lock (1 samples, 0.01%)</title><rect x="841.1" y="725" width="0.2" height="15.0" fill="rgb(225,125,1)" rx="2" ry="2" />
<text  x="844.12" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1186.6" y="901" width="0.2" height="15.0" fill="rgb(231,45,0)" rx="2" ry="2" />
<text  x="1189.61" y="911.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1152.7" y="677" width="0.1" height="15.0" fill="rgb(245,125,31)" rx="2" ry="2" />
<text  x="1155.66" y="687.5" ></text>
</g>
<g >
<title>inet_recvmsg (1 samples, 0.01%)</title><rect x="77.9" y="517" width="0.2" height="15.0" fill="rgb(250,131,10)" rx="2" ry="2" />
<text  x="80.90" y="527.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (2 samples, 0.03%)</title><rect x="1024.1" y="677" width="0.4" height="15.0" fill="rgb(245,212,2)" rx="2" ry="2" />
<text  x="1027.13" y="687.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="248.3" y="741" width="0.2" height="15.0" fill="rgb(221,229,50)" rx="2" ry="2" />
<text  x="251.30" y="751.5" ></text>
</g>
<g >
<title>std::_Mu&lt;StaticServer*, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="1184.7" y="789" width="0.1" height="15.0" fill="rgb(217,126,53)" rx="2" ry="2" />
<text  x="1187.67" y="799.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="682.4" y="661" width="0.1" height="15.0" fill="rgb(218,63,54)" rx="2" ry="2" />
<text  x="685.37" y="671.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="953.2" y="933" width="0.1" height="15.0" fill="rgb(207,9,21)" rx="2" ry="2" />
<text  x="956.16" y="943.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (20 samples, 0.27%)</title><rect x="120.7" y="773" width="3.3" height="15.0" fill="rgb(214,7,46)" rx="2" ry="2" />
<text  x="123.74" y="783.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;muduo::Timestamp&gt; (3 samples, 0.04%)</title><rect x="112.3" y="741" width="0.5" height="15.0" fill="rgb(228,75,41)" rx="2" ry="2" />
<text  x="115.33" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1184.3" y="709" width="0.2" height="15.0" fill="rgb(235,204,6)" rx="2" ry="2" />
<text  x="1187.34" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="770.0" y="677" width="0.3" height="15.0" fill="rgb(238,107,5)" rx="2" ry="2" />
<text  x="772.99" y="687.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.01%)</title><rect x="580.4" y="709" width="0.1" height="15.0" fill="rgb(205,0,3)" rx="2" ry="2" />
<text  x="583.36" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="367.3" y="725" width="0.1" height="15.0" fill="rgb(246,88,19)" rx="2" ry="2" />
<text  x="370.28" y="735.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (4 samples, 0.05%)</title><rect x="252.5" y="773" width="0.6" height="15.0" fill="rgb(245,6,21)" rx="2" ry="2" />
<text  x="255.50" y="783.5" ></text>
</g>
<g >
<title>__vfs_write (28 samples, 0.38%)</title><rect x="10.2" y="901" width="4.5" height="15.0" fill="rgb(222,145,4)" rx="2" ry="2" />
<text  x="13.16" y="911.5" ></text>
</g>
<g >
<title>__inode_permission (4 samples, 0.05%)</title><rect x="825.4" y="549" width="0.7" height="15.0" fill="rgb(235,143,53)" rx="2" ry="2" />
<text  x="828.44" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="493.1" y="773" width="0.1" height="15.0" fill="rgb(213,87,44)" rx="2" ry="2" />
<text  x="496.06" y="783.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (5 samples, 0.07%)</title><rect x="316.2" y="757" width="0.8" height="15.0" fill="rgb(246,187,50)" rx="2" ry="2" />
<text  x="319.20" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (9 samples, 0.12%)</title><rect x="1154.1" y="677" width="1.5" height="15.0" fill="rgb(234,101,11)" rx="2" ry="2" />
<text  x="1157.11" y="687.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="131.1" y="725" width="0.1" height="15.0" fill="rgb(215,76,3)" rx="2" ry="2" />
<text  x="134.09" y="735.5" ></text>
</g>
<g >
<title>__GI___readv (1 samples, 0.01%)</title><rect x="87.1" y="661" width="0.2" height="15.0" fill="rgb(248,55,15)" rx="2" ry="2" />
<text  x="90.11" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="1031.9" y="533" width="0.2" height="15.0" fill="rgb(251,141,14)" rx="2" ry="2" />
<text  x="1034.89" y="543.5" ></text>
</g>
<g >
<title>[unknown] (464 samples, 6.36%)</title><rect x="886.4" y="997" width="75.0" height="15.0" fill="rgb(251,115,47)" rx="2" ry="2" />
<text  x="889.39" y="1007.5" >[unknown]</text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (4 samples, 0.05%)</title><rect x="1140.9" y="661" width="0.6" height="15.0" fill="rgb(228,117,31)" rx="2" ry="2" />
<text  x="1143.85" y="671.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (2 samples, 0.03%)</title><rect x="88.2" y="341" width="0.4" height="15.0" fill="rgb(249,101,24)" rx="2" ry="2" />
<text  x="91.25" y="351.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="354.5" y="469" width="0.2" height="15.0" fill="rgb(231,79,10)" rx="2" ry="2" />
<text  x="357.51" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.01%)</title><rect x="255.7" y="789" width="0.2" height="15.0" fill="rgb(227,81,3)" rx="2" ry="2" />
<text  x="258.73" y="799.5" ></text>
</g>
<g >
<title>do_futex (5 samples, 0.07%)</title><rect x="92.9" y="469" width="0.8" height="15.0" fill="rgb(236,84,11)" rx="2" ry="2" />
<text  x="95.93" y="479.5" ></text>
</g>
<g >
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="848.1" y="821" width="0.3" height="15.0" fill="rgb(243,57,43)" rx="2" ry="2" />
<text  x="851.08" y="831.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (3 samples, 0.04%)</title><rect x="360.3" y="773" width="0.5" height="15.0" fill="rgb(212,99,2)" rx="2" ry="2" />
<text  x="363.33" y="783.5" ></text>
</g>
<g >
<title>vfs_write (589 samples, 8.07%)</title><rect x="148.5" y="613" width="95.3" height="15.0" fill="rgb(215,106,13)" rx="2" ry="2" />
<text  x="151.55" y="623.5" >vfs_write</text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="800.7" y="677" width="0.2" height="15.0" fill="rgb(218,170,15)" rx="2" ry="2" />
<text  x="803.71" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.03%)</title><rect x="816.4" y="693" width="0.3" height="15.0" fill="rgb(239,47,54)" rx="2" ry="2" />
<text  x="819.39" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9 samples, 0.12%)</title><rect x="656.7" y="805" width="1.4" height="15.0" fill="rgb(215,179,34)" rx="2" ry="2" />
<text  x="659.66" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (3 samples, 0.04%)</title><rect x="661.8" y="629" width="0.5" height="15.0" fill="rgb(235,220,42)" rx="2" ry="2" />
<text  x="664.84" y="639.5" ></text>
</g>
<g >
<title>muduo::ThreadLocalSingleton&lt;Parser&gt;::instance (1 samples, 0.01%)</title><rect x="1184.2" y="741" width="0.1" height="15.0" fill="rgb(215,29,24)" rx="2" ry="2" />
<text  x="1187.18" y="751.5" ></text>
</g>
<g >
<title>__check_object_size (5 samples, 0.07%)</title><rect x="81.5" y="453" width="0.8" height="15.0" fill="rgb(254,208,46)" rx="2" ry="2" />
<text  x="84.46" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;muduo::net::Buffer*, muduo::Timestamp, void&gt; (1 samples, 0.01%)</title><rect x="110.1" y="581" width="0.1" height="15.0" fill="rgb(213,220,0)" rx="2" ry="2" />
<text  x="113.07" y="591.5" ></text>
</g>
<g >
<title>tcp_shutdown (1 samples, 0.01%)</title><rect x="337.4" y="421" width="0.1" height="15.0" fill="rgb(254,101,25)" rx="2" ry="2" />
<text  x="340.37" y="431.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (1 samples, 0.01%)</title><rect x="358.1" y="693" width="0.1" height="15.0" fill="rgb(245,229,28)" rx="2" ry="2" />
<text  x="361.07" y="703.5" ></text>
</g>
<g >
<title>inet_sendmsg (574 samples, 7.86%)</title><rect x="150.0" y="533" width="92.8" height="15.0" fill="rgb(239,63,17)" rx="2" ry="2" />
<text  x="153.00" y="543.5" >inet_sendmsg</text>
</g>
<g >
<title>_IO_vsnprintf (2 samples, 0.03%)</title><rect x="366.0" y="757" width="0.3" height="15.0" fill="rgb(227,30,32)" rx="2" ry="2" />
<text  x="368.99" y="767.5" ></text>
</g>
<g >
<title>sock_sendmsg (242 samples, 3.32%)</title><rect x="890.1" y="853" width="39.1" height="15.0" fill="rgb(222,114,54)" rx="2" ry="2" />
<text  x="893.11" y="863.5" >soc..</text>
</g>
<g >
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="243.0" y="517" width="0.3" height="15.0" fill="rgb(206,199,36)" rx="2" ry="2" />
<text  x="245.96" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="271.3" y="949" width="0.1" height="15.0" fill="rgb(206,219,19)" rx="2" ry="2" />
<text  x="274.25" y="959.5" ></text>
</g>
<g >
<title>netif_skb_features (1 samples, 0.01%)</title><rect x="579.9" y="597" width="0.1" height="15.0" fill="rgb(236,181,15)" rx="2" ry="2" />
<text  x="582.87" y="607.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (12 samples, 0.16%)</title><rect x="235.4" y="325" width="1.9" height="15.0" fill="rgb(253,145,12)" rx="2" ry="2" />
<text  x="238.36" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="97.9" y="421" width="0.2" height="15.0" fill="rgb(225,198,25)" rx="2" ry="2" />
<text  x="100.95" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="357.4" y="549" width="0.2" height="15.0" fill="rgb(238,0,10)" rx="2" ry="2" />
<text  x="360.42" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="504.7" y="757" width="0.2" height="15.0" fill="rgb(215,8,9)" rx="2" ry="2" />
<text  x="507.70" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="358.2" y="661" width="0.2" height="15.0" fill="rgb(215,55,38)" rx="2" ry="2" />
<text  x="361.23" y="671.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base@plt (1 samples, 0.01%)</title><rect x="15.3" y="917" width="0.2" height="15.0" fill="rgb(254,10,34)" rx="2" ry="2" />
<text  x="18.33" y="927.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.23%)</title><rect x="785.2" y="645" width="2.7" height="15.0" fill="rgb(229,147,45)" rx="2" ry="2" />
<text  x="788.19" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (1 samples, 0.01%)</title><rect x="259.3" y="997" width="0.2" height="15.0" fill="rgb(215,169,5)" rx="2" ry="2" />
<text  x="262.29" y="1007.5" ></text>
</g>
<g >
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="294.7" y="709" width="0.3" height="15.0" fill="rgb(248,168,12)" rx="2" ry="2" />
<text  x="297.69" y="719.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="497.9" y="757" width="0.2" height="15.0" fill="rgb(221,202,53)" rx="2" ry="2" />
<text  x="500.91" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="88.9" y="629" width="0.2" height="15.0" fill="rgb(244,225,26)" rx="2" ry="2" />
<text  x="91.89" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::stream (1 samples, 0.01%)</title><rect x="1017.3" y="677" width="0.2" height="15.0" fill="rgb(242,83,3)" rx="2" ry="2" />
<text  x="1020.34" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (9 samples, 0.12%)</title><rect x="941.4" y="933" width="1.4" height="15.0" fill="rgb(221,220,4)" rx="2" ry="2" />
<text  x="944.36" y="943.5" ></text>
</g>
<g >
<title>std::tuple&lt;char*, std::default_delete&lt;char []&gt; &gt;::tuple&lt;char*, std::default_delete&lt;char []&gt;, true&gt; (1 samples, 0.01%)</title><rect x="1132.6" y="661" width="0.2" height="15.0" fill="rgb(233,181,45)" rx="2" ry="2" />
<text  x="1135.61" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt;,  (1 samples, 0.01%)</title><rect x="345.5" y="549" width="0.1" height="15.0" fill="rgb(254,94,48)" rx="2" ry="2" />
<text  x="348.46" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_comp_iter&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1000.0" y="677" width="0.2" height="15.0" fill="rgb(240,182,36)" rx="2" ry="2" />
<text  x="1003.04" y="687.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="151.3" y="485" width="0.2" height="15.0" fill="rgb(239,89,29)" rx="2" ry="2" />
<text  x="154.30" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (2 samples, 0.03%)</title><rect x="133.0" y="789" width="0.4" height="15.0" fill="rgb(247,126,54)" rx="2" ry="2" />
<text  x="136.03" y="799.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (1 samples, 0.01%)</title><rect x="385.2" y="597" width="0.2" height="15.0" fill="rgb(230,2,50)" rx="2" ry="2" />
<text  x="388.23" y="607.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (4 samples, 0.05%)</title><rect x="13.9" y="821" width="0.6" height="15.0" fill="rgb(251,151,39)" rx="2" ry="2" />
<text  x="16.88" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.07%)</title><rect x="1161.2" y="661" width="0.8" height="15.0" fill="rgb(231,17,45)" rx="2" ry="2" />
<text  x="1164.22" y="671.5" ></text>
</g>
<g >
<title>complete_walk (6 samples, 0.08%)</title><rect x="823.7" y="581" width="0.9" height="15.0" fill="rgb(223,76,17)" rx="2" ry="2" />
<text  x="826.66" y="591.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="675.4" y="581" width="0.2" height="15.0" fill="rgb(234,169,23)" rx="2" ry="2" />
<text  x="678.42" y="591.5" ></text>
</g>
<g >
<title>operator new[] (1 samples, 0.01%)</title><rect x="1152.3" y="709" width="0.2" height="15.0" fill="rgb(230,26,49)" rx="2" ry="2" />
<text  x="1155.33" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3 samples, 0.04%)</title><rect x="491.0" y="597" width="0.4" height="15.0" fill="rgb(254,205,2)" rx="2" ry="2" />
<text  x="493.96" y="607.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (2 samples, 0.03%)</title><rect x="1154.8" y="645" width="0.3" height="15.0" fill="rgb(232,148,54)" rx="2" ry="2" />
<text  x="1157.76" y="655.5" ></text>
</g>
<g >
<title>sock_read_iter (1 samples, 0.01%)</title><rect x="532.0" y="901" width="0.2" height="15.0" fill="rgb(243,158,38)" rx="2" ry="2" />
<text  x="535.02" y="911.5" ></text>
</g>
<g >
<title>std::locale::~locale (2 samples, 0.03%)</title><rect x="268.5" y="965" width="0.3" height="15.0" fill="rgb(219,137,30)" rx="2" ry="2" />
<text  x="271.50" y="975.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (3 samples, 0.04%)</title><rect x="14.8" y="917" width="0.5" height="15.0" fill="rgb(251,221,40)" rx="2" ry="2" />
<text  x="17.85" y="927.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="273.0" y="917" width="0.2" height="15.0" fill="rgb(228,191,17)" rx="2" ry="2" />
<text  x="276.03" y="927.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (5 samples, 0.07%)</title><rect x="1146.4" y="677" width="0.8" height="15.0" fill="rgb(246,13,42)" rx="2" ry="2" />
<text  x="1149.35" y="687.5" ></text>
</g>
<g >
<title>__vfs_write (585 samples, 8.01%)</title><rect x="148.7" y="597" width="94.6" height="15.0" fill="rgb(211,120,16)" rx="2" ry="2" />
<text  x="151.71" y="607.5" >__vfs_write</text>
</g>
<g >
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="579.2" y="613" width="0.3" height="15.0" fill="rgb(228,207,25)" rx="2" ry="2" />
<text  x="582.23" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="339.0" y="533" width="0.2" height="15.0" fill="rgb(250,82,28)" rx="2" ry="2" />
<text  x="341.99" y="543.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (2 samples, 0.03%)</title><rect x="108.3" y="581" width="0.3" height="15.0" fill="rgb(228,90,51)" rx="2" ry="2" />
<text  x="111.29" y="591.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="296.0" y="693" width="0.5" height="15.0" fill="rgb(240,157,6)" rx="2" ry="2" />
<text  x="298.99" y="703.5" ></text>
</g>
<g >
<title>ktime_get_real_seconds (1 samples, 0.01%)</title><rect x="167.5" y="101" width="0.1" height="15.0" fill="rgb(222,4,17)" rx="2" ry="2" />
<text  x="170.46" y="111.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="994.7" y="773" width="1.1" height="15.0" fill="rgb(207,9,52)" rx="2" ry="2" />
<text  x="997.71" y="783.5" ></text>
</g>
<g >
<title>futex_wake (10 samples, 0.14%)</title><rect x="654.6" y="725" width="1.6" height="15.0" fill="rgb(212,195,31)" rx="2" ry="2" />
<text  x="657.56" y="735.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::size (1 samples, 0.01%)</title><rect x="503.6" y="821" width="0.1" height="15.0" fill="rgb(243,168,4)" rx="2" ry="2" />
<text  x="506.57" y="831.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="495.3" y="709" width="0.2" height="15.0" fill="rgb(250,159,35)" rx="2" ry="2" />
<text  x="498.32" y="719.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (1 samples, 0.01%)</title><rect x="672.7" y="677" width="0.1" height="15.0" fill="rgb(245,191,5)" rx="2" ry="2" />
<text  x="675.67" y="687.5" ></text>
</g>
<g >
<title>muduo::net::Socket::shutdownWrite (3 samples, 0.04%)</title><rect x="337.1" y="517" width="0.4" height="15.0" fill="rgb(228,34,28)" rx="2" ry="2" />
<text  x="340.05" y="527.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (3 samples, 0.04%)</title><rect x="770.3" y="677" width="0.5" height="15.0" fill="rgb(233,165,33)" rx="2" ry="2" />
<text  x="773.32" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="994.4" y="805" width="0.3" height="15.0" fill="rgb(227,148,0)" rx="2" ry="2" />
<text  x="997.38" y="815.5" ></text>
</g>
<g >
<title>skb_release_data (4 samples, 0.05%)</title><rect x="330.4" y="437" width="0.7" height="15.0" fill="rgb(217,210,49)" rx="2" ry="2" />
<text  x="333.42" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="369.1" y="741" width="0.3" height="15.0" fill="rgb(246,137,41)" rx="2" ry="2" />
<text  x="372.06" y="751.5" ></text>
</g>
<g >
<title>std::swap&lt;void*&gt; (1 samples, 0.01%)</title><rect x="360.0" y="757" width="0.2" height="15.0" fill="rgb(241,1,22)" rx="2" ry="2" />
<text  x="363.01" y="767.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (3 samples, 0.04%)</title><rect x="997.6" y="677" width="0.5" height="15.0" fill="rgb(222,54,30)" rx="2" ry="2" />
<text  x="1000.62" y="687.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="373.9" y="773" width="0.2" height="15.0" fill="rgb(216,58,26)" rx="2" ry="2" />
<text  x="376.91" y="783.5" ></text>
</g>
<g >
<title>sys_futex (2 samples, 0.03%)</title><rect x="1024.9" y="581" width="0.4" height="15.0" fill="rgb(229,190,1)" rx="2" ry="2" />
<text  x="1027.94" y="591.5" ></text>
</g>
<g >
<title>tcp_recvmsg (26 samples, 0.36%)</title><rect x="78.9" y="485" width="4.2" height="15.0" fill="rgb(230,176,35)" rx="2" ry="2" />
<text  x="81.87" y="495.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 0.01%)</title><rect x="584.4" y="821" width="0.2" height="15.0" fill="rgb(226,113,8)" rx="2" ry="2" />
<text  x="587.40" y="831.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="65.8" y="725" width="0.1" height="15.0" fill="rgb(224,10,16)" rx="2" ry="2" />
<text  x="68.77" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;unsigned long&gt; (1 samples, 0.01%)</title><rect x="363.2" y="789" width="0.2" height="15.0" fill="rgb(220,215,33)" rx="2" ry="2" />
<text  x="366.24" y="799.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="35.2" y="933" width="0.2" height="15.0" fill="rgb(231,163,22)" rx="2" ry="2" />
<text  x="38.22" y="943.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1133.7" y="613" width="0.2" height="15.0" fill="rgb(242,216,36)" rx="2" ry="2" />
<text  x="1136.74" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="789.4" y="629" width="0.2" height="15.0" fill="rgb(224,150,11)" rx="2" ry="2" />
<text  x="792.39" y="639.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (1 samples, 0.01%)</title><rect x="247.3" y="613" width="0.2" height="15.0" fill="rgb(211,97,47)" rx="2" ry="2" />
<text  x="250.33" y="623.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="481.1" y="245" width="0.5" height="15.0" fill="rgb(250,209,10)" rx="2" ry="2" />
<text  x="484.09" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="341.1" y="501" width="0.6" height="15.0" fill="rgb(216,167,51)" rx="2" ry="2" />
<text  x="344.09" y="511.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.01%)</title><rect x="82.6" y="213" width="0.1" height="15.0" fill="rgb(231,7,1)" rx="2" ry="2" />
<text  x="85.59" y="223.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (192 samples, 2.63%)</title><rect x="844.2" y="997" width="31.0" height="15.0" fill="rgb(242,90,5)" rx="2" ry="2" />
<text  x="847.20" y="1007.5" >[l..</text>
</g>
<g >
<title>tcp_event_new_data_sent (1 samples, 0.01%)</title><rect x="896.4" y="757" width="0.2" height="15.0" fill="rgb(230,19,38)" rx="2" ry="2" />
<text  x="899.41" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="1141.3" y="613" width="0.2" height="15.0" fill="rgb(254,171,7)" rx="2" ry="2" />
<text  x="1144.34" y="623.5" ></text>
</g>
<g >
<title>user_path_at_empty (70 samples, 0.96%)</title><rect x="823.2" y="629" width="11.3" height="15.0" fill="rgb(254,159,24)" rx="2" ry="2" />
<text  x="826.18" y="639.5" ></text>
</g>
<g >
<title>muduo::net::sockets::readv (1 samples, 0.01%)</title><rect x="88.6" y="677" width="0.1" height="15.0" fill="rgb(251,119,32)" rx="2" ry="2" />
<text  x="91.57" y="687.5" ></text>
</g>
<g >
<title>redisCommandArgv (4 samples, 0.05%)</title><rect x="773.7" y="693" width="0.7" height="15.0" fill="rgb(245,81,43)" rx="2" ry="2" />
<text  x="776.71" y="703.5" ></text>
</g>
<g >
<title>mod_timer (2 samples, 0.03%)</title><rect x="907.1" y="357" width="0.3" height="15.0" fill="rgb(236,42,48)" rx="2" ry="2" />
<text  x="910.08" y="367.5" ></text>
</g>
<g >
<title>tcp_md5_do_lookup (1 samples, 0.01%)</title><rect x="410.9" y="133" width="0.2" height="15.0" fill="rgb(208,102,23)" rx="2" ry="2" />
<text  x="413.93" y="143.5" ></text>
</g>
<g >
<title>operator delete[] (1 samples, 0.01%)</title><rect x="1132.8" y="677" width="0.1" height="15.0" fill="rgb(241,21,53)" rx="2" ry="2" />
<text  x="1135.77" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="247.3" y="597" width="0.2" height="15.0" fill="rgb(241,109,17)" rx="2" ry="2" />
<text  x="250.33" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="318.5" y="741" width="0.1" height="15.0" fill="rgb(212,155,7)" rx="2" ry="2" />
<text  x="321.46" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (8 samples, 0.11%)</title><rect x="1127.6" y="693" width="1.3" height="15.0" fill="rgb(245,97,17)" rx="2" ry="2" />
<text  x="1130.60" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1121.9" y="597" width="0.2" height="15.0" fill="rgb(218,149,9)" rx="2" ry="2" />
<text  x="1124.94" y="607.5" ></text>
</g>
<g >
<title>tcp_rcv_established (2 samples, 0.03%)</title><rect x="905.8" y="437" width="0.3" height="15.0" fill="rgb(244,63,2)" rx="2" ry="2" />
<text  x="908.79" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="648.1" y="949" width="0.8" height="15.0" fill="rgb(245,163,4)" rx="2" ry="2" />
<text  x="651.10" y="959.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (3 samples, 0.04%)</title><rect x="800.9" y="661" width="0.5" height="15.0" fill="rgb(249,215,32)" rx="2" ry="2" />
<text  x="803.87" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (1 samples, 0.01%)</title><rect x="107.6" y="533" width="0.2" height="15.0" fill="rgb(242,94,14)" rx="2" ry="2" />
<text  x="110.65" y="543.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="116.2" y="805" width="0.2" height="15.0" fill="rgb(209,38,17)" rx="2" ry="2" />
<text  x="119.21" y="815.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::~TcpConnection (3 samples, 0.04%)</title><rect x="658.4" y="613" width="0.5" height="15.0" fill="rgb(233,165,43)" rx="2" ry="2" />
<text  x="661.44" y="623.5" ></text>
</g>
<g >
<title>do_tcp_setsockopt.isra.37 (1 samples, 0.01%)</title><rect x="385.7" y="469" width="0.2" height="15.0" fill="rgb(209,187,4)" rx="2" ry="2" />
<text  x="388.71" y="479.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="1025.1" y="533" width="0.2" height="15.0" fill="rgb(240,69,53)" rx="2" ry="2" />
<text  x="1028.10" y="543.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (1 samples, 0.01%)</title><rect x="78.7" y="485" width="0.2" height="15.0" fill="rgb(239,57,14)" rx="2" ry="2" />
<text  x="81.71" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (3 samples, 0.04%)</title><rect x="88.1" y="613" width="0.5" height="15.0" fill="rgb(227,222,53)" rx="2" ry="2" />
<text  x="91.08" y="623.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="768.9" y="565" width="0.3" height="15.0" fill="rgb(240,60,53)" rx="2" ry="2" />
<text  x="771.86" y="575.5" ></text>
</g>
<g >
<title>tcp_established_options (1 samples, 0.01%)</title><rect x="580.7" y="725" width="0.1" height="15.0" fill="rgb(212,204,48)" rx="2" ry="2" />
<text  x="583.68" y="735.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 0.05%)</title><rect x="341.1" y="469" width="0.6" height="15.0" fill="rgb(212,54,15)" rx="2" ry="2" />
<text  x="344.09" y="479.5" ></text>
</g>
<g >
<title>sk_reset_timer (5 samples, 0.07%)</title><rect x="412.7" y="69" width="0.8" height="15.0" fill="rgb(244,78,23)" rx="2" ry="2" />
<text  x="415.71" y="79.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.01%)</title><rect x="23.3" y="981" width="0.1" height="15.0" fill="rgb(211,76,47)" rx="2" ry="2" />
<text  x="26.26" y="991.5" ></text>
</g>
<g >
<title>muduo::net::Channel::remove (1 samples, 0.01%)</title><rect x="137.6" y="693" width="0.1" height="15.0" fill="rgb(240,40,14)" rx="2" ry="2" />
<text  x="140.55" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1180.6" y="693" width="0.2" height="15.0" fill="rgb(225,16,1)" rx="2" ry="2" />
<text  x="1183.62" y="703.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="276.7" y="933" width="0.2" height="15.0" fill="rgb(220,90,39)" rx="2" ry="2" />
<text  x="279.75" y="943.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="661.0" y="581" width="0.2" height="15.0" fill="rgb(209,143,24)" rx="2" ry="2" />
<text  x="664.03" y="591.5" ></text>
</g>
<g >
<title>__netif_receive_skb (447 samples, 6.12%)</title><rect x="407.4" y="245" width="72.2" height="15.0" fill="rgb(236,196,0)" rx="2" ry="2" />
<text  x="410.37" y="255.5" >__netif_..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="770.5" y="629" width="0.3" height="15.0" fill="rgb(205,203,28)" rx="2" ry="2" />
<text  x="773.48" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1157.2" y="677" width="0.1" height="15.0" fill="rgb(210,117,5)" rx="2" ry="2" />
<text  x="1160.18" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (2 samples, 0.03%)</title><rect x="361.9" y="789" width="0.4" height="15.0" fill="rgb(221,44,44)" rx="2" ry="2" />
<text  x="364.95" y="799.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="682.9" y="565" width="0.1" height="15.0" fill="rgb(212,172,5)" rx="2" ry="2" />
<text  x="685.85" y="575.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="482.5" y="437" width="0.2" height="15.0" fill="rgb(214,112,43)" rx="2" ry="2" />
<text  x="485.55" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="105.1" y="469" width="0.3" height="15.0" fill="rgb(244,190,36)" rx="2" ry="2" />
<text  x="108.06" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (1 samples, 0.01%)</title><rect x="1157.7" y="693" width="0.1" height="15.0" fill="rgb(253,124,8)" rx="2" ry="2" />
<text  x="1160.67" y="703.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="499.0" y="773" width="0.4" height="15.0" fill="rgb(249,202,7)" rx="2" ry="2" />
<text  x="502.04" y="783.5" ></text>
</g>
<g >
<title>Parser::setConn (1 samples, 0.01%)</title><rect x="819.0" y="725" width="0.1" height="15.0" fill="rgb(241,19,7)" rx="2" ry="2" />
<text  x="821.98" y="735.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="581.3" y="741" width="0.2" height="15.0" fill="rgb(221,157,51)" rx="2" ry="2" />
<text  x="584.33" y="751.5" ></text>
</g>
<g >
<title>StaticServer::onParser (2 samples, 0.03%)</title><rect x="659.6" y="757" width="0.3" height="15.0" fill="rgb(254,42,8)" rx="2" ry="2" />
<text  x="662.57" y="767.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (1 samples, 0.01%)</title><rect x="333.5" y="469" width="0.2" height="15.0" fill="rgb(228,163,10)" rx="2" ry="2" />
<text  x="336.49" y="479.5" ></text>
</g>
<g >
<title>mod_timer (5 samples, 0.07%)</title><rect x="166.3" y="53" width="0.8" height="15.0" fill="rgb(236,115,23)" rx="2" ry="2" />
<text  x="169.33" y="63.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~tuple (1 samples, 0.01%)</title><rect x="658.9" y="773" width="0.2" height="15.0" fill="rgb(213,197,32)" rx="2" ry="2" />
<text  x="661.93" y="783.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="353.5" y="437" width="0.2" height="15.0" fill="rgb(223,209,48)" rx="2" ry="2" />
<text  x="356.54" y="447.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (29 samples, 0.40%)</title><rect x="329.1" y="549" width="4.7" height="15.0" fill="rgb(207,188,45)" rx="2" ry="2" />
<text  x="332.13" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12 samples, 0.16%)</title><rect x="994.7" y="821" width="1.9" height="15.0" fill="rgb(224,172,15)" rx="2" ry="2" />
<text  x="997.71" y="831.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="1132.1" y="645" width="0.2" height="15.0" fill="rgb(233,111,25)" rx="2" ry="2" />
<text  x="1135.12" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11 samples, 0.15%)</title><rect x="99.4" y="549" width="1.8" height="15.0" fill="rgb(218,9,36)" rx="2" ry="2" />
<text  x="102.40" y="559.5" ></text>
</g>
<g >
<title>ip_rcv (438 samples, 6.00%)</title><rect x="408.5" y="213" width="70.8" height="15.0" fill="rgb(231,114,20)" rx="2" ry="2" />
<text  x="411.51" y="223.5" >ip_rcv</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="253.1" y="741" width="0.2" height="15.0" fill="rgb(254,164,51)" rx="2" ry="2" />
<text  x="256.15" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="1119.4" y="613" width="1.7" height="15.0" fill="rgb(243,110,47)" rx="2" ry="2" />
<text  x="1122.35" y="623.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="359.4" y="757" width="0.1" height="15.0" fill="rgb(227,65,2)" rx="2" ry="2" />
<text  x="362.36" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.0" y="613" width="0.2" height="15.0" fill="rgb(238,71,3)" rx="2" ry="2" />
<text  x="1122.03" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1154.1" y="629" width="0.2" height="15.0" fill="rgb(244,15,30)" rx="2" ry="2" />
<text  x="1157.11" y="639.5" ></text>
</g>
<g >
<title>futex_wake_op (1 samples, 0.01%)</title><rect x="94.1" y="469" width="0.1" height="15.0" fill="rgb(229,102,2)" rx="2" ry="2" />
<text  x="97.07" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="98.4" y="501" width="0.2" height="15.0" fill="rgb(231,20,12)" rx="2" ry="2" />
<text  x="101.43" y="511.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (16 samples, 0.22%)</title><rect x="125.4" y="773" width="2.6" height="15.0" fill="rgb(211,43,45)" rx="2" ry="2" />
<text  x="128.43" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; (1 samples, 0.01%)</title><rect x="663.9" y="693" width="0.2" height="15.0" fill="rgb(218,140,28)" rx="2" ry="2" />
<text  x="666.94" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="244.4" y="693" width="0.2" height="15.0" fill="rgb(224,55,12)" rx="2" ry="2" />
<text  x="247.42" y="703.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setWriteCompleteCallback (12 samples, 0.16%)</title><rect x="1124.0" y="693" width="2.0" height="15.0" fill="rgb(212,144,16)" rx="2" ry="2" />
<text  x="1127.04" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="808.6" y="677" width="0.2" height="15.0" fill="rgb(234,138,49)" rx="2" ry="2" />
<text  x="811.63" y="687.5" ></text>
</g>
<g >
<title>skb_release_data (4 samples, 0.05%)</title><rect x="563.9" y="341" width="0.6" height="15.0" fill="rgb(251,63,21)" rx="2" ry="2" />
<text  x="566.87" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp, true&gt; (1 samples, 0.01%)</title><rect x="110.2" y="629" width="0.2" height="15.0" fill="rgb(239,109,24)" rx="2" ry="2" />
<text  x="113.23" y="639.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::isInLoopThread (1 samples, 0.01%)</title><rect x="682.7" y="661" width="0.2" height="15.0" fill="rgb(222,219,25)" rx="2" ry="2" />
<text  x="685.69" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="504.7" y="741" width="0.2" height="15.0" fill="rgb(209,44,12)" rx="2" ry="2" />
<text  x="507.70" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str@plt (1 samples, 0.01%)</title><rect x="1180.8" y="725" width="0.1" height="15.0" fill="rgb(251,149,11)" rx="2" ry="2" />
<text  x="1183.79" y="735.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;muduo::net::Channel**, muduo::net::Channel*&gt; (2 samples, 0.03%)</title><rect x="504.5" y="789" width="0.4" height="15.0" fill="rgb(222,147,32)" rx="2" ry="2" />
<text  x="507.54" y="799.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="807.0" y="597" width="0.2" height="15.0" fill="rgb(237,190,28)" rx="2" ry="2" />
<text  x="810.01" y="607.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="33.9" y="949" width="0.2" height="15.0" fill="rgb(247,59,0)" rx="2" ry="2" />
<text  x="36.93" y="959.5" ></text>
</g>
<g >
<title>sys_futex (4 samples, 0.05%)</title><rect x="341.1" y="485" width="0.6" height="15.0" fill="rgb(211,175,46)" rx="2" ry="2" />
<text  x="344.09" y="495.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (1 samples, 0.01%)</title><rect x="61.2" y="805" width="0.2" height="15.0" fill="rgb(233,13,49)" rx="2" ry="2" />
<text  x="64.25" y="815.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="357.1" y="597" width="0.2" height="15.0" fill="rgb(251,71,47)" rx="2" ry="2" />
<text  x="360.10" y="607.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (2 samples, 0.03%)</title><rect x="123.2" y="709" width="0.3" height="15.0" fill="rgb(224,108,4)" rx="2" ry="2" />
<text  x="126.17" y="719.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="401.9" y="453" width="0.1" height="15.0" fill="rgb(242,158,5)" rx="2" ry="2" />
<text  x="404.88" y="463.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="363.7" y="741" width="0.2" height="15.0" fill="rgb(241,188,53)" rx="2" ry="2" />
<text  x="366.73" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1004.6" y="629" width="0.1" height="15.0" fill="rgb(224,33,33)" rx="2" ry="2" />
<text  x="1007.57" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.07%)</title><rect x="648.1" y="981" width="0.8" height="15.0" fill="rgb(217,129,48)" rx="2" ry="2" />
<text  x="651.10" y="991.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (1 samples, 0.01%)</title><rect x="484.7" y="485" width="0.1" height="15.0" fill="rgb(226,43,2)" rx="2" ry="2" />
<text  x="487.65" y="495.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="803.3" y="629" width="0.2" height="15.0" fill="rgb(210,150,27)" rx="2" ry="2" />
<text  x="806.29" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="375.2" y="773" width="0.2" height="15.0" fill="rgb(234,110,51)" rx="2" ry="2" />
<text  x="378.20" y="783.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="493.7" y="789" width="0.2" height="15.0" fill="rgb(210,179,45)" rx="2" ry="2" />
<text  x="496.70" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (1 samples, 0.01%)</title><rect x="355.5" y="533" width="0.1" height="15.0" fill="rgb(208,59,20)" rx="2" ry="2" />
<text  x="358.48" y="543.5" ></text>
</g>
<g >
<title>CZlibMgr::UnCompress (3 samples, 0.04%)</title><rect x="1003.4" y="693" width="0.5" height="15.0" fill="rgb(249,56,12)" rx="2" ry="2" />
<text  x="1006.44" y="703.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="317.2" y="773" width="0.1" height="15.0" fill="rgb(233,122,5)" rx="2" ry="2" />
<text  x="320.17" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1153.3" y="661" width="0.2" height="15.0" fill="rgb(244,167,34)" rx="2" ry="2" />
<text  x="1156.30" y="671.5" ></text>
</g>
<g >
<title>asyncOutput (5 samples, 0.07%)</title><rect x="496.8" y="789" width="0.8" height="15.0" fill="rgb(218,29,20)" rx="2" ry="2" />
<text  x="499.78" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="247.3" y="405" width="0.2" height="15.0" fill="rgb(228,215,11)" rx="2" ry="2" />
<text  x="250.33" y="415.5" ></text>
</g>
<g >
<title>validate_xmit_skb (1 samples, 0.01%)</title><rect x="579.9" y="613" width="0.1" height="15.0" fill="rgb(241,157,37)" rx="2" ry="2" />
<text  x="582.87" y="623.5" ></text>
</g>
<g >
<title>bictcp_cong_avoid (1 samples, 0.01%)</title><rect x="563.1" y="389" width="0.1" height="15.0" fill="rgb(233,39,32)" rx="2" ry="2" />
<text  x="566.06" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.03%)</title><rect x="135.5" y="805" width="0.3" height="15.0" fill="rgb(230,55,13)" rx="2" ry="2" />
<text  x="138.45" y="815.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="245.7" y="741" width="1.8" height="15.0" fill="rgb(225,91,36)" rx="2" ry="2" />
<text  x="248.71" y="751.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (2 samples, 0.03%)</title><rect x="895.4" y="757" width="0.4" height="15.0" fill="rgb(249,64,5)" rx="2" ry="2" />
<text  x="898.44" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="633.5" y="965" width="0.5" height="15.0" fill="rgb(250,143,33)" rx="2" ry="2" />
<text  x="636.55" y="975.5" ></text>
</g>
<g >
<title>epoll_wait (1 samples, 0.01%)</title><rect x="60.1" y="821" width="0.2" height="15.0" fill="rgb(207,159,33)" rx="2" ry="2" />
<text  x="63.12" y="831.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::weak_ptr (2 samples, 0.03%)</title><rect x="340.6" y="549" width="0.3" height="15.0" fill="rgb(252,210,7)" rx="2" ry="2" />
<text  x="343.61" y="559.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (1 samples, 0.01%)</title><rect x="1163.0" y="693" width="0.2" height="15.0" fill="rgb(252,13,51)" rx="2" ry="2" />
<text  x="1166.00" y="703.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="1161.9" y="597" width="0.1" height="15.0" fill="rgb(219,3,29)" rx="2" ry="2" />
<text  x="1164.87" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="385.6" y="645" width="0.3" height="15.0" fill="rgb(211,154,18)" rx="2" ry="2" />
<text  x="388.55" y="655.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::lock (5 samples, 0.07%)</title><rect x="1140.9" y="693" width="0.8" height="15.0" fill="rgb(242,211,12)" rx="2" ry="2" />
<text  x="1143.85" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (38 samples, 0.52%)</title><rect x="789.6" y="693" width="6.1" height="15.0" fill="rgb(248,223,12)" rx="2" ry="2" />
<text  x="792.55" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="994.4" y="789" width="0.1" height="15.0" fill="rgb(207,97,12)" rx="2" ry="2" />
<text  x="997.38" y="799.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt;::push_back_impl&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="1188.2" y="645" width="0.2" height="15.0" fill="rgb(213,158,28)" rx="2" ry="2" />
<text  x="1191.22" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (36 samples, 0.49%)</title><rect x="1008.1" y="677" width="5.8" height="15.0" fill="rgb(215,25,5)" rx="2" ry="2" />
<text  x="1011.13" y="687.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (1 samples, 0.01%)</title><rect x="276.7" y="981" width="0.2" height="15.0" fill="rgb(227,82,34)" rx="2" ry="2" />
<text  x="279.75" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, unsigned long, false&gt;::_S_equals (2 samples, 0.03%)</title><rect x="352.9" y="469" width="0.3" height="15.0" fill="rgb(215,42,48)" rx="2" ry="2" />
<text  x="355.89" y="479.5" ></text>
</g>
<g >
<title>ipv4_mtu (1 samples, 0.01%)</title><rect x="583.1" y="773" width="0.2" height="15.0" fill="rgb(239,98,47)" rx="2" ry="2" />
<text  x="586.11" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="677.0" y="629" width="0.2" height="15.0" fill="rgb(230,208,8)" rx="2" ry="2" />
<text  x="680.03" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (17 samples, 0.23%)</title><rect x="249.4" y="789" width="2.8" height="15.0" fill="rgb(242,194,48)" rx="2" ry="2" />
<text  x="252.43" y="799.5" ></text>
</g>
<g >
<title>do_futex (2 samples, 0.03%)</title><rect x="1024.9" y="565" width="0.4" height="15.0" fill="rgb(213,184,5)" rx="2" ry="2" />
<text  x="1027.94" y="575.5" ></text>
</g>
<g >
<title>muduo::StringPiece::StringPiece (1 samples, 0.01%)</title><rect x="137.1" y="725" width="0.1" height="15.0" fill="rgb(211,207,17)" rx="2" ry="2" />
<text  x="140.07" y="735.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="971.3" y="901" width="0.1" height="15.0" fill="rgb(246,62,6)" rx="2" ry="2" />
<text  x="974.27" y="911.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="607.4" y="949" width="0.1" height="15.0" fill="rgb(205,63,51)" rx="2" ry="2" />
<text  x="610.36" y="959.5" ></text>
</g>
<g >
<title>try_to_wake_up (10 samples, 0.14%)</title><rect x="654.6" y="693" width="1.6" height="15.0" fill="rgb(223,100,22)" rx="2" ry="2" />
<text  x="657.56" y="703.5" ></text>
</g>
<g >
<title>ext4_get_group_desc (1 samples, 0.01%)</title><rect x="13.4" y="709" width="0.2" height="15.0" fill="rgb(244,23,13)" rx="2" ry="2" />
<text  x="16.39" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (3 samples, 0.04%)</title><rect x="778.4" y="629" width="0.5" height="15.0" fill="rgb(240,138,16)" rx="2" ry="2" />
<text  x="781.40" y="639.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="927.0" y="741" width="0.3" height="15.0" fill="rgb(242,221,32)" rx="2" ry="2" />
<text  x="929.97" y="751.5" ></text>
</g>
<g >
<title>__virt_addr_valid (4 samples, 0.05%)</title><rect x="332.0" y="437" width="0.7" height="15.0" fill="rgb(250,40,1)" rx="2" ry="2" />
<text  x="335.04" y="447.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="944.8" y="949" width="0.1" height="15.0" fill="rgb(234,85,43)" rx="2" ry="2" />
<text  x="947.75" y="959.5" ></text>
</g>
<g >
<title>dev_queue_xmit (13 samples, 0.18%)</title><rect x="480.0" y="341" width="2.1" height="15.0" fill="rgb(232,55,40)" rx="2" ry="2" />
<text  x="482.96" y="351.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (3 samples, 0.04%)</title><rect x="88.1" y="645" width="0.5" height="15.0" fill="rgb(251,174,14)" rx="2" ry="2" />
<text  x="91.08" y="655.5" ></text>
</g>
<g >
<title>wake_up_q (11 samples, 0.15%)</title><rect x="1025.4" y="533" width="1.8" height="15.0" fill="rgb(221,164,49)" rx="2" ry="2" />
<text  x="1028.42" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (2 samples, 0.03%)</title><rect x="776.6" y="645" width="0.3" height="15.0" fill="rgb(207,120,40)" rx="2" ry="2" />
<text  x="779.62" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8 samples, 0.11%)</title><rect x="1138.3" y="629" width="1.3" height="15.0" fill="rgb(251,161,21)" rx="2" ry="2" />
<text  x="1141.27" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.01%)</title><rect x="665.6" y="677" width="0.1" height="15.0" fill="rgb(249,74,0)" rx="2" ry="2" />
<text  x="668.56" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (6 samples, 0.08%)</title><rect x="994.9" y="661" width="0.9" height="15.0" fill="rgb(209,87,37)" rx="2" ry="2" />
<text  x="997.87" y="671.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="992.0" y="741" width="0.1" height="15.0" fill="rgb(222,213,5)" rx="2" ry="2" />
<text  x="994.96" y="751.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="561.4" y="341" width="0.4" height="15.0" fill="rgb(215,183,43)" rx="2" ry="2" />
<text  x="564.44" y="351.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::assertInLoopThread (1 samples, 0.01%)</title><rect x="243.8" y="677" width="0.1" height="15.0" fill="rgb(237,86,44)" rx="2" ry="2" />
<text  x="246.77" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="654.1" y="821" width="0.1" height="15.0" fill="rgb(253,48,38)" rx="2" ry="2" />
<text  x="657.08" y="831.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (2 samples, 0.03%)</title><rect x="122.8" y="709" width="0.4" height="15.0" fill="rgb(206,35,42)" rx="2" ry="2" />
<text  x="125.84" y="719.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (11 samples, 0.15%)</title><rect x="66.9" y="773" width="1.8" height="15.0" fill="rgb(244,33,11)" rx="2" ry="2" />
<text  x="69.91" y="783.5" ></text>
</g>
<g >
<title>ip_local_deliver (448 samples, 6.14%)</title><rect x="162.1" y="181" width="72.5" height="15.0" fill="rgb(234,19,7)" rx="2" ry="2" />
<text  x="165.13" y="191.5" >ip_local..</text>
</g>
<g >
<title>tcp_recvmsg (132 samples, 1.81%)</title><rect x="510.5" y="837" width="21.4" height="15.0" fill="rgb(246,76,30)" rx="2" ry="2" />
<text  x="513.52" y="847.5" >t..</text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="504.7" y="677" width="0.2" height="15.0" fill="rgb(233,107,35)" rx="2" ry="2" />
<text  x="507.70" y="687.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="1025.1" y="517" width="0.2" height="15.0" fill="rgb(253,64,4)" rx="2" ry="2" />
<text  x="1028.10" y="527.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (1 samples, 0.01%)</title><rect x="385.2" y="645" width="0.2" height="15.0" fill="rgb(239,229,26)" rx="2" ry="2" />
<text  x="388.23" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="285.3" y="965" width="0.2" height="15.0" fill="rgb(245,192,25)" rx="2" ry="2" />
<text  x="288.32" y="975.5" ></text>
</g>
<g >
<title>rw_verify_area (6 samples, 0.08%)</title><rect x="485.8" y="597" width="1.0" height="15.0" fill="rgb(242,190,9)" rx="2" ry="2" />
<text  x="488.78" y="607.5" ></text>
</g>
<g >
<title>operator new@plt (1 samples, 0.01%)</title><rect x="618.7" y="981" width="0.1" height="15.0" fill="rgb(239,14,41)" rx="2" ry="2" />
<text  x="621.67" y="991.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2 samples, 0.03%)</title><rect x="1022.5" y="565" width="0.3" height="15.0" fill="rgb(241,107,9)" rx="2" ry="2" />
<text  x="1025.51" y="575.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="836.1" y="725" width="0.2" height="15.0" fill="rgb(208,139,2)" rx="2" ry="2" />
<text  x="839.11" y="735.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (1 samples, 0.01%)</title><rect x="550.3" y="789" width="0.1" height="15.0" fill="rgb(219,50,28)" rx="2" ry="2" />
<text  x="553.29" y="799.5" ></text>
</g>
<g >
<title>schedule (44 samples, 0.60%)</title><rect x="388.1" y="613" width="7.2" height="15.0" fill="rgb(215,30,11)" rx="2" ry="2" />
<text  x="391.14" y="623.5" ></text>
</g>
<g >
<title>strrchr (6 samples, 0.08%)</title><rect x="381.5" y="805" width="1.0" height="15.0" fill="rgb(254,92,5)" rx="2" ry="2" />
<text  x="384.51" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5 samples, 0.07%)</title><rect x="95.7" y="533" width="0.8" height="15.0" fill="rgb(252,118,6)" rx="2" ry="2" />
<text  x="98.68" y="543.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.01%)</title><rect x="11.3" y="741" width="0.2" height="15.0" fill="rgb(211,85,29)" rx="2" ry="2" />
<text  x="14.29" y="751.5" ></text>
</g>
<g >
<title>sdsnewlen (1 samples, 0.01%)</title><rect x="652.8" y="997" width="0.1" height="15.0" fill="rgb(205,41,24)" rx="2" ry="2" />
<text  x="655.78" y="1007.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="97.9" y="453" width="0.2" height="15.0" fill="rgb(233,138,27)" rx="2" ry="2" />
<text  x="100.95" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;2ul, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.3" y="565" width="0.2" height="15.0" fill="rgb(217,122,53)" rx="2" ry="2" />
<text  x="93.35" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.05%)</title><rect x="1149.9" y="645" width="0.7" height="15.0" fill="rgb(246,137,4)" rx="2" ry="2" />
<text  x="1152.91" y="655.5" ></text>
</g>
<g >
<title>muduo::net::Channel::eventsToString[abi:cxx11] (2 samples, 0.03%)</title><rect x="254.3" y="789" width="0.3" height="15.0" fill="rgb(218,69,15)" rx="2" ry="2" />
<text  x="257.28" y="799.5" ></text>
</g>
<g >
<title>_IO_setb (1 samples, 0.01%)</title><rect x="961.4" y="997" width="0.2" height="15.0" fill="rgb(211,41,45)" rx="2" ry="2" />
<text  x="964.40" y="1007.5" ></text>
</g>
<g >
<title>process_backlog (123 samples, 1.69%)</title><rect x="556.9" y="565" width="19.9" height="15.0" fill="rgb(254,215,10)" rx="2" ry="2" />
<text  x="559.92" y="575.5" ></text>
</g>
<g >
<title>__schedule (135 samples, 1.85%)</title><rect x="850.5" y="757" width="21.8" height="15.0" fill="rgb(212,6,10)" rx="2" ry="2" />
<text  x="853.50" y="767.5" >_..</text>
</g>
<g >
<title>StaticServer::onParser (1,149 samples, 15.74%)</title><rect x="998.4" y="741" width="185.8" height="15.0" fill="rgb(244,175,33)" rx="2" ry="2" />
<text  x="1001.43" y="751.5" >StaticServer::onParser</text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_Rb_tree_const_iterator (1 samples, 0.01%)</title><rect x="380.2" y="757" width="0.2" height="15.0" fill="rgb(249,183,7)" rx="2" ry="2" />
<text  x="383.22" y="767.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (132 samples, 1.81%)</title><rect x="361.1" y="821" width="21.4" height="15.0" fill="rgb(246,3,34)" rx="2" ry="2" />
<text  x="364.14" y="831.5" >m..</text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.01%)</title><rect x="650.5" y="917" width="0.2" height="15.0" fill="rgb(210,29,46)" rx="2" ry="2" />
<text  x="653.52" y="927.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;std::weak_ptr&lt;StaticServer::Entry&gt; &gt;::type (1 samples, 0.01%)</title><rect x="340.1" y="501" width="0.2" height="15.0" fill="rgb(244,143,10)" rx="2" ry="2" />
<text  x="343.12" y="511.5" ></text>
</g>
<g >
<title>netdev_pick_tx (1 samples, 0.01%)</title><rect x="237.0" y="309" width="0.1" height="15.0" fill="rgb(230,137,31)" rx="2" ry="2" />
<text  x="239.98" y="319.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="351.1" y="501" width="0.2" height="15.0" fill="rgb(242,98,26)" rx="2" ry="2" />
<text  x="354.12" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (2 samples, 0.03%)</title><rect x="32.0" y="949" width="0.3" height="15.0" fill="rgb(243,203,10)" rx="2" ry="2" />
<text  x="34.99" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="286.6" y="949" width="0.2" height="15.0" fill="rgb(231,154,41)" rx="2" ry="2" />
<text  x="289.61" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1178.5" y="693" width="0.2" height="15.0" fill="rgb(218,199,27)" rx="2" ry="2" />
<text  x="1181.52" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;3ul, std::_Placeholder&lt;3&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="356.9" y="581" width="0.2" height="15.0" fill="rgb(250,155,0)" rx="2" ry="2" />
<text  x="359.94" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="801.7" y="661" width="0.1" height="15.0" fill="rgb(213,149,54)" rx="2" ry="2" />
<text  x="804.68" y="671.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.01%)</title><rect x="82.6" y="165" width="0.1" height="15.0" fill="rgb(230,71,13)" rx="2" ry="2" />
<text  x="85.59" y="175.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.01%)</title><rect x="12.7" y="773" width="0.2" height="15.0" fill="rgb(217,67,24)" rx="2" ry="2" />
<text  x="15.75" y="783.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, muduo::net::Buffer*&amp;&amp;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="338.8" y="533" width="0.2" height="15.0" fill="rgb(223,134,49)" rx="2" ry="2" />
<text  x="341.83" y="543.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="769.5" y="645" width="0.2" height="15.0" fill="rgb(216,1,12)" rx="2" ry="2" />
<text  x="772.51" y="655.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1152.7" y="661" width="0.1" height="15.0" fill="rgb(219,190,33)" rx="2" ry="2" />
<text  x="1155.66" y="671.5" ></text>
</g>
<g >
<title>sk_reset_timer (5 samples, 0.07%)</title><rect x="166.3" y="69" width="0.8" height="15.0" fill="rgb(245,66,41)" rx="2" ry="2" />
<text  x="169.33" y="79.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="498.7" y="741" width="0.2" height="15.0" fill="rgb(217,173,27)" rx="2" ry="2" />
<text  x="501.72" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::end (1 samples, 0.01%)</title><rect x="257.0" y="805" width="0.2" height="15.0" fill="rgb(232,187,30)" rx="2" ry="2" />
<text  x="260.03" y="815.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="782.0" y="565" width="0.1" height="15.0" fill="rgb(222,120,26)" rx="2" ry="2" />
<text  x="784.96" y="575.5" ></text>
</g>
<g >
<title>ip_local_deliver (122 samples, 1.67%)</title><rect x="902.9" y="485" width="19.7" height="15.0" fill="rgb(222,180,39)" rx="2" ry="2" />
<text  x="905.88" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="319.3" y="789" width="0.1" height="15.0" fill="rgb(240,105,42)" rx="2" ry="2" />
<text  x="322.27" y="799.5" ></text>
</g>
<g >
<title>map_id_up (1 samples, 0.01%)</title><rect x="1167.5" y="613" width="0.2" height="15.0" fill="rgb(245,115,37)" rx="2" ry="2" />
<text  x="1170.53" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="949.3" y="949" width="0.1" height="15.0" fill="rgb(243,213,4)" rx="2" ry="2" />
<text  x="952.28" y="959.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (7 samples, 0.10%)</title><rect x="494.5" y="773" width="1.1" height="15.0" fill="rgb(223,152,6)" rx="2" ry="2" />
<text  x="497.51" y="783.5" ></text>
</g>
<g >
<title>__vfs_read (5 samples, 0.07%)</title><rect x="72.6" y="597" width="0.8" height="15.0" fill="rgb(221,10,32)" rx="2" ry="2" />
<text  x="75.56" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="674.3" y="629" width="0.1" height="15.0" fill="rgb(246,10,0)" rx="2" ry="2" />
<text  x="677.29" y="639.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="495.2" y="725" width="0.3" height="15.0" fill="rgb(210,8,39)" rx="2" ry="2" />
<text  x="498.16" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.01%)</title><rect x="601.7" y="965" width="0.2" height="15.0" fill="rgb(215,146,11)" rx="2" ry="2" />
<text  x="604.70" y="975.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="816.4" y="661" width="0.3" height="15.0" fill="rgb(214,145,24)" rx="2" ry="2" />
<text  x="819.39" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="69.7" y="709" width="0.1" height="15.0" fill="rgb(216,118,30)" rx="2" ry="2" />
<text  x="72.65" y="719.5" ></text>
</g>
<g >
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="151.8" y="501" width="0.5" height="15.0" fill="rgb(246,172,2)" rx="2" ry="2" />
<text  x="154.78" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.01%)</title><rect x="959.0" y="981" width="0.1" height="15.0" fill="rgb(243,176,50)" rx="2" ry="2" />
<text  x="961.98" y="991.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (5 samples, 0.07%)</title><rect x="770.8" y="661" width="0.8" height="15.0" fill="rgb(222,132,40)" rx="2" ry="2" />
<text  x="773.80" y="671.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (1 samples, 0.01%)</title><rect x="83.1" y="469" width="0.1" height="15.0" fill="rgb(223,226,50)" rx="2" ry="2" />
<text  x="86.07" y="479.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdown (3 samples, 0.04%)</title><rect x="88.1" y="661" width="0.5" height="15.0" fill="rgb(235,212,7)" rx="2" ry="2" />
<text  x="91.08" y="671.5" ></text>
</g>
<g >
<title>sys_read (1 samples, 0.01%)</title><rect x="74.0" y="645" width="0.2" height="15.0" fill="rgb(217,205,22)" rx="2" ry="2" />
<text  x="77.02" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::Poller*, std::default_delete&lt;muduo::net::Poller&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="504.2" y="757" width="0.2" height="15.0" fill="rgb(249,50,54)" rx="2" ry="2" />
<text  x="507.21" y="767.5" ></text>
</g>
<g >
<title>vfs_getattr (9 samples, 0.12%)</title><rect x="1176.1" y="629" width="1.5" height="15.0" fill="rgb(239,142,33)" rx="2" ry="2" />
<text  x="1179.10" y="639.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="1188.9" y="757" width="0.1" height="15.0" fill="rgb(223,220,25)" rx="2" ry="2" />
<text  x="1191.87" y="767.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="658.6" y="565" width="0.2" height="15.0" fill="rgb(241,13,9)" rx="2" ry="2" />
<text  x="661.60" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="309.6" y="773" width="0.1" height="15.0" fill="rgb(212,190,37)" rx="2" ry="2" />
<text  x="312.57" y="783.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (128 samples, 1.75%)</title><rect x="556.3" y="629" width="20.7" height="15.0" fill="rgb(251,189,7)" rx="2" ry="2" />
<text  x="559.27" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::get (1 samples, 0.01%)</title><rect x="243.9" y="661" width="0.2" height="15.0" fill="rgb(216,218,40)" rx="2" ry="2" />
<text  x="246.93" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3 samples, 0.04%)</title><rect x="997.6" y="661" width="0.5" height="15.0" fill="rgb(214,1,38)" rx="2" ry="2" />
<text  x="1000.62" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="625.0" y="965" width="0.1" height="15.0" fill="rgb(208,135,30)" rx="2" ry="2" />
<text  x="627.98" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="67.7" y="709" width="0.2" height="15.0" fill="rgb(209,71,54)" rx="2" ry="2" />
<text  x="70.71" y="719.5" ></text>
</g>
<g >
<title>tcp_send_ack (2 samples, 0.03%)</title><rect x="82.4" y="453" width="0.3" height="15.0" fill="rgb(206,186,7)" rx="2" ry="2" />
<text  x="85.43" y="463.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (19 samples, 0.26%)</title><rect x="673.3" y="693" width="3.1" height="15.0" fill="rgb(217,164,49)" rx="2" ry="2" />
<text  x="676.32" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="662.3" y="645" width="0.2" height="15.0" fill="rgb(252,64,2)" rx="2" ry="2" />
<text  x="665.32" y="655.5" ></text>
</g>
<g >
<title>process_backlog (1 samples, 0.01%)</title><rect x="337.4" y="181" width="0.1" height="15.0" fill="rgb(228,6,14)" rx="2" ry="2" />
<text  x="340.37" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1 samples, 0.01%)</title><rect x="1131.6" y="613" width="0.2" height="15.0" fill="rgb(213,71,15)" rx="2" ry="2" />
<text  x="1134.64" y="623.5" ></text>
</g>
<g >
<title>ip_finish_output (1 samples, 0.01%)</title><rect x="337.4" y="293" width="0.1" height="15.0" fill="rgb(216,204,53)" rx="2" ry="2" />
<text  x="340.37" y="303.5" ></text>
</g>
<g >
<title>ip_finish_output (1 samples, 0.01%)</title><rect x="82.6" y="357" width="0.1" height="15.0" fill="rgb(223,203,0)" rx="2" ry="2" />
<text  x="85.59" y="367.5" ></text>
</g>
<g >
<title>operator new@plt (2 samples, 0.03%)</title><rect x="956.9" y="981" width="0.3" height="15.0" fill="rgb(243,177,38)" rx="2" ry="2" />
<text  x="959.88" y="991.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="849.5" y="805" width="0.2" height="15.0" fill="rgb(249,109,47)" rx="2" ry="2" />
<text  x="852.53" y="815.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (10 samples, 0.14%)</title><rect x="1186.8" y="933" width="1.6" height="15.0" fill="rgb(226,168,23)" rx="2" ry="2" />
<text  x="1189.77" y="943.5" ></text>
</g>
<g >
<title>malloc (11 samples, 0.15%)</title><rect x="648.9" y="997" width="1.8" height="15.0" fill="rgb(238,126,23)" rx="2" ry="2" />
<text  x="651.90" y="1007.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="495.5" y="757" width="0.1" height="15.0" fill="rgb(253,82,31)" rx="2" ry="2" />
<text  x="498.48" y="767.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.01%)</title><rect x="44.4" y="709" width="0.2" height="15.0" fill="rgb(250,29,5)" rx="2" ry="2" />
<text  x="47.43" y="719.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.03%)</title><rect x="956.6" y="981" width="0.3" height="15.0" fill="rgb(210,8,5)" rx="2" ry="2" />
<text  x="959.55" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1 samples, 0.01%)</title><rect x="340.6" y="485" width="0.2" height="15.0" fill="rgb(214,143,7)" rx="2" ry="2" />
<text  x="343.61" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="1140.9" y="645" width="0.1" height="15.0" fill="rgb(227,134,32)" rx="2" ry="2" />
<text  x="1143.85" y="655.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::Timestamp&amp;&amp;&gt;::tuple&lt;muduo::Timestamp, true&gt; (1 samples, 0.01%)</title><rect x="113.0" y="741" width="0.1" height="15.0" fill="rgb(233,82,16)" rx="2" ry="2" />
<text  x="115.98" y="751.5" ></text>
</g>
<g >
<title>__lock_text_start (392 samples, 5.37%)</title><rect x="415.6" y="37" width="63.4" height="15.0" fill="rgb(212,133,54)" rx="2" ry="2" />
<text  x="418.62" y="47.5" >__lock..</text>
</g>
<g >
<title>inet_shutdown (3 samples, 0.04%)</title><rect x="337.1" y="437" width="0.4" height="15.0" fill="rgb(231,188,47)" rx="2" ry="2" />
<text  x="340.05" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (2 samples, 0.03%)</title><rect x="384.1" y="789" width="0.3" height="15.0" fill="rgb(241,135,11)" rx="2" ry="2" />
<text  x="387.10" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="243.9" y="677" width="0.2" height="15.0" fill="rgb(252,200,2)" rx="2" ry="2" />
<text  x="246.93" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (7 samples, 0.10%)</title><rect x="497.9" y="773" width="1.1" height="15.0" fill="rgb(225,169,21)" rx="2" ry="2" />
<text  x="500.91" y="783.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (28 samples, 0.38%)</title><rect x="10.2" y="869" width="4.5" height="15.0" fill="rgb(252,74,34)" rx="2" ry="2" />
<text  x="13.16" y="879.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (7 samples, 0.10%)</title><rect x="235.8" y="309" width="1.2" height="15.0" fill="rgb(253,167,9)" rx="2" ry="2" />
<text  x="238.85" y="319.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;1&gt;, false, true&gt;::operator (1 samples, 0.01%)</title><rect x="358.9" y="741" width="0.1" height="15.0" fill="rgb(241,211,6)" rx="2" ry="2" />
<text  x="361.88" y="751.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::queueInLoop (535 samples, 7.33%)</title><rect x="682.9" y="661" width="86.4" height="15.0" fill="rgb(252,183,5)" rx="2" ry="2" />
<text  x="685.85" y="671.5" >muduo::net..</text>
</g>
<g >
<title>_IO_default_xsputn (2 samples, 0.03%)</title><rect x="282.1" y="997" width="0.3" height="15.0" fill="rgb(244,41,9)" rx="2" ry="2" />
<text  x="285.08" y="1007.5" ></text>
</g>
<g >
<title>rw_verify_area (5 samples, 0.07%)</title><rect x="874.3" y="917" width="0.8" height="15.0" fill="rgb(209,178,19)" rx="2" ry="2" />
<text  x="877.27" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (3 samples, 0.04%)</title><rect x="997.6" y="725" width="0.5" height="15.0" fill="rgb(220,148,37)" rx="2" ry="2" />
<text  x="1000.62" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1 samples, 0.01%)</title><rect x="1023.5" y="629" width="0.1" height="15.0" fill="rgb(209,106,54)" rx="2" ry="2" />
<text  x="1026.48" y="639.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.01%)</title><rect x="1186.3" y="981" width="0.1" height="15.0" fill="rgb(227,160,8)" rx="2" ry="2" />
<text  x="1189.28" y="991.5" ></text>
</g>
<g >
<title>inet_recvmsg (1 samples, 0.01%)</title><rect x="846.3" y="869" width="0.2" height="15.0" fill="rgb(212,186,7)" rx="2" ry="2" />
<text  x="849.30" y="879.5" ></text>
</g>
<g >
<title>std::move&lt;std::_Any_data&amp;&gt; (1 samples, 0.01%)</title><rect x="769.8" y="613" width="0.2" height="15.0" fill="rgb(233,14,47)" rx="2" ry="2" />
<text  x="772.83" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (3 samples, 0.04%)</title><rect x="679.9" y="597" width="0.5" height="15.0" fill="rgb(253,182,15)" rx="2" ry="2" />
<text  x="682.94" y="607.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="800.5" y="661" width="0.2" height="15.0" fill="rgb(235,87,28)" rx="2" ry="2" />
<text  x="803.55" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="948.3" y="917" width="0.2" height="15.0" fill="rgb(239,147,2)" rx="2" ry="2" />
<text  x="951.31" y="927.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="279.2" y="965" width="0.1" height="15.0" fill="rgb(237,229,17)" rx="2" ry="2" />
<text  x="282.17" y="975.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="88.1" y="581" width="0.5" height="15.0" fill="rgb(231,40,14)" rx="2" ry="2" />
<text  x="91.08" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (2 samples, 0.03%)</title><rect x="137.9" y="613" width="0.3" height="15.0" fill="rgb(226,46,27)" rx="2" ry="2" />
<text  x="140.88" y="623.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="39.7" y="757" width="0.2" height="15.0" fill="rgb(226,102,43)" rx="2" ry="2" />
<text  x="42.75" y="767.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (9 samples, 0.12%)</title><rect x="128.2" y="773" width="1.4" height="15.0" fill="rgb(237,72,24)" rx="2" ry="2" />
<text  x="131.18" y="783.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (3 samples, 0.04%)</title><rect x="485.0" y="533" width="0.5" height="15.0" fill="rgb(248,144,37)" rx="2" ry="2" />
<text  x="487.97" y="543.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::setCookie (1 samples, 0.01%)</title><rect x="63.0" y="741" width="0.2" height="15.0" fill="rgb(246,192,29)" rx="2" ry="2" />
<text  x="66.03" y="751.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="834.2" y="565" width="0.1" height="15.0" fill="rgb(249,71,45)" rx="2" ry="2" />
<text  x="837.17" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2 samples, 0.03%)</title><rect x="1161.4" y="613" width="0.3" height="15.0" fill="rgb(219,130,19)" rx="2" ry="2" />
<text  x="1164.39" y="623.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="508.4" y="933" width="0.3" height="15.0" fill="rgb(210,42,48)" rx="2" ry="2" />
<text  x="511.42" y="943.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="362.8" y="741" width="0.3" height="15.0" fill="rgb(246,155,49)" rx="2" ry="2" />
<text  x="365.76" y="751.5" ></text>
</g>
<g >
<title>__inode_permission (5 samples, 0.07%)</title><rect x="1169.6" y="549" width="0.8" height="15.0" fill="rgb(249,86,16)" rx="2" ry="2" />
<text  x="1172.63" y="559.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (1 samples, 0.01%)</title><rect x="10.5" y="773" width="0.1" height="15.0" fill="rgb(253,123,11)" rx="2" ry="2" />
<text  x="13.48" y="783.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (1 samples, 0.01%)</title><rect x="337.4" y="389" width="0.1" height="15.0" fill="rgb(206,7,3)" rx="2" ry="2" />
<text  x="340.37" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20 samples, 0.27%)</title><rect x="346.3" y="565" width="3.2" height="15.0" fill="rgb(223,14,47)" rx="2" ry="2" />
<text  x="349.27" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2 samples, 0.03%)</title><rect x="778.9" y="693" width="0.3" height="15.0" fill="rgb(224,119,42)" rx="2" ry="2" />
<text  x="781.88" y="703.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="549" width="0.2" height="15.0" fill="rgb(247,134,40)" rx="2" ry="2" />
<text  x="772.02" y="559.5" ></text>
</g>
<g >
<title>std::search&lt;char*, char const*&gt; (11 samples, 0.15%)</title><rect x="1000.0" y="693" width="1.8" height="15.0" fill="rgb(238,91,44)" rx="2" ry="2" />
<text  x="1003.04" y="703.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (506 samples, 6.93%)</title><rect x="157.6" y="437" width="81.8" height="15.0" fill="rgb(211,91,13)" rx="2" ry="2" />
<text  x="160.60" y="447.5" >__tcp_tra..</text>
</g>
<g >
<title>std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="246.4" y="661" width="1.1" height="15.0" fill="rgb(209,56,30)" rx="2" ry="2" />
<text  x="249.36" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (3 samples, 0.04%)</title><rect x="67.9" y="741" width="0.5" height="15.0" fill="rgb(250,190,53)" rx="2" ry="2" />
<text  x="70.88" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="89.9" y="613" width="0.1" height="15.0" fill="rgb(227,61,44)" rx="2" ry="2" />
<text  x="92.86" y="623.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (4 samples, 0.05%)</title><rect x="256.2" y="789" width="0.7" height="15.0" fill="rgb(217,101,42)" rx="2" ry="2" />
<text  x="259.22" y="799.5" ></text>
</g>
<g >
<title>common_file_perm (5 samples, 0.07%)</title><rect x="764.8" y="501" width="0.8" height="15.0" fill="rgb(236,47,7)" rx="2" ry="2" />
<text  x="767.82" y="511.5" ></text>
</g>
<g >
<title>__fsnotify_parent (1 samples, 0.01%)</title><rect x="889.0" y="901" width="0.1" height="15.0" fill="rgb(215,186,49)" rx="2" ry="2" />
<text  x="891.98" y="911.5" ></text>
</g>
<g >
<title>inet_sendmsg (1 samples, 0.01%)</title><rect x="396.1" y="549" width="0.1" height="15.0" fill="rgb(245,96,44)" rx="2" ry="2" />
<text  x="399.06" y="559.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="129.1" y="725" width="0.2" height="15.0" fill="rgb(246,110,26)" rx="2" ry="2" />
<text  x="132.15" y="735.5" ></text>
</g>
<g >
<title>asyncOutput (13 samples, 0.18%)</title><rect x="673.3" y="677" width="2.1" height="15.0" fill="rgb(223,128,51)" rx="2" ry="2" />
<text  x="676.32" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="118.0" y="709" width="0.2" height="15.0" fill="rgb(241,217,1)" rx="2" ry="2" />
<text  x="120.99" y="719.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (6 samples, 0.08%)</title><rect x="675.4" y="661" width="1.0" height="15.0" fill="rgb(227,108,11)" rx="2" ry="2" />
<text  x="678.42" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;muduo::net::Channel**, std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="37.5" y="837" width="0.1" height="15.0" fill="rgb(226,19,40)" rx="2" ry="2" />
<text  x="40.48" y="847.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::current (1 samples, 0.01%)</title><rect x="117.0" y="773" width="0.2" height="15.0" fill="rgb(210,141,49)" rx="2" ry="2" />
<text  x="120.02" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1 samples, 0.01%)</title><rect x="680.4" y="645" width="0.2" height="15.0" fill="rgb(221,24,53)" rx="2" ry="2" />
<text  x="683.43" y="655.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.01%)</title><rect x="35.2" y="901" width="0.2" height="15.0" fill="rgb(235,223,10)" rx="2" ry="2" />
<text  x="38.22" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt;::_M_next (1 samples, 0.01%)</title><rect x="106.7" y="501" width="0.1" height="15.0" fill="rgb(223,93,24)" rx="2" ry="2" />
<text  x="109.68" y="511.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="343.7" y="533" width="0.1" height="15.0" fill="rgb(234,19,3)" rx="2" ry="2" />
<text  x="346.68" y="543.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="250.6" y="757" width="0.1" height="15.0" fill="rgb(245,73,33)" rx="2" ry="2" />
<text  x="253.56" y="767.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (7 samples, 0.10%)</title><rect x="412.4" y="85" width="1.1" height="15.0" fill="rgb(242,62,32)" rx="2" ry="2" />
<text  x="415.39" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.8" y="581" width="0.2" height="15.0" fill="rgb(222,162,11)" rx="2" ry="2" />
<text  x="1122.84" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="493.1" y="757" width="0.1" height="15.0" fill="rgb(217,204,2)" rx="2" ry="2" />
<text  x="496.06" y="767.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (31 samples, 0.42%)</title><rect x="271.7" y="981" width="5.0" height="15.0" fill="rgb(217,99,21)" rx="2" ry="2" />
<text  x="274.74" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base (6 samples, 0.08%)</title><rect x="994.9" y="693" width="0.9" height="15.0" fill="rgb(234,59,9)" rx="2" ry="2" />
<text  x="997.87" y="703.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="497.4" y="773" width="0.2" height="15.0" fill="rgb(228,123,34)" rx="2" ry="2" />
<text  x="500.42" y="783.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.01%)</title><rect x="1117.3" y="485" width="0.1" height="15.0" fill="rgb(235,173,22)" rx="2" ry="2" />
<text  x="1120.25" y="495.5" ></text>
</g>
<g >
<title>snprintf@plt (1 samples, 0.01%)</title><rect x="251.4" y="757" width="0.1" height="15.0" fill="rgb(207,79,41)" rx="2" ry="2" />
<text  x="254.37" y="767.5" ></text>
</g>
<g >
<title>tcp_get_metrics (1 samples, 0.01%)</title><rect x="337.2" y="341" width="0.2" height="15.0" fill="rgb(214,13,21)" rx="2" ry="2" />
<text  x="340.21" y="351.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;3ul, std::_Placeholder&lt;3&gt;&gt; (1 samples, 0.01%)</title><rect x="356.9" y="597" width="0.2" height="15.0" fill="rgb(216,128,53)" rx="2" ry="2" />
<text  x="359.94" y="607.5" ></text>
</g>
<g >
<title>redisFormatSdsCommandArgv (2 samples, 0.03%)</title><rect x="651.7" y="997" width="0.3" height="15.0" fill="rgb(244,131,33)" rx="2" ry="2" />
<text  x="654.65" y="1007.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="97.9" y="437" width="0.2" height="15.0" fill="rgb(242,120,1)" rx="2" ry="2" />
<text  x="100.95" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9 samples, 0.12%)</title><rect x="490.1" y="677" width="1.5" height="15.0" fill="rgb(252,130,37)" rx="2" ry="2" />
<text  x="493.15" y="687.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="499.4" y="789" width="0.1" height="15.0" fill="rgb(254,179,1)" rx="2" ry="2" />
<text  x="502.36" y="799.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tid (1 samples, 0.01%)</title><rect x="681.2" y="677" width="0.2" height="15.0" fill="rgb(233,178,50)" rx="2" ry="2" />
<text  x="684.24" y="687.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="621.6" y="981" width="0.3" height="15.0" fill="rgb(225,72,48)" rx="2" ry="2" />
<text  x="624.58" y="991.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="662.3" y="661" width="0.2" height="15.0" fill="rgb(239,52,14)" rx="2" ry="2" />
<text  x="665.32" y="671.5" ></text>
</g>
<g >
<title>ep_send_events_proc (18 samples, 0.25%)</title><rect x="291.8" y="725" width="2.9" height="15.0" fill="rgb(215,73,7)" rx="2" ry="2" />
<text  x="294.78" y="735.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base (1 samples, 0.01%)</title><rect x="97.9" y="485" width="0.2" height="15.0" fill="rgb(240,119,53)" rx="2" ry="2" />
<text  x="100.95" y="495.5" ></text>
</g>
<g >
<title>std::locale::~locale (1 samples, 0.01%)</title><rect x="20.7" y="965" width="0.1" height="15.0" fill="rgb(217,10,39)" rx="2" ry="2" />
<text  x="23.67" y="975.5" ></text>
</g>
<g >
<title>__schedule (7 samples, 0.10%)</title><rect x="1029.5" y="549" width="1.1" height="15.0" fill="rgb(232,114,1)" rx="2" ry="2" />
<text  x="1032.47" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="771.8" y="629" width="0.1" height="15.0" fill="rgb(232,35,13)" rx="2" ry="2" />
<text  x="774.77" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2 samples, 0.03%)</title><rect x="1136.7" y="629" width="0.3" height="15.0" fill="rgb(205,10,53)" rx="2" ry="2" />
<text  x="1139.65" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="94.7" y="453" width="0.2" height="15.0" fill="rgb(216,218,16)" rx="2" ry="2" />
<text  x="97.71" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;muduo::net::EventLoop*, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (16 samples, 0.22%)</title><rect x="102.1" y="565" width="2.6" height="15.0" fill="rgb(248,10,6)" rx="2" ry="2" />
<text  x="105.15" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, void&gt; (2 samples, 0.03%)</title><rect x="98.1" y="517" width="0.3" height="15.0" fill="rgb(215,57,51)" rx="2" ry="2" />
<text  x="101.11" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="1188.2" y="741" width="0.2" height="15.0" fill="rgb(223,56,49)" rx="2" ry="2" />
<text  x="1191.22" y="751.5" ></text>
</g>
<g >
<title>ep_send_events_proc (21 samples, 0.29%)</title><rect x="41.2" y="725" width="3.4" height="15.0" fill="rgb(249,114,25)" rx="2" ry="2" />
<text  x="44.20" y="735.5" ></text>
</g>
<g >
<title>std::move&lt;void  (1 samples, 0.01%)</title><rect x="98.6" y="549" width="0.2" height="15.0" fill="rgb(222,64,39)" rx="2" ry="2" />
<text  x="101.59" y="559.5" ></text>
</g>
<g >
<title>__dynamic_cast (21 samples, 0.29%)</title><rect x="261.7" y="965" width="3.4" height="15.0" fill="rgb(210,142,16)" rx="2" ry="2" />
<text  x="264.71" y="975.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (3 samples, 0.04%)</title><rect x="1186.8" y="645" width="0.5" height="15.0" fill="rgb(228,106,46)" rx="2" ry="2" />
<text  x="1189.77" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (6 samples, 0.08%)</title><rect x="675.4" y="677" width="1.0" height="15.0" fill="rgb(214,22,46)" rx="2" ry="2" />
<text  x="678.42" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="667.7" y="661" width="0.1" height="15.0" fill="rgb(209,47,37)" rx="2" ry="2" />
<text  x="670.66" y="671.5" ></text>
</g>
<g >
<title>rw_copy_check_uvector (3 samples, 0.04%)</title><rect x="86.0" y="549" width="0.5" height="15.0" fill="rgb(221,45,50)" rx="2" ry="2" />
<text  x="88.98" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="1131.5" y="645" width="0.3" height="15.0" fill="rgb(217,38,0)" rx="2" ry="2" />
<text  x="1134.48" y="655.5" ></text>
</g>
<g >
<title>new_sync_read (172 samples, 2.36%)</title><rect x="846.0" y="901" width="27.8" height="15.0" fill="rgb(228,113,8)" rx="2" ry="2" />
<text  x="848.97" y="911.5" >n..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.01%)</title><rect x="1185.2" y="997" width="0.1" height="15.0" fill="rgb(237,124,13)" rx="2" ry="2" />
<text  x="1188.15" y="1007.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (1 samples, 0.01%)</title><rect x="37.6" y="837" width="0.2" height="15.0" fill="rgb(212,135,21)" rx="2" ry="2" />
<text  x="40.64" y="847.5" ></text>
</g>
<g >
<title>ip_local_out (172 samples, 2.36%)</title><rect x="898.7" y="709" width="27.8" height="15.0" fill="rgb(252,105,7)" rx="2" ry="2" />
<text  x="901.68" y="719.5" >i..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="340.8" y="485" width="0.1" height="15.0" fill="rgb(234,135,2)" rx="2" ry="2" />
<text  x="343.77" y="495.5" ></text>
</g>
<g >
<title>__lock_text_start (11 samples, 0.15%)</title><rect x="1025.4" y="501" width="1.8" height="15.0" fill="rgb(234,79,5)" rx="2" ry="2" />
<text  x="1028.42" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="970.8" y="949" width="0.6" height="15.0" fill="rgb(233,220,40)" rx="2" ry="2" />
<text  x="973.78" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="796.5" y="613" width="0.2" height="15.0" fill="rgb(220,169,18)" rx="2" ry="2" />
<text  x="799.51" y="623.5" ></text>
</g>
<g >
<title>ip_rcv (113 samples, 1.55%)</title><rect x="557.9" y="517" width="18.3" height="15.0" fill="rgb(247,129,29)" rx="2" ry="2" />
<text  x="560.89" y="527.5" ></text>
</g>
<g >
<title>tcp_recvmsg (165 samples, 2.26%)</title><rect x="846.8" y="837" width="26.7" height="15.0" fill="rgb(206,160,28)" rx="2" ry="2" />
<text  x="849.78" y="847.5" >t..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::_M_ptr (3 samples, 0.04%)</title><rect x="1131.8" y="677" width="0.5" height="15.0" fill="rgb(241,163,34)" rx="2" ry="2" />
<text  x="1134.80" y="687.5" ></text>
</g>
<g >
<title>__fget_light (6 samples, 0.08%)</title><rect x="327.8" y="565" width="1.0" height="15.0" fill="rgb(228,184,16)" rx="2" ry="2" />
<text  x="330.84" y="575.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::updateChannel (1 samples, 0.01%)</title><rect x="88.1" y="469" width="0.1" height="15.0" fill="rgb(230,219,51)" rx="2" ry="2" />
<text  x="91.08" y="479.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (1 samples, 0.01%)</title><rect x="801.8" y="661" width="0.2" height="15.0" fill="rgb(246,205,29)" rx="2" ry="2" />
<text  x="804.84" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (2 samples, 0.03%)</title><rect x="997.8" y="581" width="0.3" height="15.0" fill="rgb(218,39,44)" rx="2" ry="2" />
<text  x="1000.78" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="487.2" y="613" width="0.2" height="15.0" fill="rgb(242,41,1)" rx="2" ry="2" />
<text  x="490.24" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1012.0" y="645" width="0.2" height="15.0" fill="rgb(243,215,29)" rx="2" ry="2" />
<text  x="1015.01" y="655.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (4 samples, 0.05%)</title><rect x="603.8" y="981" width="0.6" height="15.0" fill="rgb(228,147,14)" rx="2" ry="2" />
<text  x="606.80" y="991.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4 samples, 0.05%)</title><rect x="342.5" y="485" width="0.7" height="15.0" fill="rgb(214,196,22)" rx="2" ry="2" />
<text  x="345.55" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (2 samples, 0.03%)</title><rect x="106.8" y="485" width="0.4" height="15.0" fill="rgb(243,113,0)" rx="2" ry="2" />
<text  x="109.84" y="495.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="498.6" y="741" width="0.1" height="15.0" fill="rgb(229,223,18)" rx="2" ry="2" />
<text  x="501.55" y="751.5" ></text>
</g>
<g >
<title>std::operator&amp; (1 samples, 0.01%)</title><rect x="503.7" y="821" width="0.2" height="15.0" fill="rgb(219,86,46)" rx="2" ry="2" />
<text  x="506.73" y="831.5" ></text>
</g>
<g >
<title>inet_ehashfn (1 samples, 0.01%)</title><rect x="559.7" y="421" width="0.1" height="15.0" fill="rgb(238,76,32)" rx="2" ry="2" />
<text  x="562.66" y="431.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (4 samples, 0.05%)</title><rect x="1121.6" y="677" width="0.7" height="15.0" fill="rgb(209,63,48)" rx="2" ry="2" />
<text  x="1124.62" y="687.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index::type_info (1 samples, 0.01%)</title><rect x="340.1" y="485" width="0.2" height="15.0" fill="rgb(210,16,42)" rx="2" ry="2" />
<text  x="343.12" y="495.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.01%)</title><rect x="896.3" y="757" width="0.1" height="15.0" fill="rgb(221,219,9)" rx="2" ry="2" />
<text  x="899.25" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (30 samples, 0.41%)</title><rect x="784.7" y="677" width="4.9" height="15.0" fill="rgb(244,201,32)" rx="2" ry="2" />
<text  x="787.70" y="687.5" ></text>
</g>
<g >
<title>tcp_chrono_start (4 samples, 0.05%)</title><rect x="552.2" y="773" width="0.7" height="15.0" fill="rgb(206,138,49)" rx="2" ry="2" />
<text  x="555.23" y="783.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (2 samples, 0.03%)</title><rect x="772.9" y="645" width="0.3" height="15.0" fill="rgb(252,155,22)" rx="2" ry="2" />
<text  x="775.90" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="1139.4" y="613" width="0.2" height="15.0" fill="rgb(253,49,19)" rx="2" ry="2" />
<text  x="1142.40" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="28.9" y="965" width="0.2" height="15.0" fill="rgb(242,116,50)" rx="2" ry="2" />
<text  x="31.91" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="490.6" y="565" width="0.2" height="15.0" fill="rgb(226,118,39)" rx="2" ry="2" />
<text  x="493.63" y="575.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.01%)</title><rect x="623.5" y="997" width="0.2" height="15.0" fill="rgb(216,8,54)" rx="2" ry="2" />
<text  x="626.52" y="1007.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="100.4" y="469" width="0.1" height="15.0" fill="rgb(213,222,17)" rx="2" ry="2" />
<text  x="103.37" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1134.2" y="549" width="0.2" height="15.0" fill="rgb(249,143,37)" rx="2" ry="2" />
<text  x="1137.23" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; &gt;::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; const&amp;, true&gt; (1 samples, 0.01%)</title><rect x="98.8" y="549" width="0.1" height="15.0" fill="rgb(253,192,48)" rx="2" ry="2" />
<text  x="101.75" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,198 samples, 16.41%)</title><rect x="991.5" y="869" width="193.7" height="15.0" fill="rgb(242,143,53)" rx="2" ry="2" />
<text  x="994.47" y="879.5" >std::__invoke_impl&lt;void, ..</text>
</g>
<g >
<title>muduo::net::Buffer::begin (1 samples, 0.01%)</title><rect x="1024.1" y="629" width="0.2" height="15.0" fill="rgb(229,113,14)" rx="2" ry="2" />
<text  x="1027.13" y="639.5" ></text>
</g>
<g >
<title>__kfree_skb_flush (1 samples, 0.01%)</title><rect x="406.6" y="277" width="0.1" height="15.0" fill="rgb(218,69,1)" rx="2" ry="2" />
<text  x="409.57" y="287.5" ></text>
</g>
<g >
<title>muduo::net::Socket::accept (1 samples, 0.01%)</title><rect x="1188.1" y="805" width="0.1" height="15.0" fill="rgb(230,185,11)" rx="2" ry="2" />
<text  x="1191.06" y="815.5" ></text>
</g>
<g >
<title>asyncOutput (17 samples, 0.23%)</title><rect x="125.3" y="789" width="2.7" height="15.0" fill="rgb(225,48,17)" rx="2" ry="2" />
<text  x="128.27" y="799.5" ></text>
</g>
<g >
<title>sys_epoll_wait (1 samples, 0.01%)</title><rect x="308.8" y="789" width="0.1" height="15.0" fill="rgb(241,98,14)" rx="2" ry="2" />
<text  x="311.76" y="799.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.01%)</title><rect x="807.2" y="629" width="0.1" height="15.0" fill="rgb(207,125,0)" rx="2" ry="2" />
<text  x="810.17" y="639.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (4 samples, 0.05%)</title><rect x="667.0" y="677" width="0.7" height="15.0" fill="rgb(213,195,40)" rx="2" ry="2" />
<text  x="670.01" y="687.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="992.0" y="661" width="0.1" height="15.0" fill="rgb(226,210,2)" rx="2" ry="2" />
<text  x="994.96" y="671.5" ></text>
</g>
<g >
<title>security_file_permission (4 samples, 0.05%)</title><rect x="1116.4" y="533" width="0.7" height="15.0" fill="rgb(234,146,0)" rx="2" ry="2" />
<text  x="1119.44" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.03%)</title><rect x="385.6" y="677" width="0.3" height="15.0" fill="rgb(211,12,13)" rx="2" ry="2" />
<text  x="388.55" y="687.5" ></text>
</g>
<g >
<title>__sk_free (1 samples, 0.01%)</title><rect x="658.8" y="357" width="0.1" height="15.0" fill="rgb(219,28,38)" rx="2" ry="2" />
<text  x="661.77" y="367.5" ></text>
</g>
<g >
<title>cmpxchg_double_slab.isra.33 (1 samples, 0.01%)</title><rect x="330.3" y="405" width="0.1" height="15.0" fill="rgb(218,192,26)" rx="2" ry="2" />
<text  x="333.26" y="415.5" ></text>
</g>
<g >
<title>muduo::LogStream::~LogStream (2 samples, 0.03%)</title><rect x="803.8" y="677" width="0.3" height="15.0" fill="rgb(234,21,35)" rx="2" ry="2" />
<text  x="806.78" y="687.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.01%)</title><rect x="11.3" y="725" width="0.2" height="15.0" fill="rgb(228,173,43)" rx="2" ry="2" />
<text  x="14.29" y="735.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.01%)</title><rect x="875.1" y="949" width="0.1" height="15.0" fill="rgb(234,74,25)" rx="2" ry="2" />
<text  x="878.07" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="65.8" y="741" width="0.1" height="15.0" fill="rgb(241,120,40)" rx="2" ry="2" />
<text  x="68.77" y="751.5" ></text>
</g>
<g >
<title>_itoa_word (1 samples, 0.01%)</title><rect x="1189.8" y="933" width="0.2" height="15.0" fill="rgb(208,61,6)" rx="2" ry="2" />
<text  x="1192.84" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (17 samples, 0.23%)</title><rect x="1133.3" y="677" width="2.7" height="15.0" fill="rgb(253,108,51)" rx="2" ry="2" />
<text  x="1136.26" y="687.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.01%)</title><rect x="506.2" y="997" width="0.1" height="15.0" fill="rgb(238,100,32)" rx="2" ry="2" />
<text  x="509.15" y="1007.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1146.5" y="645" width="0.3" height="15.0" fill="rgb(235,80,12)" rx="2" ry="2" />
<text  x="1149.51" y="655.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::readFd (70 samples, 0.96%)</title><rect x="325.7" y="677" width="11.4" height="15.0" fill="rgb(240,188,14)" rx="2" ry="2" />
<text  x="328.73" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::end (1 samples, 0.01%)</title><rect x="502.3" y="805" width="0.1" height="15.0" fill="rgb(240,153,10)" rx="2" ry="2" />
<text  x="505.27" y="815.5" ></text>
</g>
<g >
<title>netif_skb_features (1 samples, 0.01%)</title><rect x="926.0" y="597" width="0.2" height="15.0" fill="rgb(232,103,23)" rx="2" ry="2" />
<text  x="929.00" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;StaticServer::Entry&gt;::shared_ptr (2 samples, 0.03%)</title><rect x="355.3" y="549" width="0.3" height="15.0" fill="rgb(229,0,45)" rx="2" ry="2" />
<text  x="358.32" y="559.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (9 samples, 0.12%)</title><rect x="623.7" y="997" width="1.4" height="15.0" fill="rgb(227,115,50)" rx="2" ry="2" />
<text  x="626.68" y="1007.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="349.2" y="389" width="0.1" height="15.0" fill="rgb(225,10,49)" rx="2" ry="2" />
<text  x="352.18" y="399.5" ></text>
</g>
<g >
<title>__netif_receive_skb (131 samples, 1.79%)</title><rect x="901.7" y="549" width="21.2" height="15.0" fill="rgb(213,140,5)" rx="2" ry="2" />
<text  x="904.75" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1 samples, 0.01%)</title><rect x="1158.5" y="629" width="0.1" height="15.0" fill="rgb(240,115,45)" rx="2" ry="2" />
<text  x="1161.48" y="639.5" ></text>
</g>
<g >
<title>Parser::access_request (983 samples, 13.47%)</title><rect x="660.1" y="725" width="158.9" height="15.0" fill="rgb(246,220,37)" rx="2" ry="2" />
<text  x="663.06" y="735.5" >Parser::access_request</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="782.0" y="581" width="0.1" height="15.0" fill="rgb(211,51,31)" rx="2" ry="2" />
<text  x="784.96" y="591.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (4 samples, 0.05%)</title><rect x="367.9" y="773" width="0.7" height="15.0" fill="rgb(212,117,29)" rx="2" ry="2" />
<text  x="370.93" y="783.5" ></text>
</g>
<g >
<title>[libc-2.23.so] (63 samples, 0.86%)</title><rect x="326.1" y="661" width="10.1" height="15.0" fill="rgb(244,199,38)" rx="2" ry="2" />
<text  x="329.06" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="69.0" y="773" width="0.3" height="15.0" fill="rgb(240,10,43)" rx="2" ry="2" />
<text  x="72.01" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1130.3" y="629" width="0.2" height="15.0" fill="rgb(234,16,29)" rx="2" ry="2" />
<text  x="1133.35" y="639.5" ></text>
</g>
<g >
<title>ext4_file_getattr (1 samples, 0.01%)</title><rect x="1176.3" y="613" width="0.1" height="15.0" fill="rgb(237,53,0)" rx="2" ry="2" />
<text  x="1179.26" y="623.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (26 samples, 0.36%)</title><rect x="61.7" y="773" width="4.2" height="15.0" fill="rgb(207,105,34)" rx="2" ry="2" />
<text  x="64.73" y="783.5" ></text>
</g>
<g >
<title>muduo::Condition::notify (1 samples, 0.01%)</title><rect x="340.9" y="565" width="0.2" height="15.0" fill="rgb(235,173,24)" rx="2" ry="2" />
<text  x="343.93" y="575.5" ></text>
</g>
<g >
<title>start_thread (1,372 samples, 18.80%)</title><rect x="37.5" y="997" width="221.8" height="15.0" fill="rgb(227,108,25)" rx="2" ry="2" />
<text  x="40.48" y="1007.5" >start_thread</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (2 samples, 0.03%)</title><rect x="250.9" y="709" width="0.3" height="15.0" fill="rgb(253,9,41)" rx="2" ry="2" />
<text  x="253.88" y="719.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::send (562 samples, 7.70%)</title><rect x="681.1" y="693" width="90.8" height="15.0" fill="rgb(231,51,53)" rx="2" ry="2" />
<text  x="684.08" y="703.5" >muduo::net..</text>
</g>
<g >
<title>inode_permission (5 samples, 0.07%)</title><rect x="1169.6" y="565" width="0.8" height="15.0" fill="rgb(241,13,19)" rx="2" ry="2" />
<text  x="1172.63" y="575.5" ></text>
</g>
<g >
<title>_IO_vsprintf (4 samples, 0.05%)</title><rect x="607.5" y="981" width="0.7" height="15.0" fill="rgb(253,160,36)" rx="2" ry="2" />
<text  x="610.52" y="991.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.01%)</title><rect x="151.3" y="389" width="0.2" height="15.0" fill="rgb(225,176,19)" rx="2" ry="2" />
<text  x="154.30" y="399.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1162.7" y="709" width="0.1" height="15.0" fill="rgb(213,38,31)" rx="2" ry="2" />
<text  x="1165.68" y="719.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="349.0" y="517" width="0.2" height="15.0" fill="rgb(221,99,21)" rx="2" ry="2" />
<text  x="352.01" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;StaticServer::Entry*&gt;::operator (1 samples, 0.01%)</title><rect x="354.7" y="485" width="0.1" height="15.0" fill="rgb(224,136,3)" rx="2" ry="2" />
<text  x="357.67" y="495.5" ></text>
</g>
<g >
<title>__fget (5 samples, 0.07%)</title><rect x="689.6" y="533" width="0.9" height="15.0" fill="rgb(242,102,8)" rx="2" ry="2" />
<text  x="692.64" y="543.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="496.9" y="757" width="0.2" height="15.0" fill="rgb(216,100,42)" rx="2" ry="2" />
<text  x="499.94" y="767.5" ></text>
</g>
<g >
<title>vfs_read (9 samples, 0.12%)</title><rect x="72.6" y="613" width="1.4" height="15.0" fill="rgb(213,146,46)" rx="2" ry="2" />
<text  x="75.56" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (242 samples, 3.32%)</title><rect x="319.8" y="741" width="39.1" height="15.0" fill="rgb(233,90,45)" rx="2" ry="2" />
<text  x="322.75" y="751.5" >std..</text>
</g>
<g >
<title>tcp_send_mss (10 samples, 0.14%)</title><rect x="241.2" y="485" width="1.6" height="15.0" fill="rgb(238,214,14)" rx="2" ry="2" />
<text  x="244.18" y="495.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="374.1" y="805" width="0.1" height="15.0" fill="rgb(218,109,1)" rx="2" ry="2" />
<text  x="377.07" y="815.5" ></text>
</g>
<g >
<title>eventfd_read (4 samples, 0.05%)</title><rect x="323.1" y="581" width="0.7" height="15.0" fill="rgb(205,44,54)" rx="2" ry="2" />
<text  x="326.15" y="591.5" ></text>
</g>
<g >
<title>tcp_check_space (1 samples, 0.01%)</title><rect x="906.1" y="421" width="0.2" height="15.0" fill="rgb(238,157,28)" rx="2" ry="2" />
<text  x="909.11" y="431.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="793.6" y="597" width="0.3" height="15.0" fill="rgb(240,162,47)" rx="2" ry="2" />
<text  x="796.60" y="607.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (3 samples, 0.04%)</title><rect x="153.2" y="485" width="0.5" height="15.0" fill="rgb(205,187,37)" rx="2" ry="2" />
<text  x="156.24" y="495.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="783.9" y="629" width="0.2" height="15.0" fill="rgb(243,4,24)" rx="2" ry="2" />
<text  x="786.90" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="102.1" y="517" width="0.5" height="15.0" fill="rgb(243,51,29)" rx="2" ry="2" />
<text  x="105.15" y="527.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="244.4" y="677" width="0.2" height="15.0" fill="rgb(221,176,10)" rx="2" ry="2" />
<text  x="247.42" y="687.5" ></text>
</g>
<g >
<title>__legitimize_mnt (3 samples, 0.04%)</title><rect x="1168.8" y="549" width="0.5" height="15.0" fill="rgb(254,79,53)" rx="2" ry="2" />
<text  x="1171.82" y="559.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (4 samples, 0.05%)</title><rect x="87.9" y="677" width="0.7" height="15.0" fill="rgb(238,228,26)" rx="2" ry="2" />
<text  x="90.92" y="687.5" ></text>
</g>
<g >
<title>muduo::MutexLock::unlock (1 samples, 0.01%)</title><rect x="341.7" y="533" width="0.2" height="15.0" fill="rgb(218,57,8)" rx="2" ry="2" />
<text  x="344.74" y="543.5" ></text>
</g>
<g >
<title>common_file_perm (3 samples, 0.04%)</title><rect x="929.9" y="853" width="0.5" height="15.0" fill="rgb(209,131,25)" rx="2" ry="2" />
<text  x="932.88" y="863.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;muduo::Timestamp&gt; (2 samples, 0.03%)</title><rect x="112.3" y="725" width="0.4" height="15.0" fill="rgb(235,123,1)" rx="2" ry="2" />
<text  x="115.33" y="735.5" ></text>
</g>
<g >
<title>muduo::net::Channel::reventsToString[abi:cxx11] (1 samples, 0.01%)</title><rect x="115.6" y="821" width="0.1" height="15.0" fill="rgb(223,21,53)" rx="2" ry="2" />
<text  x="118.57" y="831.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="495.0" y="725" width="0.2" height="15.0" fill="rgb(234,179,16)" rx="2" ry="2" />
<text  x="498.00" y="735.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (1 samples, 0.01%)</title><rect x="349.2" y="437" width="0.1" height="15.0" fill="rgb(232,143,13)" rx="2" ry="2" />
<text  x="352.18" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (1 samples, 0.01%)</title><rect x="385.4" y="677" width="0.2" height="15.0" fill="rgb(253,177,33)" rx="2" ry="2" />
<text  x="388.39" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;StaticServer::Entry&gt;::shared_ptr (2 samples, 0.03%)</title><rect x="107.8" y="549" width="0.3" height="15.0" fill="rgb(225,62,32)" rx="2" ry="2" />
<text  x="110.81" y="559.5" ></text>
</g>
<g >
<title>_int_realloc (4 samples, 0.05%)</title><rect x="634.0" y="997" width="0.7" height="15.0" fill="rgb(207,44,24)" rx="2" ry="2" />
<text  x="637.03" y="1007.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.05%)</title><rect x="763.4" y="517" width="0.6" height="15.0" fill="rgb(205,122,31)" rx="2" ry="2" />
<text  x="766.36" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="763.8" y="485" width="0.2" height="15.0" fill="rgb(214,15,10)" rx="2" ry="2" />
<text  x="766.85" y="495.5" ></text>
</g>
<g >
<title>asyncOutput (8 samples, 0.11%)</title><rect x="801.7" y="693" width="1.3" height="15.0" fill="rgb(218,205,51)" rx="2" ry="2" />
<text  x="804.68" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="654.1" y="805" width="0.1" height="15.0" fill="rgb(237,211,18)" rx="2" ry="2" />
<text  x="657.08" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="842.4" y="773" width="0.2" height="15.0" fill="rgb(210,8,50)" rx="2" ry="2" />
<text  x="845.42" y="783.5" ></text>
</g>
<g >
<title>security_file_permission (9 samples, 0.12%)</title><rect x="333.8" y="533" width="1.5" height="15.0" fill="rgb(233,180,12)" rx="2" ry="2" />
<text  x="336.82" y="543.5" ></text>
</g>
<g >
<title>schedule_timeout (138 samples, 1.89%)</title><rect x="850.0" y="789" width="22.3" height="15.0" fill="rgb(220,29,36)" rx="2" ry="2" />
<text  x="853.02" y="799.5" >s..</text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::push_back (2 samples, 0.03%)</title><rect x="133.4" y="789" width="0.3" height="15.0" fill="rgb(250,5,54)" rx="2" ry="2" />
<text  x="136.35" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="349.2" y="405" width="0.1" height="15.0" fill="rgb(230,170,36)" rx="2" ry="2" />
<text  x="352.18" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, StaticServer*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="1184.3" y="741" width="0.2" height="15.0" fill="rgb(209,113,24)" rx="2" ry="2" />
<text  x="1187.34" y="751.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="831.1" y="565" width="0.2" height="15.0" fill="rgb(252,196,40)" rx="2" ry="2" />
<text  x="834.10" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, muduo::net::TcpConnection*, std::_Placeholder&lt;1&gt; &gt; (3 samples, 0.04%)</title><rect x="111.8" y="725" width="0.5" height="15.0" fill="rgb(234,131,22)" rx="2" ry="2" />
<text  x="114.85" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.11%)</title><rect x="885.1" y="981" width="1.3" height="15.0" fill="rgb(240,87,21)" rx="2" ry="2" />
<text  x="888.10" y="991.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 0.01%)</title><rect x="28.8" y="981" width="0.1" height="15.0" fill="rgb(225,23,12)" rx="2" ry="2" />
<text  x="31.75" y="991.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="661.0" y="661" width="0.2" height="15.0" fill="rgb(228,71,33)" rx="2" ry="2" />
<text  x="664.03" y="671.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="850.3" y="741" width="0.2" height="15.0" fill="rgb(229,74,16)" rx="2" ry="2" />
<text  x="853.34" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="361.0" y="773" width="0.1" height="15.0" fill="rgb(233,53,20)" rx="2" ry="2" />
<text  x="363.98" y="783.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (146 samples, 2.00%)</title><rect x="900.1" y="613" width="23.6" height="15.0" fill="rgb(228,71,8)" rx="2" ry="2" />
<text  x="903.13" y="623.5" >d..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="348.7" y="437" width="0.2" height="15.0" fill="rgb(218,78,35)" rx="2" ry="2" />
<text  x="351.69" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="805.9" y="581" width="0.1" height="15.0" fill="rgb(214,84,49)" rx="2" ry="2" />
<text  x="808.88" y="591.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (74 samples, 1.01%)</title><rect x="295.8" y="741" width="12.0" height="15.0" fill="rgb(242,23,20)" rx="2" ry="2" />
<text  x="298.83" y="751.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="633.4" y="933" width="0.1" height="15.0" fill="rgb(233,162,26)" rx="2" ry="2" />
<text  x="636.38" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1 samples, 0.01%)</title><rect x="815.1" y="629" width="0.2" height="15.0" fill="rgb(222,121,35)" rx="2" ry="2" />
<text  x="818.10" y="639.5" ></text>
</g>
<g >
<title>swake_up (1 samples, 0.01%)</title><rect x="1113.9" y="421" width="0.1" height="15.0" fill="rgb(228,220,46)" rx="2" ry="2" />
<text  x="1116.86" y="431.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1005.9" y="645" width="0.1" height="15.0" fill="rgb(229,184,3)" rx="2" ry="2" />
<text  x="1008.86" y="655.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::append (13 samples, 0.18%)</title><rect x="676.5" y="677" width="2.2" height="15.0" fill="rgb(228,20,27)" rx="2" ry="2" />
<text  x="679.55" y="687.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="480.4" y="293" width="0.2" height="15.0" fill="rgb(254,180,51)" rx="2" ry="2" />
<text  x="483.45" y="303.5" ></text>
</g>
<g >
<title>apparmor_inode_getattr (4 samples, 0.05%)</title><rect x="1176.6" y="597" width="0.6" height="15.0" fill="rgb(220,142,45)" rx="2" ry="2" />
<text  x="1179.58" y="607.5" ></text>
</g>
<g >
<title>kmalloc_slab (3 samples, 0.04%)</title><rect x="154.5" y="437" width="0.5" height="15.0" fill="rgb(246,110,16)" rx="2" ry="2" />
<text  x="157.53" y="447.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="318.9" y="757" width="0.2" height="15.0" fill="rgb(254,169,5)" rx="2" ry="2" />
<text  x="321.94" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl (4 samples, 0.05%)</title><rect x="347.4" y="485" width="0.6" height="15.0" fill="rgb(241,36,39)" rx="2" ry="2" />
<text  x="350.40" y="495.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (6 samples, 0.08%)</title><rect x="962.4" y="997" width="0.9" height="15.0" fill="rgb(206,28,33)" rx="2" ry="2" />
<text  x="965.37" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7 samples, 0.10%)</title><rect x="793.1" y="629" width="1.1" height="15.0" fill="rgb(244,74,40)" rx="2" ry="2" />
<text  x="796.11" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump@plt (2 samples, 0.03%)</title><rect x="505.7" y="997" width="0.3" height="15.0" fill="rgb(244,163,22)" rx="2" ry="2" />
<text  x="508.67" y="1007.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="259.9" y="981" width="0.2" height="15.0" fill="rgb(225,65,9)" rx="2" ry="2" />
<text  x="262.94" y="991.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (5 samples, 0.07%)</title><rect x="561.1" y="405" width="0.8" height="15.0" fill="rgb(253,222,44)" rx="2" ry="2" />
<text  x="564.12" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::get (1 samples, 0.01%)</title><rect x="497.3" y="741" width="0.1" height="15.0" fill="rgb(215,0,26)" rx="2" ry="2" />
<text  x="500.26" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="841.8" y="693" width="0.1" height="15.0" fill="rgb(234,181,11)" rx="2" ry="2" />
<text  x="844.77" y="703.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.01%)</title><rect x="28.9" y="885" width="0.2" height="15.0" fill="rgb(240,32,17)" rx="2" ry="2" />
<text  x="31.91" y="895.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index::stl_type_index (1 samples, 0.01%)</title><rect x="340.3" y="501" width="0.1" height="15.0" fill="rgb(242,76,15)" rx="2" ry="2" />
<text  x="343.28" y="511.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (649 samples, 8.89%)</title><rect x="384.4" y="773" width="104.9" height="15.0" fill="rgb(249,78,47)" rx="2" ry="2" />
<text  x="387.42" y="783.5" >std::_Bind&lt;v..</text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::put (21 samples, 0.29%)</title><rect x="92.3" y="565" width="3.4" height="15.0" fill="rgb(242,124,15)" rx="2" ry="2" />
<text  x="95.29" y="575.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.04%)</title><rect x="955.1" y="981" width="0.5" height="15.0" fill="rgb(243,190,31)" rx="2" ry="2" />
<text  x="958.10" y="991.5" ></text>
</g>
<g >
<title>tcp_rcv_established (418 samples, 5.73%)</title><rect x="411.7" y="117" width="67.6" height="15.0" fill="rgb(212,53,51)" rx="2" ry="2" />
<text  x="414.74" y="127.5" >tcp_rcv..</text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; &gt;::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; const&amp;, true&gt; (1 samples, 0.01%)</title><rect x="345.9" y="533" width="0.2" height="15.0" fill="rgb(217,155,54)" rx="2" ry="2" />
<text  x="348.94" y="543.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="508.3" y="917" width="0.1" height="15.0" fill="rgb(224,149,45)" rx="2" ry="2" />
<text  x="511.25" y="927.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="40.9" y="741" width="0.1" height="15.0" fill="rgb(238,36,23)" rx="2" ry="2" />
<text  x="43.88" y="751.5" ></text>
</g>
<g >
<title>skb_release_all (2 samples, 0.03%)</title><rect x="847.4" y="805" width="0.4" height="15.0" fill="rgb(244,98,12)" rx="2" ry="2" />
<text  x="850.43" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1128.9" y="693" width="0.2" height="15.0" fill="rgb(215,141,21)" rx="2" ry="2" />
<text  x="1131.89" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3 samples, 0.04%)</title><rect x="806.7" y="661" width="0.5" height="15.0" fill="rgb(227,32,37)" rx="2" ry="2" />
<text  x="809.69" y="671.5" ></text>
</g>
<g >
<title>__alloc_skb (6 samples, 0.08%)</title><rect x="895.0" y="773" width="0.9" height="15.0" fill="rgb(234,152,28)" rx="2" ry="2" />
<text  x="897.96" y="783.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="110.2" y="613" width="0.2" height="15.0" fill="rgb(217,76,40)" rx="2" ry="2" />
<text  x="113.23" y="623.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::queueInLoop (4 samples, 0.05%)</title><rect x="1186.8" y="661" width="0.6" height="15.0" fill="rgb(250,224,53)" rx="2" ry="2" />
<text  x="1189.77" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::_M_ptr (3 samples, 0.04%)</title><rect x="783.6" y="661" width="0.5" height="15.0" fill="rgb(220,74,7)" rx="2" ry="2" />
<text  x="786.57" y="671.5" ></text>
</g>
<g >
<title>common_file_perm (4 samples, 0.05%)</title><rect x="486.1" y="549" width="0.7" height="15.0" fill="rgb(214,152,18)" rx="2" ry="2" />
<text  x="489.11" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="343.5" y="517" width="0.2" height="15.0" fill="rgb(225,46,0)" rx="2" ry="2" />
<text  x="346.52" y="527.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="355.8" y="565" width="0.2" height="15.0" fill="rgb(214,83,14)" rx="2" ry="2" />
<text  x="358.80" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1121.3" y="645" width="0.2" height="15.0" fill="rgb(229,192,18)" rx="2" ry="2" />
<text  x="1124.29" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;muduo::net::EventLoop*, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (8 samples, 0.11%)</title><rect x="349.8" y="565" width="1.3" height="15.0" fill="rgb(205,78,40)" rx="2" ry="2" />
<text  x="352.82" y="575.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1001.2" y="613" width="0.1" height="15.0" fill="rgb(224,156,11)" rx="2" ry="2" />
<text  x="1004.17" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="1024.9" y="597" width="0.4" height="15.0" fill="rgb(229,134,49)" rx="2" ry="2" />
<text  x="1027.94" y="607.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (5 samples, 0.07%)</title><rect x="92.9" y="549" width="0.8" height="15.0" fill="rgb(239,199,8)" rx="2" ry="2" />
<text  x="95.93" y="559.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.05%)</title><rect x="398.8" y="469" width="0.7" height="15.0" fill="rgb(239,60,10)" rx="2" ry="2" />
<text  x="401.81" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="944.8" y="933" width="0.1" height="15.0" fill="rgb(228,124,22)" rx="2" ry="2" />
<text  x="947.75" y="943.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="253.0" y="757" width="0.1" height="15.0" fill="rgb(217,216,18)" rx="2" ry="2" />
<text  x="255.98" y="767.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (12 samples, 0.16%)</title><rect x="10.6" y="805" width="2.0" height="15.0" fill="rgb(221,113,42)" rx="2" ry="2" />
<text  x="13.65" y="815.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (6 samples, 0.08%)</title><rect x="126.2" y="757" width="1.0" height="15.0" fill="rgb(229,201,14)" rx="2" ry="2" />
<text  x="129.24" y="767.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (5 samples, 0.07%)</title><rect x="1016.5" y="677" width="0.8" height="15.0" fill="rgb(241,60,28)" rx="2" ry="2" />
<text  x="1019.53" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="546.2" y="933" width="0.4" height="15.0" fill="rgb(212,128,51)" rx="2" ry="2" />
<text  x="549.25" y="943.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (1 samples, 0.01%)</title><rect x="10.5" y="789" width="0.1" height="15.0" fill="rgb(244,97,42)" rx="2" ry="2" />
<text  x="13.48" y="799.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="494.2" y="773" width="0.2" height="15.0" fill="rgb(252,12,2)" rx="2" ry="2" />
<text  x="497.19" y="783.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="532.2" y="901" width="0.1" height="15.0" fill="rgb(205,9,21)" rx="2" ry="2" />
<text  x="535.18" y="911.5" ></text>
</g>
<g >
<title>__lock_text_start (54 samples, 0.74%)</title><rect x="912.1" y="341" width="8.7" height="15.0" fill="rgb(218,33,9)" rx="2" ry="2" />
<text  x="915.10" y="351.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (4 samples, 0.05%)</title><rect x="1131.2" y="661" width="0.6" height="15.0" fill="rgb(220,122,30)" rx="2" ry="2" />
<text  x="1134.15" y="671.5" ></text>
</g>
<g >
<title>boost::less_than_comparable&lt;muduo::Timestamp, muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt;, boost::detail::false_t&gt;::less_than_comparable (1 samples, 0.01%)</title><rect x="65.0" y="725" width="0.1" height="15.0" fill="rgb(249,70,47)" rx="2" ry="2" />
<text  x="67.97" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="251.9" y="741" width="0.1" height="15.0" fill="rgb(230,146,31)" rx="2" ry="2" />
<text  x="254.85" y="751.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.03%)</title><rect x="33.6" y="997" width="0.3" height="15.0" fill="rgb(232,68,8)" rx="2" ry="2" />
<text  x="36.60" y="1007.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 0.25%)</title><rect x="599.6" y="981" width="2.9" height="15.0" fill="rgb(217,116,16)" rx="2" ry="2" />
<text  x="602.60" y="991.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (15 samples, 0.21%)</title><rect x="10.2" y="821" width="2.4" height="15.0" fill="rgb(224,53,38)" rx="2" ry="2" />
<text  x="13.16" y="831.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.05%)</title><rect x="346.4" y="533" width="0.7" height="15.0" fill="rgb(213,178,2)" rx="2" ry="2" />
<text  x="349.43" y="543.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="94.7" y="469" width="0.2" height="15.0" fill="rgb(225,88,37)" rx="2" ry="2" />
<text  x="97.71" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="651.2" y="981" width="0.1" height="15.0" fill="rgb(226,65,13)" rx="2" ry="2" />
<text  x="654.17" y="991.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="992.0" y="757" width="0.1" height="15.0" fill="rgb(232,96,54)" rx="2" ry="2" />
<text  x="994.96" y="767.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::isInLoopThread (1 samples, 0.01%)</title><rect x="243.8" y="661" width="0.1" height="15.0" fill="rgb(226,67,48)" rx="2" ry="2" />
<text  x="246.77" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="97.9" y="469" width="0.2" height="15.0" fill="rgb(217,68,54)" rx="2" ry="2" />
<text  x="100.95" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="247.8" y="757" width="0.3" height="15.0" fill="rgb(212,54,10)" rx="2" ry="2" />
<text  x="250.81" y="767.5" ></text>
</g>
<g >
<title>ip_rcv (2 samples, 0.03%)</title><rect x="576.2" y="533" width="0.3" height="15.0" fill="rgb(242,24,28)" rx="2" ry="2" />
<text  x="579.15" y="543.5" ></text>
</g>
<g >
<title>boost::typeindex::operator==&lt;boost::typeindex::stl_type_index, std::type_info&gt; (1 samples, 0.01%)</title><rect x="91.8" y="501" width="0.2" height="15.0" fill="rgb(224,67,31)" rx="2" ry="2" />
<text  x="94.80" y="511.5" ></text>
</g>
<g >
<title>vfprintf (2 samples, 0.03%)</title><rect x="948.5" y="965" width="0.3" height="15.0" fill="rgb(234,115,18)" rx="2" ry="2" />
<text  x="951.47" y="975.5" ></text>
</g>
<g >
<title>aa_file_perm (3 samples, 0.04%)</title><rect x="929.9" y="837" width="0.5" height="15.0" fill="rgb(223,74,18)" rx="2" ry="2" />
<text  x="932.88" y="847.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="779.2" y="693" width="0.2" height="15.0" fill="rgb(234,4,18)" rx="2" ry="2" />
<text  x="782.21" y="703.5" ></text>
</g>
<g >
<title>tcp_setsockopt (1 samples, 0.01%)</title><rect x="385.7" y="485" width="0.2" height="15.0" fill="rgb(217,40,40)" rx="2" ry="2" />
<text  x="388.71" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="94.6" y="517" width="0.3" height="15.0" fill="rgb(243,139,22)" rx="2" ry="2" />
<text  x="97.55" y="527.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="970.8" y="981" width="0.6" height="15.0" fill="rgb(219,1,3)" rx="2" ry="2" />
<text  x="973.78" y="991.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="891.2" y="805" width="0.2" height="15.0" fill="rgb(244,200,35)" rx="2" ry="2" />
<text  x="894.24" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1154.1" y="645" width="0.2" height="15.0" fill="rgb(240,62,10)" rx="2" ry="2" />
<text  x="1157.11" y="655.5" ></text>
</g>
<g >
<title>redisFormatSdsCommandArgv (3 samples, 0.04%)</title><rect x="774.4" y="693" width="0.4" height="15.0" fill="rgb(223,118,45)" rx="2" ry="2" />
<text  x="777.36" y="703.5" ></text>
</g>
<g >
<title>__follow_mount_rcu.isra.27 (5 samples, 0.07%)</title><rect x="1172.2" y="533" width="0.8" height="15.0" fill="rgb(211,89,39)" rx="2" ry="2" />
<text  x="1175.22" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.12%)</title><rect x="804.9" y="645" width="1.5" height="15.0" fill="rgb(214,62,37)" rx="2" ry="2" />
<text  x="807.91" y="655.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="673.5" y="565" width="0.1" height="15.0" fill="rgb(209,21,15)" rx="2" ry="2" />
<text  x="676.48" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (2 samples, 0.03%)</title><rect x="621.6" y="965" width="0.3" height="15.0" fill="rgb(218,158,29)" rx="2" ry="2" />
<text  x="624.58" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="671.9" y="629" width="0.1" height="15.0" fill="rgb(207,107,27)" rx="2" ry="2" />
<text  x="674.86" y="639.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="489.8" y="773" width="1.8" height="15.0" fill="rgb(208,53,7)" rx="2" ry="2" />
<text  x="492.82" y="783.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (2 samples, 0.03%)</title><rect x="137.9" y="629" width="0.3" height="15.0" fill="rgb(240,199,3)" rx="2" ry="2" />
<text  x="140.88" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (5 samples, 0.07%)</title><rect x="767.2" y="581" width="0.9" height="15.0" fill="rgb(252,24,50)" rx="2" ry="2" />
<text  x="770.24" y="591.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="531.0" y="789" width="0.2" height="15.0" fill="rgb(233,11,17)" rx="2" ry="2" />
<text  x="534.05" y="799.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (9 samples, 0.12%)</title><rect x="361.9" y="805" width="1.5" height="15.0" fill="rgb(227,208,8)" rx="2" ry="2" />
<text  x="364.95" y="815.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (4 samples, 0.05%)</title><rect x="1008.9" y="661" width="0.7" height="15.0" fill="rgb(210,40,15)" rx="2" ry="2" />
<text  x="1011.93" y="671.5" ></text>
</g>
<g >
<title>std::move&lt;bool  (1 samples, 0.01%)</title><rect x="772.7" y="645" width="0.2" height="15.0" fill="rgb(236,133,6)" rx="2" ry="2" />
<text  x="775.74" y="655.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (54 samples, 0.74%)</title><rect x="912.1" y="357" width="8.7" height="15.0" fill="rgb(236,131,5)" rx="2" ry="2" />
<text  x="915.10" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="1025.1" y="485" width="0.2" height="15.0" fill="rgb(249,162,16)" rx="2" ry="2" />
<text  x="1028.10" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1022.8" y="549" width="0.2" height="15.0" fill="rgb(227,177,43)" rx="2" ry="2" />
<text  x="1025.84" y="559.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.01%)</title><rect x="239.4" y="437" width="0.2" height="15.0" fill="rgb(243,69,25)" rx="2" ry="2" />
<text  x="242.40" y="447.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1149.6" y="645" width="0.1" height="15.0" fill="rgb(242,46,4)" rx="2" ry="2" />
<text  x="1152.58" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (1 samples, 0.01%)</title><rect x="353.5" y="453" width="0.2" height="15.0" fill="rgb(225,217,18)" rx="2" ry="2" />
<text  x="356.54" y="463.5" ></text>
</g>
<g >
<title>redisFormatSdsCommandArgv (1 samples, 0.01%)</title><rect x="1126.1" y="693" width="0.2" height="15.0" fill="rgb(243,42,13)" rx="2" ry="2" />
<text  x="1129.14" y="703.5" ></text>
</g>
<g >
<title>ktime_get_real_seconds (2 samples, 0.03%)</title><rect x="907.6" y="405" width="0.3" height="15.0" fill="rgb(245,25,12)" rx="2" ry="2" />
<text  x="910.57" y="415.5" ></text>
</g>
<g >
<title>apparmor_inode_getattr (1 samples, 0.01%)</title><rect x="1176.1" y="613" width="0.2" height="15.0" fill="rgb(212,171,29)" rx="2" ry="2" />
<text  x="1179.10" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="995.5" y="581" width="0.3" height="15.0" fill="rgb(218,209,53)" rx="2" ry="2" />
<text  x="998.52" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="605.1" y="933" width="0.2" height="15.0" fill="rgb(228,214,42)" rx="2" ry="2" />
<text  x="608.09" y="943.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.26%)</title><rect x="71.1" y="661" width="3.1" height="15.0" fill="rgb(247,178,39)" rx="2" ry="2" />
<text  x="74.11" y="671.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (1 samples, 0.01%)</title><rect x="510.2" y="837" width="0.2" height="15.0" fill="rgb(247,199,12)" rx="2" ry="2" />
<text  x="513.19" y="847.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="657.1" y="629" width="0.4" height="15.0" fill="rgb(249,133,13)" rx="2" ry="2" />
<text  x="660.15" y="639.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="40.7" y="677" width="0.2" height="15.0" fill="rgb(207,62,35)" rx="2" ry="2" />
<text  x="43.72" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="1188.9" y="773" width="0.3" height="15.0" fill="rgb(231,85,29)" rx="2" ry="2" />
<text  x="1191.87" y="783.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="784.1" y="661" width="0.1" height="15.0" fill="rgb(236,211,44)" rx="2" ry="2" />
<text  x="787.06" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="94.1" y="533" width="0.1" height="15.0" fill="rgb(232,147,14)" rx="2" ry="2" />
<text  x="97.07" y="543.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2 samples, 0.03%)</title><rect x="10.6" y="773" width="0.4" height="15.0" fill="rgb(227,70,44)" rx="2" ry="2" />
<text  x="13.65" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="97.3" y="549" width="1.1" height="15.0" fill="rgb(221,168,19)" rx="2" ry="2" />
<text  x="100.30" y="559.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (3 samples, 0.04%)</title><rect x="88.1" y="517" width="0.5" height="15.0" fill="rgb(209,153,35)" rx="2" ry="2" />
<text  x="91.08" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="488.9" y="741" width="0.1" height="15.0" fill="rgb(209,78,16)" rx="2" ry="2" />
<text  x="491.85" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="309.6" y="805" width="0.1" height="15.0" fill="rgb(222,166,13)" rx="2" ry="2" />
<text  x="312.57" y="815.5" ></text>
</g>
<g >
<title>[libhiredis.so.0.13] (2 samples, 0.03%)</title><rect x="544.8" y="981" width="0.3" height="15.0" fill="rgb(210,177,30)" rx="2" ry="2" />
<text  x="547.79" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="804.7" y="693" width="0.2" height="15.0" fill="rgb(232,141,9)" rx="2" ry="2" />
<text  x="807.75" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="1135.0" y="597" width="0.2" height="15.0" fill="rgb(212,122,45)" rx="2" ry="2" />
<text  x="1138.03" y="607.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="270.6" y="965" width="0.2" height="15.0" fill="rgb(213,118,51)" rx="2" ry="2" />
<text  x="273.61" y="975.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="31.7" y="981" width="0.3" height="15.0" fill="rgb(229,167,26)" rx="2" ry="2" />
<text  x="34.66" y="991.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1158.0" y="709" width="0.2" height="15.0" fill="rgb(243,179,33)" rx="2" ry="2" />
<text  x="1160.99" y="719.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry (1 samples, 0.01%)</title><rect x="22.1" y="965" width="0.2" height="15.0" fill="rgb(234,81,41)" rx="2" ry="2" />
<text  x="25.12" y="975.5" ></text>
</g>
<g >
<title>[libz.so.1.2.8] (72 samples, 0.99%)</title><rect x="533.2" y="997" width="11.6" height="15.0" fill="rgb(215,170,38)" rx="2" ry="2" />
<text  x="536.15" y="1007.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="818.7" y="709" width="0.3" height="15.0" fill="rgb(230,91,20)" rx="2" ry="2" />
<text  x="821.65" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1189.2" y="885" width="0.2" height="15.0" fill="rgb(240,169,42)" rx="2" ry="2" />
<text  x="1192.19" y="895.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="344.5" y="517" width="0.1" height="15.0" fill="rgb(227,107,32)" rx="2" ry="2" />
<text  x="347.49" y="527.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="797.0" y="693" width="0.3" height="15.0" fill="rgb(226,212,17)" rx="2" ry="2" />
<text  x="799.99" y="703.5" ></text>
</g>
<g >
<title>inflate (3 samples, 0.04%)</title><rect x="954.6" y="981" width="0.5" height="15.0" fill="rgb(254,78,1)" rx="2" ry="2" />
<text  x="957.61" y="991.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="253.1" y="725" width="0.2" height="15.0" fill="rgb(211,196,40)" rx="2" ry="2" />
<text  x="256.15" y="735.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (4 samples, 0.05%)</title><rect x="682.9" y="645" width="0.6" height="15.0" fill="rgb(243,179,36)" rx="2" ry="2" />
<text  x="685.85" y="655.5" ></text>
</g>
<g >
<title>kfree (1 samples, 0.01%)</title><rect x="330.4" y="421" width="0.2" height="15.0" fill="rgb(205,85,1)" rx="2" ry="2" />
<text  x="333.42" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.01%)</title><rect x="1129.7" y="693" width="0.2" height="15.0" fill="rgb(232,2,22)" rx="2" ry="2" />
<text  x="1132.70" y="703.5" ></text>
</g>
<g >
<title>ep_poll (113 samples, 1.55%)</title><rect x="290.3" y="757" width="18.3" height="15.0" fill="rgb(220,32,40)" rx="2" ry="2" />
<text  x="293.33" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="318.5" y="757" width="0.1" height="15.0" fill="rgb(238,120,38)" rx="2" ry="2" />
<text  x="321.46" y="767.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.12 (17 samples, 0.23%)</title><rect x="41.7" y="709" width="2.7" height="15.0" fill="rgb(242,175,47)" rx="2" ry="2" />
<text  x="44.69" y="719.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (4 samples, 0.05%)</title><rect x="155.2" y="453" width="0.6" height="15.0" fill="rgb(238,59,14)" rx="2" ry="2" />
<text  x="158.18" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="112.7" y="693" width="0.1" height="15.0" fill="rgb(226,186,19)" rx="2" ry="2" />
<text  x="115.66" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::clear (2 samples, 0.03%)</title><rect x="504.5" y="821" width="0.4" height="15.0" fill="rgb(237,161,6)" rx="2" ry="2" />
<text  x="507.54" y="831.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="517" width="0.2" height="15.0" fill="rgb(252,207,17)" rx="2" ry="2" />
<text  x="772.02" y="527.5" ></text>
</g>
<g >
<title>skb_release_all (1 samples, 0.01%)</title><rect x="911.1" y="373" width="0.2" height="15.0" fill="rgb(238,85,51)" rx="2" ry="2" />
<text  x="914.13" y="383.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::operator (2 samples, 0.03%)</title><rect x="376.5" y="741" width="0.3" height="15.0" fill="rgb(247,120,0)" rx="2" ry="2" />
<text  x="379.50" y="751.5" ></text>
</g>
<g >
<title>__libc_calloc (7 samples, 0.10%)</title><rect x="622.4" y="997" width="1.1" height="15.0" fill="rgb(237,43,2)" rx="2" ry="2" />
<text  x="625.39" y="1007.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (17 samples, 0.23%)</title><rect x="785.2" y="661" width="2.7" height="15.0" fill="rgb(253,223,25)" rx="2" ry="2" />
<text  x="788.19" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 0.14%)</title><rect x="654.6" y="773" width="1.6" height="15.0" fill="rgb(209,33,32)" rx="2" ry="2" />
<text  x="657.56" y="783.5" ></text>
</g>
<g >
<title>vfs_write (2 samples, 0.03%)</title><rect x="88.2" y="277" width="0.4" height="15.0" fill="rgb(213,28,7)" rx="2" ry="2" />
<text  x="91.25" y="287.5" ></text>
</g>
<g >
<title>inflate (73 samples, 1.00%)</title><rect x="974.0" y="997" width="11.8" height="15.0" fill="rgb(227,198,9)" rx="2" ry="2" />
<text  x="977.01" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.01%)</title><rect x="350.8" y="501" width="0.2" height="15.0" fill="rgb(215,101,42)" rx="2" ry="2" />
<text  x="353.79" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (72 samples, 0.99%)</title><rect x="1165.9" y="709" width="11.7" height="15.0" fill="rgb(213,107,40)" rx="2" ry="2" />
<text  x="1168.91" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (19 samples, 0.26%)</title><rect x="245.5" y="805" width="3.1" height="15.0" fill="rgb(222,102,15)" rx="2" ry="2" />
<text  x="248.55" y="815.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="337.1" y="469" width="0.4" height="15.0" fill="rgb(234,7,16)" rx="2" ry="2" />
<text  x="340.05" y="479.5" ></text>
</g>
<g >
<title>apparmor_file_permission (3 samples, 0.04%)</title><rect x="532.3" y="885" width="0.5" height="15.0" fill="rgb(224,202,38)" rx="2" ry="2" />
<text  x="535.34" y="895.5" ></text>
</g>
<g >
<title>std::_Mu&lt;muduo::net::Buffer*, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="842.6" y="789" width="0.1" height="15.0" fill="rgb(216,84,26)" rx="2" ry="2" />
<text  x="845.58" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="103.8" y="469" width="0.1" height="15.0" fill="rgb(213,97,37)" rx="2" ry="2" />
<text  x="106.77" y="479.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (1 samples, 0.01%)</title><rect x="240.7" y="437" width="0.2" height="15.0" fill="rgb(239,109,3)" rx="2" ry="2" />
<text  x="243.70" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="315.1" y="725" width="0.1" height="15.0" fill="rgb(240,215,6)" rx="2" ry="2" />
<text  x="318.06" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="782.1" y="613" width="0.2" height="15.0" fill="rgb(220,184,30)" rx="2" ry="2" />
<text  x="785.12" y="623.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="412.9" y="37" width="0.6" height="15.0" fill="rgb(236,166,53)" rx="2" ry="2" />
<text  x="415.87" y="47.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::EventLoop*&gt; (2 samples, 0.03%)</title><rect x="111.5" y="725" width="0.3" height="15.0" fill="rgb(215,145,0)" rx="2" ry="2" />
<text  x="114.53" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;muduo::net::TcpConnection*,  (3 samples, 0.04%)</title><rect x="658.4" y="629" width="0.5" height="15.0" fill="rgb(236,121,48)" rx="2" ry="2" />
<text  x="661.44" y="639.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (118 samples, 1.62%)</title><rect x="115.7" y="821" width="19.1" height="15.0" fill="rgb(232,168,28)" rx="2" ry="2" />
<text  x="118.73" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="134.8" y="805" width="0.2" height="15.0" fill="rgb(251,4,38)" rx="2" ry="2" />
<text  x="137.81" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7 samples, 0.10%)</title><rect x="1186.8" y="773" width="1.1" height="15.0" fill="rgb(245,10,2)" rx="2" ry="2" />
<text  x="1189.77" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2 samples, 0.03%)</title><rect x="1023.0" y="597" width="0.3" height="15.0" fill="rgb(236,213,33)" rx="2" ry="2" />
<text  x="1026.00" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (645 samples, 8.84%)</title><rect x="384.9" y="757" width="104.3" height="15.0" fill="rgb(248,203,46)" rx="2" ry="2" />
<text  x="387.90" y="767.5" >std::_Bind&lt;v..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (3 samples, 0.04%)</title><rect x="88.1" y="549" width="0.5" height="15.0" fill="rgb(239,162,24)" rx="2" ry="2" />
<text  x="91.08" y="559.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (1 samples, 0.01%)</title><rect x="673.0" y="677" width="0.2" height="15.0" fill="rgb(220,132,27)" rx="2" ry="2" />
<text  x="675.99" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="1131.3" y="645" width="0.2" height="15.0" fill="rgb(245,17,14)" rx="2" ry="2" />
<text  x="1134.32" y="655.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="488.9" y="725" width="0.1" height="15.0" fill="rgb(247,61,19)" rx="2" ry="2" />
<text  x="491.85" y="735.5" ></text>
</g>
<g >
<title>inet_release (1 samples, 0.01%)</title><rect x="247.3" y="309" width="0.2" height="15.0" fill="rgb(243,3,36)" rx="2" ry="2" />
<text  x="250.33" y="319.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, char const*, char*&gt; (8 samples, 0.11%)</title><rect x="677.2" y="645" width="1.3" height="15.0" fill="rgb(216,199,40)" rx="2" ry="2" />
<text  x="680.20" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (2 samples, 0.03%)</title><rect x="88.2" y="421" width="0.4" height="15.0" fill="rgb(218,49,26)" rx="2" ry="2" />
<text  x="91.25" y="431.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1162.5" y="661" width="0.2" height="15.0" fill="rgb(222,207,5)" rx="2" ry="2" />
<text  x="1165.52" y="671.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.03%)</title><rect x="1135.7" y="629" width="0.3" height="15.0" fill="rgb(220,56,27)" rx="2" ry="2" />
<text  x="1138.68" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (646 samples, 8.85%)</title><rect x="139.3" y="661" width="104.5" height="15.0" fill="rgb(238,188,31)" rx="2" ry="2" />
<text  x="142.33" y="671.5" >entry_SYSCAL..</text>
</g>
<g >
<title>std::_Deque_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="95.0" y="517" width="0.2" height="15.0" fill="rgb(218,5,25)" rx="2" ry="2" />
<text  x="98.04" y="527.5" ></text>
</g>
<g >
<title>lock_timer_base (1 samples, 0.01%)</title><rect x="561.3" y="357" width="0.1" height="15.0" fill="rgb(240,91,11)" rx="2" ry="2" />
<text  x="564.28" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4 samples, 0.05%)</title><rect x="817.5" y="677" width="0.7" height="15.0" fill="rgb(227,93,52)" rx="2" ry="2" />
<text  x="820.52" y="687.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (2 samples, 0.03%)</title><rect x="248.9" y="773" width="0.4" height="15.0" fill="rgb(209,8,50)" rx="2" ry="2" />
<text  x="251.94" y="783.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp, true&gt; (2 samples, 0.03%)</title><rect x="357.4" y="613" width="0.3" height="15.0" fill="rgb(240,0,32)" rx="2" ry="2" />
<text  x="360.42" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="369.5" y="773" width="0.2" height="15.0" fill="rgb(233,155,52)" rx="2" ry="2" />
<text  x="372.55" y="783.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.01%)</title><rect x="1157.3" y="709" width="0.2" height="15.0" fill="rgb(205,79,38)" rx="2" ry="2" />
<text  x="1160.34" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="1123.4" y="629" width="0.5" height="15.0" fill="rgb(227,73,3)" rx="2" ry="2" />
<text  x="1126.39" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2 samples, 0.03%)</title><rect x="1179.5" y="725" width="0.3" height="15.0" fill="rgb(210,19,20)" rx="2" ry="2" />
<text  x="1182.49" y="735.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="803.3" y="613" width="0.2" height="15.0" fill="rgb(221,178,40)" rx="2" ry="2" />
<text  x="806.29" y="623.5" ></text>
</g>
<g >
<title>kfree (3 samples, 0.04%)</title><rect x="564.0" y="309" width="0.5" height="15.0" fill="rgb(211,139,22)" rx="2" ry="2" />
<text  x="567.03" y="319.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::writableBytes (1 samples, 0.01%)</title><rect x="336.9" y="661" width="0.2" height="15.0" fill="rgb(242,84,18)" rx="2" ry="2" />
<text  x="339.89" y="671.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="260.9" y="933" width="0.2" height="15.0" fill="rgb(231,127,17)" rx="2" ry="2" />
<text  x="263.91" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="345.6" y="549" width="0.2" height="15.0" fill="rgb(238,20,18)" rx="2" ry="2" />
<text  x="348.62" y="559.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="800.2" y="645" width="0.3" height="15.0" fill="rgb(236,196,54)" rx="2" ry="2" />
<text  x="803.22" y="655.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="672.8" y="677" width="0.2" height="15.0" fill="rgb(225,213,41)" rx="2" ry="2" />
<text  x="675.83" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.01%)</title><rect x="68.7" y="789" width="0.1" height="15.0" fill="rgb(233,22,11)" rx="2" ry="2" />
<text  x="71.68" y="799.5" ></text>
</g>
<g >
<title>tcp_tso_segs (3 samples, 0.04%)</title><rect x="582.5" y="741" width="0.4" height="15.0" fill="rgb(231,160,10)" rx="2" ry="2" />
<text  x="585.46" y="751.5" ></text>
</g>
<g >
<title>security_file_permission (4 samples, 0.05%)</title><rect x="929.7" y="885" width="0.7" height="15.0" fill="rgb(247,116,20)" rx="2" ry="2" />
<text  x="932.72" y="895.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="772.6" y="613" width="0.1" height="15.0" fill="rgb(214,102,46)" rx="2" ry="2" />
<text  x="775.58" y="623.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, muduo::net::Buffer*&amp;&amp;, false&gt;::_Head_base&lt;muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="357.4" y="565" width="0.2" height="15.0" fill="rgb(227,34,30)" rx="2" ry="2" />
<text  x="360.42" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_node_allocator (1 samples, 0.01%)</title><rect x="106.8" y="437" width="0.2" height="15.0" fill="rgb(252,101,0)" rx="2" ry="2" />
<text  x="109.84" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="271.3" y="933" width="0.1" height="15.0" fill="rgb(220,114,37)" rx="2" ry="2" />
<text  x="274.25" y="943.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="764.7" y="533" width="0.1" height="15.0" fill="rgb(227,4,54)" rx="2" ry="2" />
<text  x="767.66" y="543.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="83.7" y="549" width="0.2" height="15.0" fill="rgb(223,12,17)" rx="2" ry="2" />
<text  x="86.72" y="559.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (4 samples, 0.05%)</title><rect x="12.9" y="773" width="0.7" height="15.0" fill="rgb(226,19,29)" rx="2" ry="2" />
<text  x="15.91" y="783.5" ></text>
</g>
<g >
<title>__check_object_size (1 samples, 0.01%)</title><rect x="548.2" y="805" width="0.1" height="15.0" fill="rgb(224,5,48)" rx="2" ry="2" />
<text  x="551.19" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="505.5" y="837" width="0.2" height="15.0" fill="rgb(254,56,18)" rx="2" ry="2" />
<text  x="508.51" y="847.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="101.3" y="517" width="0.2" height="15.0" fill="rgb(250,226,8)" rx="2" ry="2" />
<text  x="104.34" y="527.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (1 samples, 0.01%)</title><rect x="13.1" y="709" width="0.1" height="15.0" fill="rgb(206,102,7)" rx="2" ry="2" />
<text  x="16.07" y="719.5" ></text>
</g>
<g >
<title>StaticServer::onTimer (1 samples, 0.01%)</title><rect x="1188.2" y="677" width="0.2" height="15.0" fill="rgb(212,4,14)" rx="2" ry="2" />
<text  x="1191.22" y="687.5" ></text>
</g>
<g >
<title>muduo::MutexLock::assertLocked (1 samples, 0.01%)</title><rect x="341.9" y="533" width="0.2" height="15.0" fill="rgb(218,223,38)" rx="2" ry="2" />
<text  x="344.90" y="543.5" ></text>
</g>
<g >
<title>sys_write (2 samples, 0.03%)</title><rect x="88.2" y="293" width="0.4" height="15.0" fill="rgb(228,63,50)" rx="2" ry="2" />
<text  x="91.25" y="303.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (4 samples, 0.05%)</title><rect x="114.9" y="773" width="0.7" height="15.0" fill="rgb(206,180,46)" rx="2" ry="2" />
<text  x="117.92" y="783.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (2 samples, 0.03%)</title><rect x="119.4" y="773" width="0.4" height="15.0" fill="rgb(217,207,36)" rx="2" ry="2" />
<text  x="122.45" y="783.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.04%)</title><rect x="93.9" y="549" width="0.5" height="15.0" fill="rgb(248,71,45)" rx="2" ry="2" />
<text  x="96.90" y="559.5" ></text>
</g>
<g >
<title>muduo::net::Channel::fd (1 samples, 0.01%)</title><rect x="70.8" y="693" width="0.1" height="15.0" fill="rgb(211,6,4)" rx="2" ry="2" />
<text  x="73.79" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (2 samples, 0.03%)</title><rect x="92.0" y="485" width="0.3" height="15.0" fill="rgb(220,13,40)" rx="2" ry="2" />
<text  x="94.96" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="1151.2" y="629" width="0.2" height="15.0" fill="rgb(235,226,3)" rx="2" ry="2" />
<text  x="1154.20" y="639.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.01%)</title><rect x="479.3" y="213" width="0.2" height="15.0" fill="rgb(234,176,15)" rx="2" ry="2" />
<text  x="482.32" y="223.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (1 samples, 0.01%)</title><rect x="1021.1" y="693" width="0.1" height="15.0" fill="rgb(210,200,12)" rx="2" ry="2" />
<text  x="1024.06" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::operator (3 samples, 0.04%)</title><rect x="354.0" y="517" width="0.5" height="15.0" fill="rgb(214,83,21)" rx="2" ry="2" />
<text  x="357.03" y="527.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,174 samples, 16.08%)</title><rect x="652.9" y="885" width="189.8" height="15.0" fill="rgb(221,47,27)" rx="2" ry="2" />
<text  x="655.95" y="895.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>sock_write_iter (580 samples, 7.95%)</title><rect x="149.5" y="565" width="93.8" height="15.0" fill="rgb(248,75,3)" rx="2" ry="2" />
<text  x="152.52" y="575.5" >sock_write_..</text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="814.3" y="709" width="0.1" height="15.0" fill="rgb(251,203,41)" rx="2" ry="2" />
<text  x="817.29" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~tuple (8 samples, 0.11%)</title><rect x="490.1" y="645" width="1.3" height="15.0" fill="rgb(209,195,49)" rx="2" ry="2" />
<text  x="493.15" y="655.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="251.9" y="757" width="0.1" height="15.0" fill="rgb(248,40,20)" rx="2" ry="2" />
<text  x="254.85" y="767.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="135.9" y="789" width="0.2" height="15.0" fill="rgb(244,108,22)" rx="2" ry="2" />
<text  x="138.94" y="799.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.01%)</title><rect x="901.4" y="581" width="0.2" height="15.0" fill="rgb(213,6,26)" rx="2" ry="2" />
<text  x="904.43" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (6 samples, 0.08%)</title><rect x="1127.6" y="677" width="1.0" height="15.0" fill="rgb(253,66,39)" rx="2" ry="2" />
<text  x="1130.60" y="687.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt;::push_back (1 samples, 0.01%)</title><rect x="1188.2" y="661" width="0.2" height="15.0" fill="rgb(226,140,27)" rx="2" ry="2" />
<text  x="1191.22" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="843.2" y="949" width="0.2" height="15.0" fill="rgb(219,77,33)" rx="2" ry="2" />
<text  x="846.23" y="959.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (2 samples, 0.03%)</title><rect x="783.7" y="645" width="0.4" height="15.0" fill="rgb(209,160,13)" rx="2" ry="2" />
<text  x="786.73" y="655.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (1 samples, 0.01%)</title><rect x="13.4" y="725" width="0.2" height="15.0" fill="rgb(211,22,38)" rx="2" ry="2" />
<text  x="16.39" y="735.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="496.3" y="757" width="0.3" height="15.0" fill="rgb(223,84,27)" rx="2" ry="2" />
<text  x="499.29" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="676.7" y="645" width="0.2" height="15.0" fill="rgb(218,226,1)" rx="2" ry="2" />
<text  x="679.71" y="655.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (455 samples, 6.23%)</title><rect x="161.0" y="229" width="73.6" height="15.0" fill="rgb(250,48,35)" rx="2" ry="2" />
<text  x="164.00" y="239.5" >__netif_..</text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="283.7" y="997" width="0.2" height="15.0" fill="rgb(226,42,54)" rx="2" ry="2" />
<text  x="286.70" y="1007.5" ></text>
</g>
<g >
<title>inflateInit2_ (2 samples, 0.03%)</title><rect x="1007.0" y="693" width="0.3" height="15.0" fill="rgb(211,100,16)" rx="2" ry="2" />
<text  x="1009.99" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.16%)</title><rect x="1025.3" y="613" width="1.9" height="15.0" fill="rgb(253,8,3)" rx="2" ry="2" />
<text  x="1028.26" y="623.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (2 samples, 0.03%)</title><rect x="311.7" y="821" width="0.3" height="15.0" fill="rgb(234,150,15)" rx="2" ry="2" />
<text  x="314.67" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2 samples, 0.03%)</title><rect x="107.8" y="517" width="0.3" height="15.0" fill="rgb(223,163,48)" rx="2" ry="2" />
<text  x="110.81" y="527.5" ></text>
</g>
<g >
<title>create_empty_buffers (2 samples, 0.03%)</title><rect x="10.2" y="789" width="0.3" height="15.0" fill="rgb(252,108,52)" rx="2" ry="2" />
<text  x="13.16" y="799.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="312.6" y="789" width="0.2" height="15.0" fill="rgb(213,169,34)" rx="2" ry="2" />
<text  x="315.64" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="773.1" y="597" width="0.1" height="15.0" fill="rgb(248,47,21)" rx="2" ry="2" />
<text  x="776.06" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_close (1 samples, 0.01%)</title><rect x="247.3" y="453" width="0.2" height="15.0" fill="rgb(248,172,38)" rx="2" ry="2" />
<text  x="250.33" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (2 samples, 0.03%)</title><rect x="657.1" y="709" width="0.4" height="15.0" fill="rgb(252,170,6)" rx="2" ry="2" />
<text  x="660.15" y="719.5" ></text>
</g>
<g >
<title>eventfd_write (2 samples, 0.03%)</title><rect x="88.2" y="245" width="0.4" height="15.0" fill="rgb(254,19,25)" rx="2" ry="2" />
<text  x="91.25" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1187.9" y="773" width="0.2" height="15.0" fill="rgb(253,189,41)" rx="2" ry="2" />
<text  x="1190.90" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="118.0" y="725" width="0.2" height="15.0" fill="rgb(226,142,42)" rx="2" ry="2" />
<text  x="120.99" y="735.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="1189.8" y="981" width="0.2" height="15.0" fill="rgb(205,185,3)" rx="2" ry="2" />
<text  x="1192.84" y="991.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="360.5" y="741" width="0.3" height="15.0" fill="rgb(254,93,10)" rx="2" ry="2" />
<text  x="363.49" y="751.5" ></text>
</g>
<g >
<title>__fdget_pos (3 samples, 0.04%)</title><rect x="888.2" y="917" width="0.5" height="15.0" fill="rgb(206,207,38)" rx="2" ry="2" />
<text  x="891.17" y="927.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="796.5" y="581" width="0.2" height="15.0" fill="rgb(219,175,33)" rx="2" ry="2" />
<text  x="799.51" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="469" width="0.2" height="15.0" fill="rgb(218,148,8)" rx="2" ry="2" />
<text  x="772.02" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="135.6" y="757" width="0.2" height="15.0" fill="rgb(253,0,37)" rx="2" ry="2" />
<text  x="138.61" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="24.9" y="949" width="0.1" height="15.0" fill="rgb(235,63,22)" rx="2" ry="2" />
<text  x="27.87" y="959.5" ></text>
</g>
<g >
<title>inet_recvmsg (134 samples, 1.84%)</title><rect x="510.2" y="853" width="21.7" height="15.0" fill="rgb(231,91,38)" rx="2" ry="2" />
<text  x="513.19" y="863.5" >i..</text>
</g>
<g >
<title>__inode_permission (2 samples, 0.03%)</title><rect x="1169.3" y="565" width="0.3" height="15.0" fill="rgb(253,118,52)" rx="2" ry="2" />
<text  x="1172.31" y="575.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (9 samples, 0.12%)</title><rect x="122.4" y="757" width="1.4" height="15.0" fill="rgb(232,117,26)" rx="2" ry="2" />
<text  x="125.36" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.21%)</title><rect x="1137.1" y="645" width="2.5" height="15.0" fill="rgb(226,4,44)" rx="2" ry="2" />
<text  x="1140.14" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="805.7" y="581" width="0.2" height="15.0" fill="rgb(210,189,1)" rx="2" ry="2" />
<text  x="808.72" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="359.5" y="725" width="0.2" height="15.0" fill="rgb(253,111,6)" rx="2" ry="2" />
<text  x="362.52" y="735.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (1 samples, 0.01%)</title><rect x="247.3" y="485" width="0.2" height="15.0" fill="rgb(213,91,14)" rx="2" ry="2" />
<text  x="250.33" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (8 samples, 0.11%)</title><rect x="105.4" y="501" width="1.3" height="15.0" fill="rgb(251,221,44)" rx="2" ry="2" />
<text  x="108.38" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="92.1" y="437" width="0.2" height="15.0" fill="rgb(216,148,3)" rx="2" ry="2" />
<text  x="95.13" y="447.5" ></text>
</g>
<g >
<title>vfs_write (244 samples, 3.34%)</title><rect x="546.9" y="917" width="39.4" height="15.0" fill="rgb(224,182,30)" rx="2" ry="2" />
<text  x="549.89" y="927.5" >vfs..</text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="71.9" y="597" width="0.3" height="15.0" fill="rgb(249,222,11)" rx="2" ry="2" />
<text  x="74.92" y="607.5" ></text>
</g>
<g >
<title>tcp_tso_segs (1 samples, 0.01%)</title><rect x="927.9" y="741" width="0.2" height="15.0" fill="rgb(238,88,10)" rx="2" ry="2" />
<text  x="930.94" y="751.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="633.4" y="965" width="0.1" height="15.0" fill="rgb(226,107,23)" rx="2" ry="2" />
<text  x="636.38" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="67.7" y="693" width="0.2" height="15.0" fill="rgb(240,4,27)" rx="2" ry="2" />
<text  x="70.71" y="703.5" ></text>
</g>
<g >
<title>schedule (6 samples, 0.08%)</title><rect x="688.2" y="565" width="1.0" height="15.0" fill="rgb(210,174,41)" rx="2" ry="2" />
<text  x="691.19" y="575.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1011.8" y="613" width="0.2" height="15.0" fill="rgb(233,82,15)" rx="2" ry="2" />
<text  x="1014.84" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1011.0" y="597" width="0.2" height="15.0" fill="rgb(206,203,0)" rx="2" ry="2" />
<text  x="1014.04" y="607.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="496.1" y="773" width="0.5" height="15.0" fill="rgb(211,158,47)" rx="2" ry="2" />
<text  x="499.13" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="944.8" y="965" width="0.1" height="15.0" fill="rgb(227,31,7)" rx="2" ry="2" />
<text  x="947.75" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="92.1" y="453" width="0.2" height="15.0" fill="rgb(224,5,39)" rx="2" ry="2" />
<text  x="95.13" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1179.8" y="725" width="0.2" height="15.0" fill="rgb(205,159,25)" rx="2" ry="2" />
<text  x="1182.82" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (105 samples, 1.44%)</title><rect x="339.6" y="597" width="17.0" height="15.0" fill="rgb(245,76,15)" rx="2" ry="2" />
<text  x="342.64" y="607.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (3 samples, 0.04%)</title><rect x="551.4" y="757" width="0.5" height="15.0" fill="rgb(252,173,9)" rx="2" ry="2" />
<text  x="554.42" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1156.5" y="661" width="0.2" height="15.0" fill="rgb(243,25,43)" rx="2" ry="2" />
<text  x="1159.54" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="772.3" y="645" width="0.1" height="15.0" fill="rgb(233,194,25)" rx="2" ry="2" />
<text  x="775.26" y="655.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.01%)</title><rect x="279.2" y="949" width="0.1" height="15.0" fill="rgb(236,7,30)" rx="2" ry="2" />
<text  x="282.17" y="959.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="682.9" y="549" width="0.1" height="15.0" fill="rgb(235,181,31)" rx="2" ry="2" />
<text  x="685.85" y="559.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="1147.6" y="597" width="0.2" height="15.0" fill="rgb(223,81,2)" rx="2" ry="2" />
<text  x="1150.64" y="607.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="648.7" y="933" width="0.2" height="15.0" fill="rgb(222,26,36)" rx="2" ry="2" />
<text  x="651.74" y="943.5" ></text>
</g>
<g >
<title>free (5 samples, 0.07%)</title><rect x="836.3" y="725" width="0.8" height="15.0" fill="rgb(249,152,20)" rx="2" ry="2" />
<text  x="839.27" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.01%)</title><rect x="96.8" y="565" width="0.2" height="15.0" fill="rgb(223,51,10)" rx="2" ry="2" />
<text  x="99.81" y="575.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="805.7" y="549" width="0.2" height="15.0" fill="rgb(241,131,2)" rx="2" ry="2" />
<text  x="808.72" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (10 samples, 0.14%)</title><rect x="804.9" y="693" width="1.6" height="15.0" fill="rgb(253,43,32)" rx="2" ry="2" />
<text  x="807.91" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="318.0" y="773" width="0.1" height="15.0" fill="rgb(209,211,50)" rx="2" ry="2" />
<text  x="320.97" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1152.2" y="645" width="0.1" height="15.0" fill="rgb(221,119,49)" rx="2" ry="2" />
<text  x="1155.17" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+=@plt (1 samples, 0.01%)</title><rect x="811.1" y="709" width="0.1" height="15.0" fill="rgb(225,163,41)" rx="2" ry="2" />
<text  x="814.05" y="719.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (2 samples, 0.03%)</title><rect x="495.6" y="757" width="0.4" height="15.0" fill="rgb(223,116,17)" rx="2" ry="2" />
<text  x="498.64" y="767.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.01%)</title><rect x="164.9" y="133" width="0.1" height="15.0" fill="rgb(215,181,45)" rx="2" ry="2" />
<text  x="167.88" y="143.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="73.9" y="565" width="0.1" height="15.0" fill="rgb(244,98,37)" rx="2" ry="2" />
<text  x="76.86" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (12 samples, 0.16%)</title><rect x="351.4" y="501" width="2.0" height="15.0" fill="rgb(254,10,31)" rx="2" ry="2" />
<text  x="354.44" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.03%)</title><rect x="1156.7" y="709" width="0.3" height="15.0" fill="rgb(250,55,13)" rx="2" ry="2" />
<text  x="1159.70" y="719.5" ></text>
</g>
<g >
<title>sock_zerocopy_put (1 samples, 0.01%)</title><rect x="397.2" y="501" width="0.2" height="15.0" fill="rgb(222,217,1)" rx="2" ry="2" />
<text  x="400.19" y="511.5" ></text>
</g>
<g >
<title>futex_wake (5 samples, 0.07%)</title><rect x="92.9" y="453" width="0.8" height="15.0" fill="rgb(236,178,54)" rx="2" ry="2" />
<text  x="95.93" y="463.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (1 samples, 0.01%)</title><rect x="1000.2" y="677" width="0.2" height="15.0" fill="rgb(233,198,35)" rx="2" ry="2" />
<text  x="1003.20" y="687.5" ></text>
</g>
<g >
<title>ktime_get_ts64 (1 samples, 0.01%)</title><rect x="295.3" y="741" width="0.2" height="15.0" fill="rgb(236,227,1)" rx="2" ry="2" />
<text  x="298.34" y="751.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.01%)</title><rect x="921.3" y="405" width="0.2" height="15.0" fill="rgb(213,226,42)" rx="2" ry="2" />
<text  x="924.31" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="840.0" y="709" width="0.2" height="15.0" fill="rgb(240,14,7)" rx="2" ry="2" />
<text  x="842.99" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="997.8" y="501" width="0.1" height="15.0" fill="rgb(252,128,18)" rx="2" ry="2" />
<text  x="1000.78" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1161.5" y="549" width="0.2" height="15.0" fill="rgb(213,131,19)" rx="2" ry="2" />
<text  x="1164.55" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="381.2" y="757" width="0.1" height="15.0" fill="rgb(235,42,29)" rx="2" ry="2" />
<text  x="384.19" y="767.5" ></text>
</g>
<g >
<title>sock_poll (5 samples, 0.07%)</title><rect x="293.4" y="693" width="0.8" height="15.0" fill="rgb(235,108,1)" rx="2" ry="2" />
<text  x="296.40" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (2 samples, 0.03%)</title><rect x="657.1" y="597" width="0.4" height="15.0" fill="rgb(242,176,20)" rx="2" ry="2" />
<text  x="660.15" y="607.5" ></text>
</g>
<g >
<title>common_file_perm (2 samples, 0.03%)</title><rect x="874.8" y="869" width="0.3" height="15.0" fill="rgb(223,165,9)" rx="2" ry="2" />
<text  x="877.75" y="879.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::~TcpConnection (1 samples, 0.01%)</title><rect x="247.3" y="517" width="0.2" height="15.0" fill="rgb(230,5,10)" rx="2" ry="2" />
<text  x="250.33" y="527.5" ></text>
</g>
<g >
<title>muduo::LogStream::~LogStream (1 samples, 0.01%)</title><rect x="318.0" y="757" width="0.1" height="15.0" fill="rgb(226,135,45)" rx="2" ry="2" />
<text  x="320.97" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (19 samples, 0.26%)</title><rect x="104.7" y="549" width="3.1" height="15.0" fill="rgb(253,44,51)" rx="2" ry="2" />
<text  x="107.74" y="559.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="113.3" y="741" width="0.3" height="15.0" fill="rgb(240,216,24)" rx="2" ry="2" />
<text  x="116.30" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="338.3" y="629" width="0.2" height="15.0" fill="rgb(211,158,44)" rx="2" ry="2" />
<text  x="341.34" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="782.0" y="597" width="0.1" height="15.0" fill="rgb(237,92,27)" rx="2" ry="2" />
<text  x="784.96" y="607.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (10 samples, 0.14%)</title><rect x="992.4" y="805" width="1.7" height="15.0" fill="rgb(216,103,54)" rx="2" ry="2" />
<text  x="995.44" y="815.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (170 samples, 2.33%)</title><rect x="553.5" y="741" width="27.5" height="15.0" fill="rgb(211,143,26)" rx="2" ry="2" />
<text  x="556.52" y="751.5" >_..</text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (13 samples, 0.18%)</title><rect x="1025.3" y="645" width="2.1" height="15.0" fill="rgb(237,5,40)" rx="2" ry="2" />
<text  x="1028.26" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="491.6" y="773" width="0.3" height="15.0" fill="rgb(248,27,41)" rx="2" ry="2" />
<text  x="494.60" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="497.3" y="693" width="0.1" height="15.0" fill="rgb(239,174,4)" rx="2" ry="2" />
<text  x="500.26" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="105.1" y="501" width="0.3" height="15.0" fill="rgb(213,152,15)" rx="2" ry="2" />
<text  x="108.06" y="511.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="270.8" y="965" width="0.1" height="15.0" fill="rgb(252,221,20)" rx="2" ry="2" />
<text  x="273.77" y="975.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="654.2" y="773" width="0.2" height="15.0" fill="rgb(242,56,30)" rx="2" ry="2" />
<text  x="657.24" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,126 samples, 15.43%)</title><rect x="659.9" y="757" width="182.0" height="15.0" fill="rgb(232,13,13)" rx="2" ry="2" />
<text  x="662.90" y="767.5" >std::__invoke_impl&lt;void..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="806.7" y="629" width="0.2" height="15.0" fill="rgb(218,150,24)" rx="2" ry="2" />
<text  x="809.69" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="806.4" y="661" width="0.1" height="15.0" fill="rgb(232,44,34)" rx="2" ry="2" />
<text  x="809.37" y="671.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2 samples, 0.03%)</title><rect x="21.5" y="949" width="0.3" height="15.0" fill="rgb(251,164,38)" rx="2" ry="2" />
<text  x="24.48" y="959.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (3 samples, 0.04%)</title><rect x="678.8" y="693" width="0.5" height="15.0" fill="rgb(221,227,37)" rx="2" ry="2" />
<text  x="681.81" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::EventLoop*&amp;&gt; (1 samples, 0.01%)</title><rect x="111.4" y="725" width="0.1" height="15.0" fill="rgb(249,56,48)" rx="2" ry="2" />
<text  x="114.36" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="68.2" y="709" width="0.2" height="15.0" fill="rgb(253,125,23)" rx="2" ry="2" />
<text  x="71.20" y="719.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::isFull (1 samples, 0.01%)</title><rect x="93.7" y="549" width="0.2" height="15.0" fill="rgb(226,180,52)" rx="2" ry="2" />
<text  x="96.74" y="559.5" ></text>
</g>
<g >
<title>__tcp_select_window (1 samples, 0.01%)</title><rect x="157.9" y="421" width="0.2" height="15.0" fill="rgb(227,31,43)" rx="2" ry="2" />
<text  x="160.92" y="431.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;::operator= (1 samples, 0.01%)</title><rect x="1188.2" y="613" width="0.2" height="15.0" fill="rgb(236,165,36)" rx="2" ry="2" />
<text  x="1191.22" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="489.5" y="757" width="0.2" height="15.0" fill="rgb(231,0,28)" rx="2" ry="2" />
<text  x="492.50" y="767.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.01%)</title><rect x="893.3" y="789" width="0.2" height="15.0" fill="rgb(222,110,51)" rx="2" ry="2" />
<text  x="896.34" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="1136.7" y="645" width="0.3" height="15.0" fill="rgb(234,153,18)" rx="2" ry="2" />
<text  x="1139.65" y="655.5" ></text>
</g>
<g >
<title>process_backlog (1 samples, 0.01%)</title><rect x="82.6" y="245" width="0.1" height="15.0" fill="rgb(207,209,5)" rx="2" ry="2" />
<text  x="85.59" y="255.5" ></text>
</g>
<g >
<title>vfprintf (11 samples, 0.15%)</title><rect x="946.7" y="965" width="1.8" height="15.0" fill="rgb(251,110,33)" rx="2" ry="2" />
<text  x="949.69" y="975.5" ></text>
</g>
<g >
<title>eventfd_poll (2 samples, 0.03%)</title><rect x="294.4" y="709" width="0.3" height="15.0" fill="rgb(206,88,38)" rx="2" ry="2" />
<text  x="297.37" y="719.5" ></text>
</g>
<g >
<title>apparmor_file_permission (4 samples, 0.05%)</title><rect x="929.7" y="869" width="0.7" height="15.0" fill="rgb(249,197,21)" rx="2" ry="2" />
<text  x="932.72" y="879.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (4 samples, 0.05%)</title><rect x="371.3" y="741" width="0.7" height="15.0" fill="rgb(206,164,8)" rx="2" ry="2" />
<text  x="374.32" y="751.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (2 samples, 0.03%)</title><rect x="12.9" y="741" width="0.3" height="15.0" fill="rgb(243,79,14)" rx="2" ry="2" />
<text  x="15.91" y="751.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="331.1" y="453" width="0.3" height="15.0" fill="rgb(239,226,42)" rx="2" ry="2" />
<text  x="334.07" y="463.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::hasWritten (1 samples, 0.01%)</title><rect x="678.7" y="677" width="0.1" height="15.0" fill="rgb(238,12,11)" rx="2" ry="2" />
<text  x="681.65" y="687.5" ></text>
</g>
<g >
<title>free (6 samples, 0.08%)</title><rect x="1177.7" y="725" width="1.0" height="15.0" fill="rgb(210,140,2)" rx="2" ry="2" />
<text  x="1180.71" y="735.5" ></text>
</g>
<g >
<title>tcp_v4_md5_lookup (1 samples, 0.01%)</title><rect x="583.9" y="757" width="0.2" height="15.0" fill="rgb(249,37,8)" rx="2" ry="2" />
<text  x="586.91" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (2 samples, 0.03%)</title><rect x="1001.0" y="645" width="0.3" height="15.0" fill="rgb(222,26,43)" rx="2" ry="2" />
<text  x="1004.01" y="655.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="805.7" y="533" width="0.2" height="15.0" fill="rgb(205,68,53)" rx="2" ry="2" />
<text  x="808.72" y="543.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.01%)</title><rect x="1113.9" y="453" width="0.1" height="15.0" fill="rgb(220,197,23)" rx="2" ry="2" />
<text  x="1116.86" y="463.5" ></text>
</g>
<g >
<title>__fget (3 samples, 0.04%)</title><rect x="888.2" y="885" width="0.5" height="15.0" fill="rgb(233,157,48)" rx="2" ry="2" />
<text  x="891.17" y="895.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.01%)</title><rect x="899.2" y="677" width="0.1" height="15.0" fill="rgb(238,207,18)" rx="2" ry="2" />
<text  x="902.16" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7 samples, 0.10%)</title><rect x="1151.0" y="661" width="1.2" height="15.0" fill="rgb(242,114,0)" rx="2" ry="2" />
<text  x="1154.04" y="671.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::newConnection (7 samples, 0.10%)</title><rect x="1186.8" y="693" width="1.1" height="15.0" fill="rgb(221,7,14)" rx="2" ry="2" />
<text  x="1189.77" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (18 samples, 0.25%)</title><rect x="791.5" y="661" width="2.9" height="15.0" fill="rgb(209,112,54)" rx="2" ry="2" />
<text  x="794.49" y="671.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="814.0" y="693" width="0.3" height="15.0" fill="rgb(213,31,36)" rx="2" ry="2" />
<text  x="816.96" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="681.7" y="597" width="0.2" height="15.0" fill="rgb(206,223,22)" rx="2" ry="2" />
<text  x="684.72" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (1 samples, 0.01%)</title><rect x="661.5" y="645" width="0.2" height="15.0" fill="rgb(248,4,26)" rx="2" ry="2" />
<text  x="664.51" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.01%)</title><rect x="344.6" y="517" width="0.2" height="15.0" fill="rgb(252,49,54)" rx="2" ry="2" />
<text  x="347.65" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10 samples, 0.14%)</title><rect x="1153.9" y="693" width="1.7" height="15.0" fill="rgb(229,115,31)" rx="2" ry="2" />
<text  x="1156.95" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (5 samples, 0.07%)</title><rect x="778.1" y="693" width="0.8" height="15.0" fill="rgb(222,139,29)" rx="2" ry="2" />
<text  x="781.08" y="703.5" ></text>
</g>
<g >
<title>[libz.so.1.2.8] (82 samples, 1.12%)</title><rect x="586.3" y="981" width="13.3" height="15.0" fill="rgb(217,75,13)" rx="2" ry="2" />
<text  x="589.34" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1153.8" y="709" width="0.1" height="15.0" fill="rgb(209,224,43)" rx="2" ry="2" />
<text  x="1156.79" y="719.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (4 samples, 0.05%)</title><rect x="317.3" y="773" width="0.7" height="15.0" fill="rgb(232,221,29)" rx="2" ry="2" />
<text  x="320.33" y="783.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="1144.6" y="677" width="0.1" height="15.0" fill="rgb(223,172,3)" rx="2" ry="2" />
<text  x="1147.57" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="69.5" y="677" width="0.2" height="15.0" fill="rgb(253,175,7)" rx="2" ry="2" />
<text  x="72.49" y="687.5" ></text>
</g>
<g >
<title>get_futex_key (1 samples, 0.01%)</title><rect x="276.7" y="885" width="0.2" height="15.0" fill="rgb(210,96,13)" rx="2" ry="2" />
<text  x="279.75" y="895.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,354 samples, 18.55%)</title><rect x="286.8" y="949" width="218.9" height="15.0" fill="rgb(212,147,38)" rx="2" ry="2" />
<text  x="289.77" y="959.5" >std::function&lt;void </text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1 samples, 0.01%)</title><rect x="943.5" y="965" width="0.1" height="15.0" fill="rgb(236,67,50)" rx="2" ry="2" />
<text  x="946.46" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5 samples, 0.07%)</title><rect x="1161.2" y="645" width="0.8" height="15.0" fill="rgb(211,91,25)" rx="2" ry="2" />
<text  x="1164.22" y="655.5" ></text>
</g>
<g >
<title>sys_read (13 samples, 0.18%)</title><rect x="71.9" y="629" width="2.1" height="15.0" fill="rgb(246,194,26)" rx="2" ry="2" />
<text  x="74.92" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::begin@plt (1 samples, 0.01%)</title><rect x="1180.6" y="725" width="0.2" height="15.0" fill="rgb(214,17,5)" rx="2" ry="2" />
<text  x="1183.62" y="735.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::hasWritten (2 samples, 0.03%)</title><rect x="676.9" y="661" width="0.3" height="15.0" fill="rgb(213,153,35)" rx="2" ry="2" />
<text  x="679.87" y="671.5" ></text>
</g>
<g >
<title>lock_timer_base (1 samples, 0.01%)</title><rect x="907.2" y="341" width="0.2" height="15.0" fill="rgb(228,81,0)" rx="2" ry="2" />
<text  x="910.25" y="351.5" ></text>
</g>
<g >
<title>sock_recvmsg (27 samples, 0.37%)</title><rect x="329.5" y="517" width="4.3" height="15.0" fill="rgb(231,66,25)" rx="2" ry="2" />
<text  x="332.45" y="527.5" ></text>
</g>
<g >
<title>rw_verify_area (9 samples, 0.12%)</title><rect x="584.9" y="901" width="1.4" height="15.0" fill="rgb(206,120,43)" rx="2" ry="2" />
<text  x="587.88" y="911.5" ></text>
</g>
<g >
<title>eth_type_trans (1 samples, 0.01%)</title><rect x="236.0" y="293" width="0.2" height="15.0" fill="rgb(221,202,15)" rx="2" ry="2" />
<text  x="239.01" y="303.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.01%)</title><rect x="330.3" y="309" width="0.1" height="15.0" fill="rgb(227,205,45)" rx="2" ry="2" />
<text  x="333.26" y="319.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (126 samples, 1.73%)</title><rect x="90.0" y="645" width="20.4" height="15.0" fill="rgb(218,173,4)" rx="2" ry="2" />
<text  x="93.02" y="655.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2 samples, 0.03%)</title><rect x="793.6" y="581" width="0.3" height="15.0" fill="rgb(211,37,0)" rx="2" ry="2" />
<text  x="796.60" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, true&gt; (4 samples, 0.05%)</title><rect x="97.8" y="533" width="0.6" height="15.0" fill="rgb(250,141,29)" rx="2" ry="2" />
<text  x="100.78" y="543.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="315.2" y="757" width="0.3" height="15.0" fill="rgb(211,71,49)" rx="2" ry="2" />
<text  x="318.23" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="134.8" y="757" width="0.2" height="15.0" fill="rgb(245,211,20)" rx="2" ry="2" />
<text  x="137.81" y="767.5" ></text>
</g>
<g >
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.01%)</title><rect x="165.2" y="117" width="0.2" height="15.0" fill="rgb(232,209,23)" rx="2" ry="2" />
<text  x="168.20" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (121 samples, 1.66%)</title><rect x="39.4" y="789" width="19.6" height="15.0" fill="rgb(228,209,18)" rx="2" ry="2" />
<text  x="42.42" y="799.5" ></text>
</g>
<g >
<title>kmalloc_slab (1 samples, 0.01%)</title><rect x="400.4" y="437" width="0.2" height="15.0" fill="rgb(218,113,52)" rx="2" ry="2" />
<text  x="403.42" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="783.1" y="645" width="0.1" height="15.0" fill="rgb(223,50,52)" rx="2" ry="2" />
<text  x="786.09" y="655.5" ></text>
</g>
<g >
<title>vfs_readv (43 samples, 0.59%)</title><rect x="329.1" y="581" width="7.0" height="15.0" fill="rgb(242,162,13)" rx="2" ry="2" />
<text  x="332.13" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.2" y="581" width="0.1" height="15.0" fill="rgb(239,153,4)" rx="2" ry="2" />
<text  x="93.19" y="591.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="819.0" y="693" width="0.1" height="15.0" fill="rgb(216,184,43)" rx="2" ry="2" />
<text  x="821.98" y="703.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.01%)</title><rect x="780.5" y="613" width="0.2" height="15.0" fill="rgb(220,202,39)" rx="2" ry="2" />
<text  x="783.50" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.01%)</title><rect x="1161.9" y="581" width="0.1" height="15.0" fill="rgb(225,11,34)" rx="2" ry="2" />
<text  x="1164.87" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (1 samples, 0.01%)</title><rect x="665.7" y="677" width="0.2" height="15.0" fill="rgb(236,128,7)" rx="2" ry="2" />
<text  x="668.72" y="687.5" ></text>
</g>
<g >
<title>__check_object_size (1 samples, 0.01%)</title><rect x="335.8" y="533" width="0.1" height="15.0" fill="rgb(237,97,10)" rx="2" ry="2" />
<text  x="338.76" y="543.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="95.2" y="453" width="0.2" height="15.0" fill="rgb(248,40,37)" rx="2" ry="2" />
<text  x="98.20" y="463.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="658.4" y="581" width="0.2" height="15.0" fill="rgb(220,40,48)" rx="2" ry="2" />
<text  x="661.44" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1152.2" y="613" width="0.1" height="15.0" fill="rgb(206,172,3)" rx="2" ry="2" />
<text  x="1155.17" y="623.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.01%)</title><rect x="122.7" y="725" width="0.1" height="15.0" fill="rgb(212,140,43)" rx="2" ry="2" />
<text  x="125.68" y="735.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="763.2" y="469" width="0.2" height="15.0" fill="rgb(213,35,35)" rx="2" ry="2" />
<text  x="766.20" y="479.5" ></text>
</g>
<g >
<title>tcp_sendmsg (548 samples, 7.51%)</title><rect x="396.4" y="517" width="88.6" height="15.0" fill="rgb(224,117,26)" rx="2" ry="2" />
<text  x="399.38" y="527.5" >tcp_sendmsg</text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="359.4" y="741" width="0.1" height="15.0" fill="rgb(227,107,49)" rx="2" ry="2" />
<text  x="362.36" y="751.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAsString[abi:cxx11] (1 samples, 0.01%)</title><rect x="1148.9" y="693" width="0.2" height="15.0" fill="rgb(226,205,6)" rx="2" ry="2" />
<text  x="1151.94" y="703.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1158.6" y="629" width="0.2" height="15.0" fill="rgb(215,150,14)" rx="2" ry="2" />
<text  x="1161.64" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1187.6" y="661" width="0.1" height="15.0" fill="rgb(214,37,38)" rx="2" ry="2" />
<text  x="1190.58" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1121.9" y="613" width="0.2" height="15.0" fill="rgb(247,124,36)" rx="2" ry="2" />
<text  x="1124.94" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (6 samples, 0.08%)</title><rect x="994.9" y="677" width="0.9" height="15.0" fill="rgb(241,97,36)" rx="2" ry="2" />
<text  x="997.87" y="687.5" ></text>
</g>
<g >
<title>tcp_rearm_rto.part.60 (1 samples, 0.01%)</title><rect x="927.5" y="709" width="0.1" height="15.0" fill="rgb(222,49,2)" rx="2" ry="2" />
<text  x="930.45" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="838.2" y="725" width="0.2" height="15.0" fill="rgb(235,98,14)" rx="2" ry="2" />
<text  x="841.21" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="95.2" y="501" width="0.2" height="15.0" fill="rgb(235,109,24)" rx="2" ry="2" />
<text  x="98.20" y="511.5" ></text>
</g>
<g >
<title>__legitimize_mnt (6 samples, 0.08%)</title><rect x="823.7" y="549" width="0.9" height="15.0" fill="rgb(224,138,0)" rx="2" ry="2" />
<text  x="826.66" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="108.9" y="565" width="0.2" height="15.0" fill="rgb(235,179,40)" rx="2" ry="2" />
<text  x="111.94" y="575.5" ></text>
</g>
<g >
<title>tcp_poll (3 samples, 0.04%)</title><rect x="43.9" y="693" width="0.5" height="15.0" fill="rgb(214,39,4)" rx="2" ry="2" />
<text  x="46.95" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="676.1" y="629" width="0.1" height="15.0" fill="rgb(231,189,16)" rx="2" ry="2" />
<text  x="679.06" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,174 samples, 16.08%)</title><rect x="652.9" y="933" width="189.8" height="15.0" fill="rgb(211,165,46)" rx="2" ry="2" />
<text  x="655.95" y="943.5" >std::_Function_handler&lt;v..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="619.8" y="949" width="0.2" height="15.0" fill="rgb(214,209,18)" rx="2" ry="2" />
<text  x="622.80" y="959.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="102.0" y="533" width="0.1" height="15.0" fill="rgb(207,84,36)" rx="2" ry="2" />
<text  x="104.99" y="543.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="789.9" y="661" width="0.1" height="15.0" fill="rgb(209,34,49)" rx="2" ry="2" />
<text  x="792.88" y="671.5" ></text>
</g>
<g >
<title>eth_type_trans (1 samples, 0.01%)</title><rect x="236.3" y="277" width="0.2" height="15.0" fill="rgb(213,94,20)" rx="2" ry="2" />
<text  x="239.33" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;muduo::net::Channel**, std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="309.9" y="821" width="0.2" height="15.0" fill="rgb(235,177,8)" rx="2" ry="2" />
<text  x="312.89" y="831.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="84.2" y="533" width="0.2" height="15.0" fill="rgb(246,66,19)" rx="2" ry="2" />
<text  x="87.20" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.08%)</title><rect x="1159.8" y="693" width="0.9" height="15.0" fill="rgb(205,61,2)" rx="2" ry="2" />
<text  x="1162.77" y="703.5" ></text>
</g>
<g >
<title>ipv4_mtu (1 samples, 0.01%)</title><rect x="241.3" y="469" width="0.2" height="15.0" fill="rgb(230,172,9)" rx="2" ry="2" />
<text  x="244.34" y="479.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (1 samples, 0.01%)</title><rect x="582.0" y="741" width="0.1" height="15.0" fill="rgb(241,161,48)" rx="2" ry="2" />
<text  x="584.97" y="751.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="65.1" y="725" width="0.4" height="15.0" fill="rgb(250,191,32)" rx="2" ry="2" />
<text  x="68.13" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (2 samples, 0.03%)</title><rect x="106.0" y="437" width="0.4" height="15.0" fill="rgb(234,9,18)" rx="2" ry="2" />
<text  x="109.03" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="821.4" y="677" width="0.2" height="15.0" fill="rgb(232,0,44)" rx="2" ry="2" />
<text  x="824.40" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_M_begin (1 samples, 0.01%)</title><rect x="130.6" y="773" width="0.2" height="15.0" fill="rgb(222,183,42)" rx="2" ry="2" />
<text  x="133.60" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (8 samples, 0.11%)</title><rect x="781.0" y="693" width="1.3" height="15.0" fill="rgb(219,64,18)" rx="2" ry="2" />
<text  x="783.99" y="703.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="1189.5" y="901" width="0.2" height="15.0" fill="rgb(226,69,24)" rx="2" ry="2" />
<text  x="1192.52" y="911.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (443 samples, 6.07%)</title><rect x="162.8" y="149" width="71.6" height="15.0" fill="rgb(227,210,4)" rx="2" ry="2" />
<text  x="165.77" y="159.5" >tcp_v4_rcv</text>
</g>
<g >
<title>[unknown] (29 samples, 0.40%)</title><rect x="10.0" y="997" width="4.7" height="15.0" fill="rgb(215,197,11)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="787.8" y="581" width="0.1" height="15.0" fill="rgb(235,6,10)" rx="2" ry="2" />
<text  x="790.78" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="1151.7" y="597" width="0.1" height="15.0" fill="rgb(228,107,46)" rx="2" ry="2" />
<text  x="1154.69" y="607.5" ></text>
</g>
<g >
<title>std::find&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="1130.2" y="693" width="0.3" height="15.0" fill="rgb(223,77,2)" rx="2" ry="2" />
<text  x="1133.18" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="32.5" y="917" width="0.1" height="15.0" fill="rgb(228,214,17)" rx="2" ry="2" />
<text  x="35.47" y="927.5" ></text>
</g>
<g >
<title>__check_object_size (2 samples, 0.03%)</title><rect x="872.3" y="805" width="0.3" height="15.0" fill="rgb(214,163,46)" rx="2" ry="2" />
<text  x="875.33" y="815.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::connectEstablished (3 samples, 0.04%)</title><rect x="137.7" y="709" width="0.5" height="15.0" fill="rgb(223,193,52)" rx="2" ry="2" />
<text  x="140.72" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (2 samples, 0.03%)</title><rect x="1155.2" y="661" width="0.4" height="15.0" fill="rgb(239,21,22)" rx="2" ry="2" />
<text  x="1158.24" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="362.1" y="741" width="0.2" height="15.0" fill="rgb(219,192,10)" rx="2" ry="2" />
<text  x="365.11" y="751.5" ></text>
</g>
<g >
<title>mntput_no_expire (1 samples, 0.01%)</title><rect x="1167.9" y="613" width="0.1" height="15.0" fill="rgb(230,189,32)" rx="2" ry="2" />
<text  x="1170.85" y="623.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tid (1 samples, 0.01%)</title><rect x="365.3" y="773" width="0.2" height="15.0" fill="rgb(244,38,14)" rx="2" ry="2" />
<text  x="368.34" y="783.5" ></text>
</g>
<g >
<title>tcp_push (509 samples, 6.97%)</title><rect x="401.9" y="485" width="82.3" height="15.0" fill="rgb(253,181,0)" rx="2" ry="2" />
<text  x="404.88" y="495.5" >tcp_push</text>
</g>
<g >
<title>sock_close (1 samples, 0.01%)</title><rect x="247.3" y="341" width="0.2" height="15.0" fill="rgb(216,150,32)" rx="2" ry="2" />
<text  x="250.33" y="351.5" ></text>
</g>
<g >
<title>select_estimate_accuracy (1 samples, 0.01%)</title><rect x="58.7" y="757" width="0.1" height="15.0" fill="rgb(234,158,25)" rx="2" ry="2" />
<text  x="61.66" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (6 samples, 0.08%)</title><rect x="953.3" y="949" width="1.0" height="15.0" fill="rgb(210,227,1)" rx="2" ry="2" />
<text  x="956.32" y="959.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="135.6" y="773" width="0.2" height="15.0" fill="rgb(234,139,11)" rx="2" ry="2" />
<text  x="138.61" y="783.5" ></text>
</g>
<g >
<title>_copy_to_iter (1 samples, 0.01%)</title><rect x="531.0" y="805" width="0.2" height="15.0" fill="rgb(215,65,24)" rx="2" ry="2" />
<text  x="534.05" y="815.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, void&gt; (1 samples, 0.01%)</title><rect x="346.1" y="517" width="0.2" height="15.0" fill="rgb(210,75,36)" rx="2" ry="2" />
<text  x="349.10" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1015.1" y="613" width="0.1" height="15.0" fill="rgb(231,79,6)" rx="2" ry="2" />
<text  x="1018.08" y="623.5" ></text>
</g>
<g >
<title>netif_rx (5 samples, 0.07%)</title><rect x="480.8" y="277" width="0.8" height="15.0" fill="rgb(246,213,54)" rx="2" ry="2" />
<text  x="483.77" y="287.5" ></text>
</g>
<g >
<title>sys_write (535 samples, 7.33%)</title><rect x="1030.6" y="581" width="86.5" height="15.0" fill="rgb(219,130,40)" rx="2" ry="2" />
<text  x="1033.60" y="591.5" >sys_write</text>
</g>
<g >
<title>ip_queue_xmit (482 samples, 6.60%)</title><rect x="404.1" y="421" width="78.0" height="15.0" fill="rgb(238,161,28)" rx="2" ry="2" />
<text  x="407.14" y="431.5" >ip_queue_..</text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp, true&gt; (2 samples, 0.03%)</title><rect x="109.9" y="613" width="0.3" height="15.0" fill="rgb(228,32,49)" rx="2" ry="2" />
<text  x="112.91" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1123.7" y="533" width="0.2" height="15.0" fill="rgb(254,203,25)" rx="2" ry="2" />
<text  x="1126.72" y="543.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::take (24 samples, 0.33%)</title><rect x="654.2" y="837" width="3.9" height="15.0" fill="rgb(250,123,23)" rx="2" ry="2" />
<text  x="657.24" y="847.5" ></text>
</g>
<g >
<title>skb_free_head (3 samples, 0.04%)</title><rect x="564.0" y="325" width="0.5" height="15.0" fill="rgb(228,63,2)" rx="2" ry="2" />
<text  x="567.03" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (6 samples, 0.08%)</title><rect x="1127.6" y="661" width="1.0" height="15.0" fill="rgb(238,161,4)" rx="2" ry="2" />
<text  x="1130.60" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1188.1" y="789" width="0.1" height="15.0" fill="rgb(220,30,46)" rx="2" ry="2" />
<text  x="1191.06" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="769.5" y="629" width="0.2" height="15.0" fill="rgb(242,31,1)" rx="2" ry="2" />
<text  x="772.51" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="371.8" y="693" width="0.2" height="15.0" fill="rgb(220,122,49)" rx="2" ry="2" />
<text  x="374.81" y="703.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.43 (3 samples, 0.04%)</title><rect x="895.0" y="757" width="0.4" height="15.0" fill="rgb(233,193,26)" rx="2" ry="2" />
<text  x="897.96" y="767.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="1001.7" y="533" width="0.1" height="15.0" fill="rgb(220,48,31)" rx="2" ry="2" />
<text  x="1004.66" y="543.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="1015.1" y="517" width="0.1" height="15.0" fill="rgb(235,163,48)" rx="2" ry="2" />
<text  x="1018.08" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::get (2 samples, 0.03%)</title><rect x="674.9" y="645" width="0.4" height="15.0" fill="rgb(251,178,39)" rx="2" ry="2" />
<text  x="677.93" y="655.5" ></text>
</g>
<g >
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="554.8" y="677" width="0.3" height="15.0" fill="rgb(216,157,8)" rx="2" ry="2" />
<text  x="557.81" y="687.5" ></text>
</g>
<g >
<title>release_sock (2 samples, 0.03%)</title><rect x="396.7" y="501" width="0.3" height="15.0" fill="rgb(238,141,9)" rx="2" ry="2" />
<text  x="399.71" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="1021.5" y="645" width="0.4" height="15.0" fill="rgb(228,118,13)" rx="2" ry="2" />
<text  x="1024.54" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="1186.8" y="757" width="1.1" height="15.0" fill="rgb(207,211,3)" rx="2" ry="2" />
<text  x="1189.77" y="767.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (5 samples, 0.07%)</title><rect x="803.0" y="693" width="0.8" height="15.0" fill="rgb(247,108,35)" rx="2" ry="2" />
<text  x="805.97" y="703.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="650.5" y="981" width="0.2" height="15.0" fill="rgb(218,116,7)" rx="2" ry="2" />
<text  x="653.52" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="360.2" y="741" width="0.1" height="15.0" fill="rgb(207,175,1)" rx="2" ry="2" />
<text  x="363.17" y="751.5" ></text>
</g>
<g >
<title>ip_rcv (452 samples, 6.19%)</title><rect x="161.5" y="213" width="73.1" height="15.0" fill="rgb(205,89,27)" rx="2" ry="2" />
<text  x="164.48" y="223.5" >ip_rcv</text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.01%)</title><rect x="234.4" y="165" width="0.2" height="15.0" fill="rgb(237,132,51)" rx="2" ry="2" />
<text  x="237.39" y="175.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="123.0" y="693" width="0.2" height="15.0" fill="rgb(237,186,45)" rx="2" ry="2" />
<text  x="126.00" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="257.7" y="789" width="0.1" height="15.0" fill="rgb(253,123,46)" rx="2" ry="2" />
<text  x="260.67" y="799.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (399 samples, 5.47%)</title><rect x="169.6" y="69" width="64.5" height="15.0" fill="rgb(242,185,48)" rx="2" ry="2" />
<text  x="172.56" y="79.5" >__wake_..</text>
</g>
<g >
<title>schedule (75 samples, 1.03%)</title><rect x="46.2" y="709" width="12.1" height="15.0" fill="rgb(249,34,16)" rx="2" ry="2" />
<text  x="49.21" y="719.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (14 samples, 0.19%)</title><rect x="1013.9" y="661" width="2.3" height="15.0" fill="rgb(205,145,24)" rx="2" ry="2" />
<text  x="1016.95" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="505.3" y="821" width="0.2" height="15.0" fill="rgb(208,27,39)" rx="2" ry="2" />
<text  x="508.34" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (20 samples, 0.27%)</title><rect x="766.1" y="629" width="3.2" height="15.0" fill="rgb(218,94,33)" rx="2" ry="2" />
<text  x="769.11" y="639.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.01%)</title><rect x="1150.4" y="581" width="0.2" height="15.0" fill="rgb(229,58,14)" rx="2" ry="2" />
<text  x="1153.39" y="591.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="254.0" y="757" width="0.1" height="15.0" fill="rgb(245,115,8)" rx="2" ry="2" />
<text  x="256.95" y="767.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="342.5" y="469" width="0.2" height="15.0" fill="rgb(239,28,38)" rx="2" ry="2" />
<text  x="345.55" y="479.5" ></text>
</g>
<g >
<title>common_file_perm (3 samples, 0.04%)</title><rect x="1116.6" y="501" width="0.5" height="15.0" fill="rgb(229,79,47)" rx="2" ry="2" />
<text  x="1119.60" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7 samples, 0.10%)</title><rect x="1139.6" y="661" width="1.1" height="15.0" fill="rgb(207,109,48)" rx="2" ry="2" />
<text  x="1142.56" y="671.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="512.5" y="789" width="0.1" height="15.0" fill="rgb(238,89,20)" rx="2" ry="2" />
<text  x="515.46" y="799.5" ></text>
</g>
<g >
<title>malloc_consolidate (6 samples, 0.08%)</title><rect x="955.6" y="981" width="1.0" height="15.0" fill="rgb(245,168,5)" rx="2" ry="2" />
<text  x="958.58" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, char*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="783.1" y="613" width="0.1" height="15.0" fill="rgb(210,145,28)" rx="2" ry="2" />
<text  x="786.09" y="623.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="92.4" y="485" width="0.2" height="15.0" fill="rgb(233,46,22)" rx="2" ry="2" />
<text  x="95.45" y="495.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (2 samples, 0.03%)</title><rect x="64.8" y="741" width="0.3" height="15.0" fill="rgb(227,203,42)" rx="2" ry="2" />
<text  x="67.80" y="751.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3 samples, 0.04%)</title><rect x="1022.4" y="581" width="0.4" height="15.0" fill="rgb(215,72,24)" rx="2" ry="2" />
<text  x="1025.35" y="591.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::isFull (1 samples, 0.01%)</title><rect x="341.9" y="549" width="0.2" height="15.0" fill="rgb(205,167,25)" rx="2" ry="2" />
<text  x="344.90" y="559.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="1161.7" y="613" width="0.3" height="15.0" fill="rgb(223,95,10)" rx="2" ry="2" />
<text  x="1164.71" y="623.5" ></text>
</g>
<g >
<title>tcp_small_queue_check.isra.29 (1 samples, 0.01%)</title><rect x="157.3" y="453" width="0.1" height="15.0" fill="rgb(233,45,46)" rx="2" ry="2" />
<text  x="160.28" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="786.6" y="597" width="0.2" height="15.0" fill="rgb(250,112,23)" rx="2" ry="2" />
<text  x="789.64" y="607.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (467 samples, 6.40%)</title><rect x="159.9" y="309" width="75.5" height="15.0" fill="rgb(249,26,51)" rx="2" ry="2" />
<text  x="162.86" y="319.5" >do_softi..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="366.2" y="709" width="0.1" height="15.0" fill="rgb(219,3,8)" rx="2" ry="2" />
<text  x="369.15" y="719.5" ></text>
</g>
<g >
<title>security_file_permission (5 samples, 0.07%)</title><rect x="585.5" y="885" width="0.8" height="15.0" fill="rgb(253,40,28)" rx="2" ry="2" />
<text  x="588.53" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="103.3" y="437" width="0.1" height="15.0" fill="rgb(236,81,27)" rx="2" ry="2" />
<text  x="106.28" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple (6 samples, 0.08%)</title><rect x="994.9" y="741" width="0.9" height="15.0" fill="rgb(244,225,54)" rx="2" ry="2" />
<text  x="997.87" y="751.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (255 samples, 3.49%)</title><rect x="545.1" y="981" width="41.2" height="15.0" fill="rgb(223,83,47)" rx="2" ry="2" />
<text  x="548.11" y="991.5" >[li..</text>
</g>
<g >
<title>kfree (1 samples, 0.01%)</title><rect x="79.8" y="421" width="0.2" height="15.0" fill="rgb(246,67,22)" rx="2" ry="2" />
<text  x="82.84" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (1 samples, 0.01%)</title><rect x="1157.2" y="709" width="0.1" height="15.0" fill="rgb(234,31,38)" rx="2" ry="2" />
<text  x="1160.18" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4 samples, 0.05%)</title><rect x="1149.9" y="661" width="0.7" height="15.0" fill="rgb(210,182,44)" rx="2" ry="2" />
<text  x="1152.91" y="671.5" ></text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.01%)</title><rect x="848.6" y="805" width="0.1" height="15.0" fill="rgb(243,193,9)" rx="2" ry="2" />
<text  x="851.56" y="815.5" ></text>
</g>
<g >
<title>ipv4_mtu (1 samples, 0.01%)</title><rect x="583.8" y="757" width="0.1" height="15.0" fill="rgb(217,97,27)" rx="2" ry="2" />
<text  x="586.75" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.04%)</title><rect x="1005.1" y="677" width="0.4" height="15.0" fill="rgb(244,223,42)" rx="2" ry="2" />
<text  x="1008.05" y="687.5" ></text>
</g>
<g >
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="238.6" y="421" width="0.3" height="15.0" fill="rgb(221,58,36)" rx="2" ry="2" />
<text  x="241.60" y="431.5" ></text>
</g>
<g >
<title>__stat (1 samples, 0.01%)</title><rect x="1163.8" y="725" width="0.2" height="15.0" fill="rgb(210,107,12)" rx="2" ry="2" />
<text  x="1166.81" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (2 samples, 0.03%)</title><rect x="132.7" y="757" width="0.3" height="15.0" fill="rgb(230,33,32)" rx="2" ry="2" />
<text  x="135.70" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="1146.4" y="661" width="0.1" height="15.0" fill="rgb(214,204,32)" rx="2" ry="2" />
<text  x="1149.35" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="663.5" y="661" width="0.1" height="15.0" fill="rgb(237,161,6)" rx="2" ry="2" />
<text  x="666.45" y="671.5" ></text>
</g>
<g >
<title>sdscatfmt (1 samples, 0.01%)</title><rect x="958.7" y="981" width="0.1" height="15.0" fill="rgb(209,65,40)" rx="2" ry="2" />
<text  x="961.66" y="991.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="98.6" y="533" width="0.2" height="15.0" fill="rgb(242,209,32)" rx="2" ry="2" />
<text  x="101.59" y="543.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="338.8" y="469" width="0.2" height="15.0" fill="rgb(248,59,54)" rx="2" ry="2" />
<text  x="341.83" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="1001.5" y="581" width="0.3" height="15.0" fill="rgb(244,38,25)" rx="2" ry="2" />
<text  x="1004.50" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="503.1" y="789" width="0.1" height="15.0" fill="rgb(218,135,5)" rx="2" ry="2" />
<text  x="506.08" y="799.5" ></text>
</g>
<g >
<title>sock_def_readable (394 samples, 5.40%)</title><rect x="415.3" y="85" width="63.7" height="15.0" fill="rgb(250,20,36)" rx="2" ry="2" />
<text  x="418.30" y="95.5" >sock_d..</text>
</g>
<g >
<title>std::get&lt;1ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1 samples, 0.01%)</title><rect x="109.6" y="613" width="0.1" height="15.0" fill="rgb(216,24,52)" rx="2" ry="2" />
<text  x="112.59" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="815.1" y="677" width="0.2" height="15.0" fill="rgb(221,101,39)" rx="2" ry="2" />
<text  x="818.10" y="687.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (2 samples, 0.03%)</title><rect x="1024.9" y="645" width="0.4" height="15.0" fill="rgb(245,220,29)" rx="2" ry="2" />
<text  x="1027.94" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (16 samples, 0.22%)</title><rect x="1137.0" y="661" width="2.6" height="15.0" fill="rgb(239,127,39)" rx="2" ry="2" />
<text  x="1139.97" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="807.2" y="645" width="0.3" height="15.0" fill="rgb(205,63,38)" rx="2" ry="2" />
<text  x="810.17" y="655.5" ></text>
</g>
<g >
<title>std::move&lt;char&amp;&gt; (1 samples, 0.01%)</title><rect x="1147.6" y="581" width="0.2" height="15.0" fill="rgb(224,155,48)" rx="2" ry="2" />
<text  x="1150.64" y="591.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;2&gt;, false, true&gt;::operator (3 samples, 0.04%)</title><rect x="338.8" y="613" width="0.5" height="15.0" fill="rgb(238,135,7)" rx="2" ry="2" />
<text  x="341.83" y="623.5" ></text>
</g>
<g >
<title>boost::detail::empty_base&lt;muduo::Timestamp&gt;::empty_base (1 samples, 0.01%)</title><rect x="496.0" y="709" width="0.1" height="15.0" fill="rgb(254,0,45)" rx="2" ry="2" />
<text  x="498.97" y="719.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="332.7" y="437" width="0.3" height="15.0" fill="rgb(225,67,35)" rx="2" ry="2" />
<text  x="335.69" y="447.5" ></text>
</g>
<g >
<title>strncpy_from_user (1 samples, 0.01%)</title><rect x="834.3" y="613" width="0.2" height="15.0" fill="rgb(235,55,19)" rx="2" ry="2" />
<text  x="837.33" y="623.5" ></text>
</g>
<g >
<title>vfs_write (29 samples, 0.40%)</title><rect x="10.0" y="917" width="4.7" height="15.0" fill="rgb(235,77,42)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>__fdget_pos (1 samples, 0.01%)</title><rect x="888.0" y="933" width="0.2" height="15.0" fill="rgb(232,177,54)" rx="2" ry="2" />
<text  x="891.01" y="943.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&gt; (1 samples, 0.01%)</title><rect x="136.9" y="741" width="0.2" height="15.0" fill="rgb(244,110,17)" rx="2" ry="2" />
<text  x="139.91" y="751.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="673.3" y="645" width="0.2" height="15.0" fill="rgb(230,130,54)" rx="2" ry="2" />
<text  x="676.32" y="655.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (2 samples, 0.03%)</title><rect x="17.8" y="965" width="0.3" height="15.0" fill="rgb(230,111,13)" rx="2" ry="2" />
<text  x="20.76" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="28.6" y="917" width="0.2" height="15.0" fill="rgb(223,97,44)" rx="2" ry="2" />
<text  x="31.59" y="927.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="318.5" y="725" width="0.1" height="15.0" fill="rgb(252,197,44)" rx="2" ry="2" />
<text  x="321.46" y="735.5" ></text>
</g>
<g >
<title>muduo::net::sockets::readv (1 samples, 0.01%)</title><rect x="338.0" y="677" width="0.2" height="15.0" fill="rgb(225,126,2)" rx="2" ry="2" />
<text  x="341.02" y="687.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="654.2" y="757" width="0.2" height="15.0" fill="rgb(220,178,0)" rx="2" ry="2" />
<text  x="657.24" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="352.9" y="437" width="0.2" height="15.0" fill="rgb(222,112,30)" rx="2" ry="2" />
<text  x="355.89" y="447.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (4 samples, 0.05%)</title><rect x="67.1" y="725" width="0.6" height="15.0" fill="rgb(249,8,50)" rx="2" ry="2" />
<text  x="70.07" y="735.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, char*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="1132.1" y="613" width="0.2" height="15.0" fill="rgb(242,129,39)" rx="2" ry="2" />
<text  x="1135.12" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,198 samples, 16.41%)</title><rect x="991.5" y="917" width="193.7" height="15.0" fill="rgb(217,181,49)" rx="2" ry="2" />
<text  x="994.47" y="927.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::FixedBuffer (3 samples, 0.04%)</title><rect x="120.3" y="757" width="0.4" height="15.0" fill="rgb(206,119,40)" rx="2" ry="2" />
<text  x="123.26" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="273.0" y="949" width="0.2" height="15.0" fill="rgb(238,202,48)" rx="2" ry="2" />
<text  x="276.03" y="959.5" ></text>
</g>
<g >
<title>sys_newstat (89 samples, 1.22%)</title><rect x="821.6" y="677" width="14.4" height="15.0" fill="rgb(232,91,52)" rx="2" ry="2" />
<text  x="824.56" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1132.0" y="613" width="0.1" height="15.0" fill="rgb(237,69,27)" rx="2" ry="2" />
<text  x="1134.96" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="341.1" y="517" width="0.6" height="15.0" fill="rgb(242,41,35)" rx="2" ry="2" />
<text  x="344.09" y="527.5" ></text>
</g>
<g >
<title>redisFormatSdsCommandArgv (2 samples, 0.03%)</title><rect x="990.0" y="997" width="0.3" height="15.0" fill="rgb(211,158,32)" rx="2" ry="2" />
<text  x="993.02" y="1007.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="1186.8" y="533" width="0.1" height="15.0" fill="rgb(207,23,21)" rx="2" ry="2" />
<text  x="1189.77" y="543.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnectionInLoop (3 samples, 0.04%)</title><rect x="1188.7" y="821" width="0.5" height="15.0" fill="rgb(208,110,43)" rx="2" ry="2" />
<text  x="1191.71" y="831.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index::equal (1 samples, 0.01%)</title><rect x="91.8" y="485" width="0.2" height="15.0" fill="rgb(236,19,30)" rx="2" ry="2" />
<text  x="94.80" y="495.5" ></text>
</g>
<g >
<title>skb_free_head (3 samples, 0.04%)</title><rect x="330.6" y="421" width="0.5" height="15.0" fill="rgb(239,65,7)" rx="2" ry="2" />
<text  x="333.58" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="129.5" y="725" width="0.1" height="15.0" fill="rgb(223,18,23)" rx="2" ry="2" />
<text  x="132.47" y="735.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (2 samples, 0.03%)</title><rect x="311.3" y="821" width="0.4" height="15.0" fill="rgb(219,131,36)" rx="2" ry="2" />
<text  x="314.35" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (4 samples, 0.05%)</title><rect x="134.2" y="805" width="0.6" height="15.0" fill="rgb(208,39,4)" rx="2" ry="2" />
<text  x="137.16" y="815.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="650.5" y="949" width="0.2" height="15.0" fill="rgb(233,227,0)" rx="2" ry="2" />
<text  x="653.52" y="959.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (5 samples, 0.07%)</title><rect x="67.1" y="741" width="0.8" height="15.0" fill="rgb(234,96,43)" rx="2" ry="2" />
<text  x="70.07" y="751.5" ></text>
</g>
<g >
<title>ip_copy_addrs (1 samples, 0.01%)</title><rect x="403.8" y="421" width="0.2" height="15.0" fill="rgb(228,107,38)" rx="2" ry="2" />
<text  x="406.82" y="431.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="257.8" y="821" width="0.2" height="15.0" fill="rgb(249,215,1)" rx="2" ry="2" />
<text  x="260.83" y="831.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="68.4" y="709" width="0.1" height="15.0" fill="rgb(225,117,17)" rx="2" ry="2" />
<text  x="71.36" y="719.5" ></text>
</g>
<g >
<title>ip_finish_output2 (484 samples, 6.63%)</title><rect x="159.2" y="357" width="78.3" height="15.0" fill="rgb(221,182,33)" rx="2" ry="2" />
<text  x="162.22" y="367.5" >ip_finish..</text>
</g>
<g >
<title>__kfree_skb_flush (1 samples, 0.01%)</title><rect x="556.8" y="581" width="0.1" height="15.0" fill="rgb(230,119,9)" rx="2" ry="2" />
<text  x="559.75" y="591.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2 samples, 0.03%)</title><rect x="167.8" y="69" width="0.3" height="15.0" fill="rgb(225,219,42)" rx="2" ry="2" />
<text  x="170.79" y="79.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="549" width="0.2" height="15.0" fill="rgb(210,24,20)" rx="2" ry="2" />
<text  x="1190.41" y="559.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="1144.9" y="661" width="0.5" height="15.0" fill="rgb(250,121,25)" rx="2" ry="2" />
<text  x="1147.90" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="21.6" y="933" width="0.2" height="15.0" fill="rgb(240,191,15)" rx="2" ry="2" />
<text  x="24.64" y="943.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (5 samples, 0.07%)</title><rect x="787.0" y="565" width="0.8" height="15.0" fill="rgb(211,226,8)" rx="2" ry="2" />
<text  x="789.97" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (5 samples, 0.07%)</title><rect x="348.2" y="485" width="0.8" height="15.0" fill="rgb(237,205,40)" rx="2" ry="2" />
<text  x="351.21" y="495.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (5 samples, 0.07%)</title><rect x="1188.7" y="933" width="0.8" height="15.0" fill="rgb(208,157,25)" rx="2" ry="2" />
<text  x="1191.71" y="943.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl&lt;StaticServer*, std::_Placeholder&lt;1&gt; const&amp;, void&gt; (1 samples, 0.01%)</title><rect x="97.6" y="517" width="0.2" height="15.0" fill="rgb(216,97,49)" rx="2" ry="2" />
<text  x="100.62" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::get_deleter (1 samples, 0.01%)</title><rect x="784.1" y="677" width="0.1" height="15.0" fill="rgb(241,163,25)" rx="2" ry="2" />
<text  x="787.06" y="687.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="1025.1" y="549" width="0.2" height="15.0" fill="rgb(249,125,12)" rx="2" ry="2" />
<text  x="1028.10" y="559.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::~weak_ptr (2 samples, 0.03%)</title><rect x="356.3" y="581" width="0.3" height="15.0" fill="rgb(246,180,53)" rx="2" ry="2" />
<text  x="359.29" y="591.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.01%)</title><rect x="281.8" y="949" width="0.1" height="15.0" fill="rgb(245,8,39)" rx="2" ry="2" />
<text  x="284.76" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="371.8" y="709" width="0.2" height="15.0" fill="rgb(234,170,2)" rx="2" ry="2" />
<text  x="374.81" y="719.5" ></text>
</g>
<g >
<title>muduo::net::Socket::~Socket (2 samples, 0.03%)</title><rect x="997.8" y="565" width="0.3" height="15.0" fill="rgb(220,131,1)" rx="2" ry="2" />
<text  x="1000.78" y="575.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (1 samples, 0.01%)</title><rect x="286.8" y="837" width="0.1" height="15.0" fill="rgb(225,155,47)" rx="2" ry="2" />
<text  x="289.77" y="847.5" ></text>
</g>
<g >
<title>_copy_to_iter (2 samples, 0.03%)</title><rect x="332.7" y="453" width="0.3" height="15.0" fill="rgb(254,161,18)" rx="2" ry="2" />
<text  x="335.69" y="463.5" ></text>
</g>
<g >
<title>dst_release (1 samples, 0.01%)</title><rect x="168.8" y="85" width="0.1" height="15.0" fill="rgb(250,219,29)" rx="2" ry="2" />
<text  x="171.76" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.01%)</title><rect x="809.1" y="709" width="0.2" height="15.0" fill="rgb(226,115,6)" rx="2" ry="2" />
<text  x="812.11" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="247.3" y="549" width="0.2" height="15.0" fill="rgb(238,79,53)" rx="2" ry="2" />
<text  x="250.33" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="789.4" y="613" width="0.2" height="15.0" fill="rgb(228,29,2)" rx="2" ry="2" />
<text  x="792.39" y="623.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="14.7" y="981" width="0.1" height="15.0" fill="rgb(228,3,30)" rx="2" ry="2" />
<text  x="17.69" y="991.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1123.9" y="661" width="0.1" height="15.0" fill="rgb(216,197,11)" rx="2" ry="2" />
<text  x="1126.88" y="671.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (2 samples, 0.03%)</title><rect x="88.2" y="437" width="0.4" height="15.0" fill="rgb(216,215,29)" rx="2" ry="2" />
<text  x="91.25" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="997.8" y="645" width="0.3" height="15.0" fill="rgb(221,96,49)" rx="2" ry="2" />
<text  x="1000.78" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="354.3" y="453" width="0.2" height="15.0" fill="rgb(253,195,47)" rx="2" ry="2" />
<text  x="357.35" y="463.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="818.5" y="709" width="0.2" height="15.0" fill="rgb(241,109,4)" rx="2" ry="2" />
<text  x="821.49" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="650.7" y="965" width="0.1" height="15.0" fill="rgb(248,178,26)" rx="2" ry="2" />
<text  x="653.68" y="975.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (3 samples, 0.04%)</title><rect x="673.5" y="645" width="0.5" height="15.0" fill="rgb(215,83,7)" rx="2" ry="2" />
<text  x="676.48" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="1015.6" y="645" width="0.1" height="15.0" fill="rgb(208,61,15)" rx="2" ry="2" />
<text  x="1018.56" y="655.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="1014.4" y="501" width="0.2" height="15.0" fill="rgb(245,109,10)" rx="2" ry="2" />
<text  x="1017.43" y="511.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="250.9" y="741" width="0.3" height="15.0" fill="rgb(219,83,38)" rx="2" ry="2" />
<text  x="253.88" y="751.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="350.8" y="469" width="0.2" height="15.0" fill="rgb(216,112,2)" rx="2" ry="2" />
<text  x="353.79" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="88.2" y="501" width="0.4" height="15.0" fill="rgb(246,165,25)" rx="2" ry="2" />
<text  x="91.25" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="994.1" y="805" width="0.1" height="15.0" fill="rgb(243,81,38)" rx="2" ry="2" />
<text  x="997.06" y="815.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="333.2" y="453" width="0.1" height="15.0" fill="rgb(222,47,54)" rx="2" ry="2" />
<text  x="336.17" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (4 samples, 0.05%)</title><rect x="352.1" y="485" width="0.6" height="15.0" fill="rgb(247,204,43)" rx="2" ry="2" />
<text  x="355.09" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="652.6" y="901" width="0.2" height="15.0" fill="rgb(239,66,48)" rx="2" ry="2" />
<text  x="655.62" y="911.5" ></text>
</g>
<g >
<title>finish_task_switch (68 samples, 0.93%)</title><rect x="296.8" y="677" width="11.0" height="15.0" fill="rgb(215,32,34)" rx="2" ry="2" />
<text  x="299.80" y="687.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="848.6" y="789" width="0.1" height="15.0" fill="rgb(219,166,51)" rx="2" ry="2" />
<text  x="851.56" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (677 samples, 9.28%)</title><rect x="136.1" y="773" width="109.4" height="15.0" fill="rgb(254,131,48)" rx="2" ry="2" />
<text  x="139.10" y="783.5" >std::_Bind&lt;vo..</text>
</g>
<g >
<title>vfprintf (20 samples, 0.27%)</title><rect x="273.5" y="965" width="3.2" height="15.0" fill="rgb(211,220,51)" rx="2" ry="2" />
<text  x="276.52" y="975.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (223 samples, 3.06%)</title><rect x="892.7" y="805" width="36.0" height="15.0" fill="rgb(237,171,52)" rx="2" ry="2" />
<text  x="895.70" y="815.5" >tcp..</text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="351.1" y="485" width="0.2" height="15.0" fill="rgb(216,41,27)" rx="2" ry="2" />
<text  x="354.12" y="495.5" ></text>
</g>
<g >
<title>ip_output (489 samples, 6.70%)</title><rect x="158.6" y="389" width="79.0" height="15.0" fill="rgb(218,226,32)" rx="2" ry="2" />
<text  x="161.57" y="399.5" >ip_output</text>
</g>
<g >
<title>iov_iter_advance (1 samples, 0.01%)</title><rect x="153.9" y="485" width="0.1" height="15.0" fill="rgb(221,166,52)" rx="2" ry="2" />
<text  x="156.88" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="777.9" y="645" width="0.2" height="15.0" fill="rgb(231,100,5)" rx="2" ry="2" />
<text  x="780.91" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (2 samples, 0.03%)</title><rect x="106.8" y="453" width="0.4" height="15.0" fill="rgb(250,64,14)" rx="2" ry="2" />
<text  x="109.84" y="463.5" ></text>
</g>
<g >
<title>inode_permission (4 samples, 0.05%)</title><rect x="825.4" y="565" width="0.7" height="15.0" fill="rgb(247,77,25)" rx="2" ry="2" />
<text  x="828.44" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="357.9" y="661" width="0.2" height="15.0" fill="rgb(246,190,9)" rx="2" ry="2" />
<text  x="360.91" y="671.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (1 samples, 0.01%)</title><rect x="237.1" y="309" width="0.2" height="15.0" fill="rgb(213,7,26)" rx="2" ry="2" />
<text  x="240.14" y="319.5" ></text>
</g>
<g >
<title>muduo::net::Acceptor::handleRead (7 samples, 0.10%)</title><rect x="1186.8" y="805" width="1.1" height="15.0" fill="rgb(217,23,43)" rx="2" ry="2" />
<text  x="1189.77" y="815.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (1 samples, 0.01%)</title><rect x="312.8" y="773" width="0.2" height="15.0" fill="rgb(206,5,24)" rx="2" ry="2" />
<text  x="315.80" y="783.5" ></text>
</g>
<g >
<title>__fdget_pos (1 samples, 0.01%)</title><rect x="388.0" y="629" width="0.1" height="15.0" fill="rgb(232,96,23)" rx="2" ry="2" />
<text  x="390.98" y="639.5" ></text>
</g>
<g >
<title>sdscatlen (1 samples, 0.01%)</title><rect x="1126.3" y="693" width="0.2" height="15.0" fill="rgb(227,197,49)" rx="2" ry="2" />
<text  x="1129.30" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1161.9" y="565" width="0.1" height="15.0" fill="rgb(249,148,38)" rx="2" ry="2" />
<text  x="1164.87" y="575.5" ></text>
</g>
<g >
<title>__pthread_once (1 samples, 0.01%)</title><rect x="279.7" y="949" width="0.1" height="15.0" fill="rgb(234,215,50)" rx="2" ry="2" />
<text  x="282.66" y="959.5" ></text>
</g>
<g >
<title>muduo::LogStream::buffer (1 samples, 0.01%)</title><rect x="497.6" y="789" width="0.1" height="15.0" fill="rgb(218,106,39)" rx="2" ry="2" />
<text  x="500.58" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.2" y="565" width="0.1" height="15.0" fill="rgb(243,19,11)" rx="2" ry="2" />
<text  x="772.18" y="575.5" ></text>
</g>
<g >
<title>__kfree_skb_flush (1 samples, 0.01%)</title><rect x="901.6" y="565" width="0.1" height="15.0" fill="rgb(247,145,16)" rx="2" ry="2" />
<text  x="904.59" y="575.5" ></text>
</g>
<g >
<title>map_id_up (1 samples, 0.01%)</title><rect x="822.5" y="629" width="0.2" height="15.0" fill="rgb(216,125,52)" rx="2" ry="2" />
<text  x="825.53" y="639.5" ></text>
</g>
<g >
<title>__vfs_read (1 samples, 0.01%)</title><rect x="508.7" y="933" width="0.2" height="15.0" fill="rgb(236,116,19)" rx="2" ry="2" />
<text  x="511.74" y="943.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10 samples, 0.14%)</title><rect x="1186.8" y="901" width="1.6" height="15.0" fill="rgb(221,76,25)" rx="2" ry="2" />
<text  x="1189.77" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.01%)</title><rect x="1160.4" y="645" width="0.2" height="15.0" fill="rgb(212,121,50)" rx="2" ry="2" />
<text  x="1163.42" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,354 samples, 18.55%)</title><rect x="286.8" y="933" width="218.9" height="15.0" fill="rgb(209,189,42)" rx="2" ry="2" />
<text  x="289.77" y="943.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>exit_to_usermode_loop (7 samples, 0.10%)</title><rect x="1029.5" y="581" width="1.1" height="15.0" fill="rgb(213,195,27)" rx="2" ry="2" />
<text  x="1032.47" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="1123.4" y="645" width="0.5" height="15.0" fill="rgb(245,38,19)" rx="2" ry="2" />
<text  x="1126.39" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="797.0" y="661" width="0.3" height="15.0" fill="rgb(231,211,54)" rx="2" ry="2" />
<text  x="799.99" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7 samples, 0.10%)</title><rect x="781.1" y="661" width="1.2" height="15.0" fill="rgb(236,18,9)" rx="2" ry="2" />
<text  x="784.15" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, void&gt; (1 samples, 0.01%)</title><rect x="97.9" y="501" width="0.2" height="15.0" fill="rgb(241,206,23)" rx="2" ry="2" />
<text  x="100.95" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="339.2" y="581" width="0.1" height="15.0" fill="rgb(216,97,54)" rx="2" ry="2" />
<text  x="342.15" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="1189.8" y="965" width="0.2" height="15.0" fill="rgb(236,137,16)" rx="2" ry="2" />
<text  x="1192.84" y="975.5" ></text>
</g>
<g >
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="1175.1" y="565" width="0.4" height="15.0" fill="rgb(240,154,0)" rx="2" ry="2" />
<text  x="1178.13" y="575.5" ></text>
</g>
<g >
<title>ip_finish_output (153 samples, 2.10%)</title><rect x="555.3" y="677" width="24.7" height="15.0" fill="rgb(216,145,23)" rx="2" ry="2" />
<text  x="558.30" y="687.5" >i..</text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="385.6" y="661" width="0.3" height="15.0" fill="rgb(254,7,28)" rx="2" ry="2" />
<text  x="388.55" y="671.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="363.4" y="789" width="0.5" height="15.0" fill="rgb(254,118,6)" rx="2" ry="2" />
<text  x="366.40" y="799.5" ></text>
</g>
<g >
<title>__vfs_read (174 samples, 2.38%)</title><rect x="846.0" y="917" width="28.1" height="15.0" fill="rgb(238,200,53)" rx="2" ry="2" />
<text  x="848.97" y="927.5" >_..</text>
</g>
<g >
<title>std::get&lt;2ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="1184.8" y="789" width="0.2" height="15.0" fill="rgb(229,212,3)" rx="2" ry="2" />
<text  x="1187.83" y="799.5" ></text>
</g>
<g >
<title>std::locale::locale (5 samples, 0.07%)</title><rect x="30.7" y="949" width="0.8" height="15.0" fill="rgb(248,174,11)" rx="2" ry="2" />
<text  x="33.69" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="791.3" y="645" width="0.2" height="15.0" fill="rgb(209,76,15)" rx="2" ry="2" />
<text  x="794.33" y="655.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="1014.4" y="485" width="0.2" height="15.0" fill="rgb(249,163,43)" rx="2" ry="2" />
<text  x="1017.43" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (9 samples, 0.12%)</title><rect x="816.7" y="709" width="1.5" height="15.0" fill="rgb(224,19,15)" rx="2" ry="2" />
<text  x="819.71" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="959.6" y="949" width="0.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="962.63" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="636.9" y="965" width="0.2" height="15.0" fill="rgb(218,45,42)" rx="2" ry="2" />
<text  x="639.94" y="975.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="343.0" y="405" width="0.2" height="15.0" fill="rgb(249,94,18)" rx="2" ry="2" />
<text  x="346.03" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="285.3" y="981" width="0.2" height="15.0" fill="rgb(217,175,32)" rx="2" ry="2" />
<text  x="288.32" y="991.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1180.6" y="709" width="0.2" height="15.0" fill="rgb(241,22,17)" rx="2" ry="2" />
<text  x="1183.62" y="719.5" ></text>
</g>
<g >
<title>[[vdso]] (2 samples, 0.03%)</title><rect x="801.0" y="645" width="0.4" height="15.0" fill="rgb(222,217,9)" rx="2" ry="2" />
<text  x="804.03" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="265.3" y="949" width="0.1" height="15.0" fill="rgb(234,11,34)" rx="2" ry="2" />
<text  x="268.27" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="806.7" y="613" width="0.2" height="15.0" fill="rgb(214,23,50)" rx="2" ry="2" />
<text  x="809.69" y="623.5" ></text>
</g>
<g >
<title>net_rx_action (3 samples, 0.04%)</title><rect x="923.1" y="597" width="0.5" height="15.0" fill="rgb(252,119,23)" rx="2" ry="2" />
<text  x="926.09" y="607.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="814.3" y="693" width="0.1" height="15.0" fill="rgb(241,127,12)" rx="2" ry="2" />
<text  x="817.29" y="703.5" ></text>
</g>
<g >
<title>sk_free (1 samples, 0.01%)</title><rect x="925.7" y="581" width="0.1" height="15.0" fill="rgb(227,141,12)" rx="2" ry="2" />
<text  x="928.68" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="380.1" y="741" width="0.1" height="15.0" fill="rgb(219,154,52)" rx="2" ry="2" />
<text  x="383.05" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt; &gt; &gt;::end (2 samples, 0.03%)</title><rect x="95.4" y="533" width="0.3" height="15.0" fill="rgb(207,142,19)" rx="2" ry="2" />
<text  x="98.36" y="543.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (11 samples, 0.15%)</title><rect x="550.4" y="789" width="1.8" height="15.0" fill="rgb(229,187,45)" rx="2" ry="2" />
<text  x="553.45" y="799.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (337 samples, 4.62%)</title><rect x="61.1" y="821" width="54.5" height="15.0" fill="rgb(213,103,15)" rx="2" ry="2" />
<text  x="64.09" y="831.5" >muduo..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::unordered_map (1 samples, 0.01%)</title><rect x="1187.7" y="661" width="0.2" height="15.0" fill="rgb(205,110,32)" rx="2" ry="2" />
<text  x="1190.74" y="671.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.01%)</title><rect x="337.4" y="117" width="0.1" height="15.0" fill="rgb(237,192,19)" rx="2" ry="2" />
<text  x="340.37" y="127.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1 samples, 0.01%)</title><rect x="109.4" y="613" width="0.2" height="15.0" fill="rgb(235,28,12)" rx="2" ry="2" />
<text  x="112.42" y="623.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::Timestamp&amp;&amp;&gt;::tuple&lt;muduo::Timestamp, true&gt; (1 samples, 0.01%)</title><rect x="112.7" y="725" width="0.1" height="15.0" fill="rgb(212,170,50)" rx="2" ry="2" />
<text  x="115.66" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.01%)</title><rect x="784.2" y="677" width="0.2" height="15.0" fill="rgb(220,2,36)" rx="2" ry="2" />
<text  x="787.22" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="68.2" y="693" width="0.2" height="15.0" fill="rgb(242,2,4)" rx="2" ry="2" />
<text  x="71.20" y="703.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (1 samples, 0.01%)</title><rect x="873.6" y="821" width="0.2" height="15.0" fill="rgb(210,190,30)" rx="2" ry="2" />
<text  x="876.62" y="831.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.03%)</title><rect x="772.4" y="645" width="0.3" height="15.0" fill="rgb(239,154,43)" rx="2" ry="2" />
<text  x="775.42" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="317.7" y="725" width="0.1" height="15.0" fill="rgb(246,144,24)" rx="2" ry="2" />
<text  x="320.65" y="735.5" ></text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.01%)</title><rect x="511.8" y="821" width="0.2" height="15.0" fill="rgb(211,47,14)" rx="2" ry="2" />
<text  x="514.81" y="831.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (2 samples, 0.03%)</title><rect x="1188.9" y="789" width="0.3" height="15.0" fill="rgb(245,78,44)" rx="2" ry="2" />
<text  x="1191.87" y="799.5" ></text>
</g>
<g >
<title>std::find&lt;char*, char&gt; (1 samples, 0.01%)</title><rect x="1157.7" y="709" width="0.1" height="15.0" fill="rgb(225,95,35)" rx="2" ry="2" />
<text  x="1160.67" y="719.5" ></text>
</g>
<g >
<title>muduo::TimeZone::valid (1 samples, 0.01%)</title><rect x="367.8" y="773" width="0.1" height="15.0" fill="rgb(226,152,8)" rx="2" ry="2" />
<text  x="370.77" y="783.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="338.8" y="501" width="0.2" height="15.0" fill="rgb(225,194,37)" rx="2" ry="2" />
<text  x="341.83" y="511.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; (1 samples, 0.01%)</title><rect x="107.0" y="437" width="0.2" height="15.0" fill="rgb(239,201,21)" rx="2" ry="2" />
<text  x="110.00" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1181.4" y="709" width="0.2" height="15.0" fill="rgb(243,222,30)" rx="2" ry="2" />
<text  x="1184.43" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;muduo::net::Channel*&gt; &gt;::construct&lt;muduo::net::Channel*, muduo::net::Channel* const&amp;&gt; (2 samples, 0.03%)</title><rect x="133.4" y="773" width="0.3" height="15.0" fill="rgb(229,96,49)" rx="2" ry="2" />
<text  x="136.35" y="783.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; &gt; (6 samples, 0.08%)</title><rect x="340.0" y="565" width="0.9" height="15.0" fill="rgb(233,214,7)" rx="2" ry="2" />
<text  x="342.96" y="575.5" ></text>
</g>
<g >
<title>sock_recvmsg (34 samples, 0.47%)</title><rect x="78.2" y="517" width="5.5" height="15.0" fill="rgb(254,33,8)" rx="2" ry="2" />
<text  x="81.22" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="95.2" y="517" width="0.2" height="15.0" fill="rgb(253,188,44)" rx="2" ry="2" />
<text  x="98.20" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="658.4" y="773" width="0.5" height="15.0" fill="rgb(231,133,43)" rx="2" ry="2" />
<text  x="661.44" y="783.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tidString (1 samples, 0.01%)</title><rect x="365.5" y="773" width="0.2" height="15.0" fill="rgb(220,181,26)" rx="2" ry="2" />
<text  x="368.50" y="783.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.01%)</title><rect x="1167.7" y="597" width="0.2" height="15.0" fill="rgb(248,145,15)" rx="2" ry="2" />
<text  x="1170.69" y="607.5" ></text>
</g>
<g >
<title>std::swap&lt;void*&gt; (1 samples, 0.01%)</title><rect x="114.6" y="773" width="0.2" height="15.0" fill="rgb(209,73,37)" rx="2" ry="2" />
<text  x="117.60" y="783.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::TcpConnection (3 samples, 0.04%)</title><rect x="1187.4" y="677" width="0.5" height="15.0" fill="rgb(226,203,38)" rx="2" ry="2" />
<text  x="1190.41" y="687.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (22 samples, 0.30%)</title><rect x="320.9" y="677" width="3.5" height="15.0" fill="rgb(228,40,2)" rx="2" ry="2" />
<text  x="323.88" y="687.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1147.5" y="629" width="0.1" height="15.0" fill="rgb(206,35,50)" rx="2" ry="2" />
<text  x="1150.48" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="89.9" y="645" width="0.1" height="15.0" fill="rgb(205,227,9)" rx="2" ry="2" />
<text  x="92.86" y="655.5" ></text>
</g>
<g >
<title>sched_clock (2 samples, 0.03%)</title><rect x="927.0" y="725" width="0.3" height="15.0" fill="rgb(231,18,39)" rx="2" ry="2" />
<text  x="929.97" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;muduo::net::Channel*&gt;::construct&lt;muduo::net::Channel*, muduo::net::Channel* const&amp;&gt; (1 samples, 0.01%)</title><rect x="133.4" y="757" width="0.1" height="15.0" fill="rgb(238,9,19)" rx="2" ry="2" />
<text  x="136.35" y="767.5" ></text>
</g>
<g >
<title>_copy_to_iter (2 samples, 0.03%)</title><rect x="872.8" y="805" width="0.3" height="15.0" fill="rgb(207,43,29)" rx="2" ry="2" />
<text  x="875.81" y="815.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.01%)</title><rect x="555.1" y="677" width="0.2" height="15.0" fill="rgb(240,191,46)" rx="2" ry="2" />
<text  x="558.14" y="687.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (1 samples, 0.01%)</title><rect x="553.0" y="757" width="0.2" height="15.0" fill="rgb(243,69,26)" rx="2" ry="2" />
<text  x="556.04" y="767.5" ></text>
</g>
<g >
<title>security_file_permission (2 samples, 0.03%)</title><rect x="324.0" y="581" width="0.3" height="15.0" fill="rgb(239,154,17)" rx="2" ry="2" />
<text  x="326.96" y="591.5" ></text>
</g>
<g >
<title>__fdget_pos (1 samples, 0.01%)</title><rect x="1187.9" y="725" width="0.2" height="15.0" fill="rgb(210,165,53)" rx="2" ry="2" />
<text  x="1190.90" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="806.2" y="597" width="0.2" height="15.0" fill="rgb(226,9,37)" rx="2" ry="2" />
<text  x="809.20" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp, void&gt; (2 samples, 0.03%)</title><rect x="357.4" y="597" width="0.3" height="15.0" fill="rgb(227,168,22)" rx="2" ry="2" />
<text  x="360.42" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~tuple (2 samples, 0.03%)</title><rect x="770.0" y="661" width="0.3" height="15.0" fill="rgb(253,61,51)" rx="2" ry="2" />
<text  x="772.99" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="94.6" y="501" width="0.3" height="15.0" fill="rgb(208,137,23)" rx="2" ry="2" />
<text  x="97.55" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2 samples, 0.03%)</title><rect x="1158.5" y="677" width="0.3" height="15.0" fill="rgb(236,72,1)" rx="2" ry="2" />
<text  x="1161.48" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="33.9" y="965" width="0.2" height="15.0" fill="rgb(215,80,1)" rx="2" ry="2" />
<text  x="36.93" y="975.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="383.8" y="805" width="0.3" height="15.0" fill="rgb(253,165,1)" rx="2" ry="2" />
<text  x="386.77" y="815.5" ></text>
</g>
<g >
<title>std::copy&lt;char const*, char*&gt; (9 samples, 0.12%)</title><rect x="677.2" y="661" width="1.5" height="15.0" fill="rgb(233,195,16)" rx="2" ry="2" />
<text  x="680.20" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (3 samples, 0.04%)</title><rect x="842.7" y="997" width="0.5" height="15.0" fill="rgb(235,146,33)" rx="2" ry="2" />
<text  x="845.74" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1125.3" y="613" width="0.2" height="15.0" fill="rgb(218,170,3)" rx="2" ry="2" />
<text  x="1128.33" y="623.5" ></text>
</g>
<g >
<title>std::move&lt;std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="771.4" y="629" width="0.2" height="15.0" fill="rgb(240,54,32)" rx="2" ry="2" />
<text  x="774.45" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1004.6" y="661" width="0.1" height="15.0" fill="rgb(233,141,24)" rx="2" ry="2" />
<text  x="1007.57" y="671.5" ></text>
</g>
<g >
<title>ktime_get_real_seconds (1 samples, 0.01%)</title><rect x="413.8" y="101" width="0.2" height="15.0" fill="rgb(245,50,39)" rx="2" ry="2" />
<text  x="416.84" y="111.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="67.4" y="709" width="0.3" height="15.0" fill="rgb(254,12,10)" rx="2" ry="2" />
<text  x="70.39" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.8" y="565" width="0.2" height="15.0" fill="rgb(226,161,54)" rx="2" ry="2" />
<text  x="1122.84" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="247.3" y="293" width="0.2" height="15.0" fill="rgb(239,17,28)" rx="2" ry="2" />
<text  x="250.33" y="303.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::net::Poller*, std::default_delete&lt;muduo::net::Poller&gt; &gt; (1 samples, 0.01%)</title><rect x="258.2" y="773" width="0.1" height="15.0" fill="rgb(227,68,25)" rx="2" ry="2" />
<text  x="261.16" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="342.7" y="437" width="0.2" height="15.0" fill="rgb(217,55,2)" rx="2" ry="2" />
<text  x="345.71" y="447.5" ></text>
</g>
<g >
<title>ccx::Redis::redisReplyToString[abi:cxx11] (1 samples, 0.01%)</title><rect x="667.8" y="693" width="0.2" height="15.0" fill="rgb(244,14,30)" rx="2" ry="2" />
<text  x="670.82" y="703.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="317.8" y="757" width="0.2" height="15.0" fill="rgb(254,23,0)" rx="2" ry="2" />
<text  x="320.81" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (6 samples, 0.08%)</title><rect x="1159.8" y="709" width="0.9" height="15.0" fill="rgb(248,52,1)" rx="2" ry="2" />
<text  x="1162.77" y="719.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="927.6" y="741" width="0.3" height="15.0" fill="rgb(254,128,43)" rx="2" ry="2" />
<text  x="930.62" y="751.5" ></text>
</g>
<g >
<title>redisBufferWrite (4 samples, 0.05%)</title><rect x="957.5" y="981" width="0.7" height="15.0" fill="rgb(216,49,48)" rx="2" ry="2" />
<text  x="960.52" y="991.5" ></text>
</g>
<g >
<title>__fget (2 samples, 0.03%)</title><rect x="395.4" y="581" width="0.3" height="15.0" fill="rgb(211,173,51)" rx="2" ry="2" />
<text  x="398.41" y="591.5" ></text>
</g>
<g >
<title>redisBufferRead (3 samples, 0.04%)</title><rect x="989.5" y="997" width="0.5" height="15.0" fill="rgb(222,0,35)" rx="2" ry="2" />
<text  x="992.53" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1141.5" y="661" width="0.2" height="15.0" fill="rgb(218,31,31)" rx="2" ry="2" />
<text  x="1144.50" y="671.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="672.0" y="645" width="0.2" height="15.0" fill="rgb(253,220,18)" rx="2" ry="2" />
<text  x="675.02" y="655.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (3 samples, 0.04%)</title><rect x="1001.3" y="645" width="0.5" height="15.0" fill="rgb(206,104,13)" rx="2" ry="2" />
<text  x="1004.34" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="663.9" y="677" width="0.2" height="15.0" fill="rgb(246,58,22)" rx="2" ry="2" />
<text  x="666.94" y="687.5" ></text>
</g>
<g >
<title>do_readv (53 samples, 0.73%)</title><rect x="327.5" y="597" width="8.6" height="15.0" fill="rgb(225,1,24)" rx="2" ry="2" />
<text  x="330.51" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="112.2" y="661" width="0.1" height="15.0" fill="rgb(245,75,26)" rx="2" ry="2" />
<text  x="115.17" y="671.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdownInLoop (6 samples, 0.08%)</title><rect x="337.1" y="533" width="0.9" height="15.0" fill="rgb(212,3,49)" rx="2" ry="2" />
<text  x="340.05" y="543.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAsString[abi:cxx11] (1 samples, 0.01%)</title><rect x="1024.1" y="661" width="0.2" height="15.0" fill="rgb(251,94,43)" rx="2" ry="2" />
<text  x="1027.13" y="671.5" ></text>
</g>
<g >
<title>__schedule (95 samples, 1.30%)</title><rect x="514.1" y="757" width="15.3" height="15.0" fill="rgb(237,163,54)" rx="2" ry="2" />
<text  x="517.07" y="767.5" ></text>
</g>
<g >
<title>__fget (2 samples, 0.03%)</title><rect x="39.4" y="725" width="0.3" height="15.0" fill="rgb(222,198,1)" rx="2" ry="2" />
<text  x="42.42" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3 samples, 0.04%)</title><rect x="115.1" y="741" width="0.5" height="15.0" fill="rgb(233,35,51)" rx="2" ry="2" />
<text  x="118.08" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.07%)</title><rect x="92.9" y="517" width="0.8" height="15.0" fill="rgb(253,75,24)" rx="2" ry="2" />
<text  x="95.93" y="527.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="496.9" y="741" width="0.2" height="15.0" fill="rgb(247,65,51)" rx="2" ry="2" />
<text  x="499.94" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (1 samples, 0.01%)</title><rect x="1180.9" y="725" width="0.2" height="15.0" fill="rgb(210,106,34)" rx="2" ry="2" />
<text  x="1183.95" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1004.1" y="661" width="0.1" height="15.0" fill="rgb(225,164,39)" rx="2" ry="2" />
<text  x="1007.08" y="671.5" ></text>
</g>
<g >
<title>tcp_recvmsg (1 samples, 0.01%)</title><rect x="333.7" y="501" width="0.1" height="15.0" fill="rgb(238,28,27)" rx="2" ry="2" />
<text  x="336.66" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="88.2" y="309" width="0.4" height="15.0" fill="rgb(246,177,25)" rx="2" ry="2" />
<text  x="91.25" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="1130.2" y="645" width="0.1" height="15.0" fill="rgb(242,82,3)" rx="2" ry="2" />
<text  x="1133.18" y="655.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="118.8" y="789" width="0.2" height="15.0" fill="rgb(217,93,25)" rx="2" ry="2" />
<text  x="121.80" y="799.5" ></text>
</g>
<g >
<title>do_futex (10 samples, 0.14%)</title><rect x="992.4" y="741" width="1.7" height="15.0" fill="rgb(239,145,40)" rx="2" ry="2" />
<text  x="995.44" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="656.3" y="773" width="0.2" height="15.0" fill="rgb(231,191,41)" rx="2" ry="2" />
<text  x="659.34" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="1132.8" y="693" width="0.1" height="15.0" fill="rgb(243,117,1)" rx="2" ry="2" />
<text  x="1135.77" y="703.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1001.2" y="597" width="0.1" height="15.0" fill="rgb(213,25,33)" rx="2" ry="2" />
<text  x="1004.17" y="607.5" ></text>
</g>
<g >
<title>_int_malloc (46 samples, 0.63%)</title><rect x="964.0" y="997" width="7.4" height="15.0" fill="rgb(225,205,46)" rx="2" ry="2" />
<text  x="966.99" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="320.2" y="677" width="0.2" height="15.0" fill="rgb(208,196,48)" rx="2" ry="2" />
<text  x="323.24" y="687.5" ></text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.01%)</title><rect x="81.0" y="469" width="0.1" height="15.0" fill="rgb(227,175,7)" rx="2" ry="2" />
<text  x="83.97" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="248.6" y="805" width="0.2" height="15.0" fill="rgb(245,0,13)" rx="2" ry="2" />
<text  x="251.62" y="815.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (619 samples, 8.48%)</title><rect x="386.7" y="677" width="100.1" height="15.0" fill="rgb(234,35,6)" rx="2" ry="2" />
<text  x="389.68" y="687.5" >[libpthread-..</text>
</g>
<g >
<title>skb_free_head (4 samples, 0.05%)</title><rect x="80.0" y="421" width="0.6" height="15.0" fill="rgb(217,97,16)" rx="2" ry="2" />
<text  x="83.00" y="431.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::operator=&lt;muduo::net::TcpConnection&gt; (1 samples, 0.01%)</title><rect x="1163.0" y="709" width="0.2" height="15.0" fill="rgb(245,207,4)" rx="2" ry="2" />
<text  x="1166.00" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (646 samples, 8.85%)</title><rect x="139.3" y="645" width="104.5" height="15.0" fill="rgb(227,193,26)" rx="2" ry="2" />
<text  x="142.33" y="655.5" >do_syscall_64</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1018.1" y="629" width="0.2" height="15.0" fill="rgb(206,28,48)" rx="2" ry="2" />
<text  x="1021.15" y="639.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.01%)</title><rect x="335.4" y="549" width="0.2" height="15.0" fill="rgb(214,141,6)" rx="2" ry="2" />
<text  x="338.43" y="559.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="682.9" y="501" width="0.1" height="15.0" fill="rgb(208,20,25)" rx="2" ry="2" />
<text  x="685.85" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="32.1" y="917" width="0.2" height="15.0" fill="rgb(206,37,12)" rx="2" ry="2" />
<text  x="35.15" y="927.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (1 samples, 0.01%)</title><rect x="337.9" y="517" width="0.1" height="15.0" fill="rgb(215,144,4)" rx="2" ry="2" />
<text  x="340.86" y="527.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.01%)</title><rect x="922.8" y="517" width="0.1" height="15.0" fill="rgb(247,90,20)" rx="2" ry="2" />
<text  x="925.77" y="527.5" ></text>
</g>
<g >
<title>vmware_sched_clock (1 samples, 0.01%)</title><rect x="414.0" y="69" width="0.2" height="15.0" fill="rgb(240,65,15)" rx="2" ry="2" />
<text  x="417.00" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10 samples, 0.14%)</title><rect x="804.9" y="677" width="1.6" height="15.0" fill="rgb(223,198,35)" rx="2" ry="2" />
<text  x="807.91" y="687.5" ></text>
</g>
<g >
<title>ip_finish_output2 (153 samples, 2.10%)</title><rect x="555.3" y="661" width="24.7" height="15.0" fill="rgb(211,217,17)" rx="2" ry="2" />
<text  x="558.30" y="671.5" >i..</text>
</g>
<g >
<title>sys_write (261 samples, 3.58%)</title><rect x="888.2" y="933" width="42.2" height="15.0" fill="rgb(232,154,41)" rx="2" ry="2" />
<text  x="891.17" y="943.5" >sys..</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.01%)</title><rect x="513.8" y="805" width="0.1" height="15.0" fill="rgb(209,10,45)" rx="2" ry="2" />
<text  x="516.75" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.05%)</title><rect x="808.0" y="709" width="0.6" height="15.0" fill="rgb(206,15,9)" rx="2" ry="2" />
<text  x="810.98" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="501" width="0.2" height="15.0" fill="rgb(254,11,52)" rx="2" ry="2" />
<text  x="772.02" y="511.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="1016.9" y="645" width="0.1" height="15.0" fill="rgb(213,149,11)" rx="2" ry="2" />
<text  x="1019.86" y="655.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.01%)</title><rect x="165.0" y="133" width="0.2" height="15.0" fill="rgb(249,130,12)" rx="2" ry="2" />
<text  x="168.04" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="792.8" y="629" width="0.3" height="15.0" fill="rgb(209,120,21)" rx="2" ry="2" />
<text  x="795.79" y="639.5" ></text>
</g>
<g >
<title>rcu_bh_qs (1 samples, 0.01%)</title><rect x="479.8" y="293" width="0.2" height="15.0" fill="rgb(224,14,4)" rx="2" ry="2" />
<text  x="482.80" y="303.5" ></text>
</g>
<g >
<title>ccx::Redis::redisReplyToString[abi:cxx11] (1 samples, 0.01%)</title><rect x="1004.6" y="677" width="0.1" height="15.0" fill="rgb(210,185,28)" rx="2" ry="2" />
<text  x="1007.57" y="687.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="137.7" y="629" width="0.2" height="15.0" fill="rgb(218,32,46)" rx="2" ry="2" />
<text  x="140.72" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1010.4" y="629" width="0.2" height="15.0" fill="rgb(240,220,32)" rx="2" ry="2" />
<text  x="1013.39" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (2 samples, 0.03%)</title><rect x="254.6" y="789" width="0.3" height="15.0" fill="rgb(245,193,47)" rx="2" ry="2" />
<text  x="257.60" y="799.5" ></text>
</g>
<g >
<title>process_backlog (451 samples, 6.18%)</title><rect x="406.9" y="261" width="72.9" height="15.0" fill="rgb(249,171,2)" rx="2" ry="2" />
<text  x="409.89" y="271.5" >process_..</text>
</g>
<g >
<title>rb_erase (1 samples, 0.01%)</title><rect x="564.5" y="373" width="0.2" height="15.0" fill="rgb(213,226,35)" rx="2" ry="2" />
<text  x="567.51" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt;::_Iter_equals_val (1 samples, 0.01%)</title><rect x="779.9" y="677" width="0.1" height="15.0" fill="rgb(242,146,18)" rx="2" ry="2" />
<text  x="782.85" y="687.5" ></text>
</g>
<g >
<title>sys_newstat (1 samples, 0.01%)</title><rect x="836.0" y="693" width="0.1" height="15.0" fill="rgb(208,200,33)" rx="2" ry="2" />
<text  x="838.95" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output (485 samples, 6.64%)</title><rect x="159.2" y="373" width="78.4" height="15.0" fill="rgb(221,179,50)" rx="2" ry="2" />
<text  x="162.22" y="383.5" >ip_finish..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::net::Buffer*&gt;::_M_head (1 samples, 0.01%)</title><rect x="1184.5" y="757" width="0.2" height="15.0" fill="rgb(254,25,25)" rx="2" ry="2" />
<text  x="1187.50" y="767.5" ></text>
</g>
<g >
<title>apparmor_socket_sendmsg (3 samples, 0.04%)</title><rect x="485.0" y="517" width="0.5" height="15.0" fill="rgb(254,105,13)" rx="2" ry="2" />
<text  x="487.97" y="527.5" ></text>
</g>
<g >
<title>__fdget_pos (4 samples, 0.05%)</title><rect x="147.6" y="613" width="0.6" height="15.0" fill="rgb(208,125,21)" rx="2" ry="2" />
<text  x="150.58" y="623.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="1152.7" y="613" width="0.1" height="15.0" fill="rgb(240,21,31)" rx="2" ry="2" />
<text  x="1155.66" y="623.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="92.4" y="405" width="0.2" height="15.0" fill="rgb(224,175,39)" rx="2" ry="2" />
<text  x="95.45" y="415.5" ></text>
</g>
<g >
<title>ip_output (158 samples, 2.16%)</title><rect x="554.7" y="693" width="25.5" height="15.0" fill="rgb(219,184,14)" rx="2" ry="2" />
<text  x="557.65" y="703.5" >i..</text>
</g>
<g >
<title>std::__weak_count&lt; (2 samples, 0.03%)</title><rect x="92.0" y="517" width="0.3" height="15.0" fill="rgb(214,178,13)" rx="2" ry="2" />
<text  x="94.96" y="527.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="959.6" y="965" width="0.2" height="15.0" fill="rgb(245,220,17)" rx="2" ry="2" />
<text  x="962.63" y="975.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (39 samples, 0.53%)</title><rect x="118.8" y="805" width="6.3" height="15.0" fill="rgb(249,208,52)" rx="2" ry="2" />
<text  x="121.80" y="815.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1156.1" y="677" width="0.1" height="15.0" fill="rgb(208,118,38)" rx="2" ry="2" />
<text  x="1159.05" y="687.5" ></text>
</g>
<g >
<title>skb_entail (2 samples, 0.03%)</title><rect x="401.6" y="485" width="0.3" height="15.0" fill="rgb(250,82,51)" rx="2" ry="2" />
<text  x="404.56" y="495.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.01%)</title><rect x="82.4" y="389" width="0.2" height="15.0" fill="rgb(224,154,27)" rx="2" ry="2" />
<text  x="85.43" y="399.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::current (1 samples, 0.01%)</title><rect x="676.2" y="645" width="0.2" height="15.0" fill="rgb(223,217,22)" rx="2" ry="2" />
<text  x="679.23" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="817.2" y="661" width="0.3" height="15.0" fill="rgb(228,104,7)" rx="2" ry="2" />
<text  x="820.20" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="102.3" y="501" width="0.2" height="15.0" fill="rgb(213,76,24)" rx="2" ry="2" />
<text  x="105.31" y="511.5" ></text>
</g>
<g >
<title>inflateResetKeep (1 samples, 0.01%)</title><rect x="600.2" y="965" width="0.2" height="15.0" fill="rgb(228,75,45)" rx="2" ry="2" />
<text  x="603.24" y="975.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.01%)</title><rect x="353.4" y="501" width="0.1" height="15.0" fill="rgb(248,128,41)" rx="2" ry="2" />
<text  x="356.38" y="511.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="363.7" y="773" width="0.2" height="15.0" fill="rgb(205,193,9)" rx="2" ry="2" />
<text  x="366.73" y="783.5" ></text>
</g>
<g >
<title>uncompress (2 samples, 0.03%)</title><rect x="797.3" y="693" width="0.3" height="15.0" fill="rgb(211,226,34)" rx="2" ry="2" />
<text  x="800.31" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="350.3" y="533" width="0.2" height="15.0" fill="rgb(240,142,15)" rx="2" ry="2" />
<text  x="353.31" y="543.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (3 samples, 0.04%)</title><rect x="88.1" y="565" width="0.5" height="15.0" fill="rgb(246,169,31)" rx="2" ry="2" />
<text  x="91.08" y="575.5" ></text>
</g>
<g >
<title>vfs_getattr (9 samples, 0.12%)</title><rect x="834.5" y="629" width="1.5" height="15.0" fill="rgb(208,43,31)" rx="2" ry="2" />
<text  x="837.50" y="639.5" ></text>
</g>
<g >
<title>__slab_free (2 samples, 0.03%)</title><rect x="79.5" y="421" width="0.3" height="15.0" fill="rgb(225,167,25)" rx="2" ry="2" />
<text  x="82.52" y="431.5" ></text>
</g>
<g >
<title>filename_lookup (1 samples, 0.01%)</title><rect x="822.7" y="629" width="0.2" height="15.0" fill="rgb(252,154,37)" rx="2" ry="2" />
<text  x="825.69" y="639.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; &gt; (3 samples, 0.04%)</title><rect x="91.8" y="565" width="0.5" height="15.0" fill="rgb(217,17,49)" rx="2" ry="2" />
<text  x="94.80" y="575.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="317.7" y="757" width="0.1" height="15.0" fill="rgb(208,58,52)" rx="2" ry="2" />
<text  x="320.65" y="767.5" ></text>
</g>
<g >
<title>__kfree_skb (11 samples, 0.15%)</title><rect x="78.9" y="469" width="1.7" height="15.0" fill="rgb(240,32,6)" rx="2" ry="2" />
<text  x="81.87" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="135.6" y="789" width="0.2" height="15.0" fill="rgb(247,91,28)" rx="2" ry="2" />
<text  x="138.61" y="799.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (422 samples, 5.78%)</title><rect x="165.8" y="133" width="68.3" height="15.0" fill="rgb(227,129,12)" rx="2" ry="2" />
<text  x="168.85" y="143.5" >tcp_v4_..</text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="338.7" y="661" width="0.1" height="15.0" fill="rgb(223,225,25)" rx="2" ry="2" />
<text  x="341.67" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="318.8" y="757" width="0.1" height="15.0" fill="rgb(245,41,25)" rx="2" ry="2" />
<text  x="321.78" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.14%)</title><rect x="283.9" y="997" width="1.6" height="15.0" fill="rgb(234,70,38)" rx="2" ry="2" />
<text  x="286.86" y="1007.5" ></text>
</g>
<g >
<title>muduo::detail::ThreadData::runInThread (1,354 samples, 18.55%)</title><rect x="286.8" y="965" width="218.9" height="15.0" fill="rgb(207,150,30)" rx="2" ry="2" />
<text  x="289.77" y="975.5" >muduo::detail::ThreadData::r..</text>
</g>
<g >
<title>std::_Bind&lt;void  (1,372 samples, 18.80%)</title><rect x="37.5" y="917" width="221.8" height="15.0" fill="rgb(207,98,32)" rx="2" ry="2" />
<text  x="40.48" y="927.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>sys_read (182 samples, 2.49%)</title><rect x="845.7" y="949" width="29.4" height="15.0" fill="rgb(228,165,13)" rx="2" ry="2" />
<text  x="848.65" y="959.5" >sy..</text>
</g>
<g >
<title>muduo::Logger::Logger (14 samples, 0.19%)</title><rect x="799.1" y="709" width="2.3" height="15.0" fill="rgb(205,120,36)" rx="2" ry="2" />
<text  x="802.09" y="719.5" ></text>
</g>
<g >
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="234.1" y="133" width="0.3" height="15.0" fill="rgb(244,216,40)" rx="2" ry="2" />
<text  x="237.07" y="143.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="354.3" y="469" width="0.2" height="15.0" fill="rgb(227,101,52)" rx="2" ry="2" />
<text  x="357.35" y="479.5" ></text>
</g>
<g >
<title>__xstat64 (101 samples, 1.38%)</title><rect x="819.8" y="725" width="16.3" height="15.0" fill="rgb(235,63,6)" rx="2" ry="2" />
<text  x="822.78" y="735.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (2 samples, 0.03%)</title><rect x="769.7" y="629" width="0.3" height="15.0" fill="rgb(217,18,8)" rx="2" ry="2" />
<text  x="772.67" y="639.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="657.1" y="773" width="0.5" height="15.0" fill="rgb(221,57,29)" rx="2" ry="2" />
<text  x="660.15" y="783.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="311.2" y="821" width="0.1" height="15.0" fill="rgb(225,154,22)" rx="2" ry="2" />
<text  x="314.18" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9 samples, 0.12%)</title><rect x="804.9" y="661" width="1.5" height="15.0" fill="rgb(215,179,1)" rx="2" ry="2" />
<text  x="807.91" y="671.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="508.3" y="901" width="0.1" height="15.0" fill="rgb(239,107,34)" rx="2" ry="2" />
<text  x="511.25" y="911.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="368.7" y="773" width="0.2" height="15.0" fill="rgb(213,206,21)" rx="2" ry="2" />
<text  x="371.74" y="783.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="269.3" y="949" width="0.2" height="15.0" fill="rgb(214,58,27)" rx="2" ry="2" />
<text  x="272.31" y="959.5" ></text>
</g>
<g >
<title>StaticServer::onParser (1 samples, 0.01%)</title><rect x="998.3" y="757" width="0.1" height="15.0" fill="rgb(220,165,28)" rx="2" ry="2" />
<text  x="1001.26" y="767.5" ></text>
</g>
<g >
<title>boost::typeindex::type_id&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&gt; (1 samples, 0.01%)</title><rect x="340.4" y="533" width="0.2" height="15.0" fill="rgb(212,35,40)" rx="2" ry="2" />
<text  x="343.45" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (3 samples, 0.04%)</title><rect x="814.8" y="709" width="0.5" height="15.0" fill="rgb(214,128,7)" rx="2" ry="2" />
<text  x="817.77" y="719.5" ></text>
</g>
<g >
<title>tcp_v4_md5_lookup (1 samples, 0.01%)</title><rect x="239.2" y="421" width="0.2" height="15.0" fill="rgb(218,79,5)" rx="2" ry="2" />
<text  x="242.24" y="431.5" ></text>
</g>
<g >
<title>muduo::Logger::SourceFile::SourceFile&lt;56&gt; (1 samples, 0.01%)</title><rect x="1188.5" y="917" width="0.2" height="15.0" fill="rgb(207,179,7)" rx="2" ry="2" />
<text  x="1191.55" y="927.5" ></text>
</g>
<g >
<title>raw_local_deliver (1 samples, 0.01%)</title><rect x="903.5" y="453" width="0.2" height="15.0" fill="rgb(224,135,28)" rx="2" ry="2" />
<text  x="906.53" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="376.3" y="725" width="0.2" height="15.0" fill="rgb(222,128,5)" rx="2" ry="2" />
<text  x="379.34" y="735.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::readFd (2 samples, 0.03%)</title><rect x="70.5" y="693" width="0.3" height="15.0" fill="rgb(239,220,28)" rx="2" ry="2" />
<text  x="73.46" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="114.4" y="773" width="0.2" height="15.0" fill="rgb(207,176,18)" rx="2" ry="2" />
<text  x="117.44" y="783.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~tuple (1 samples, 0.01%)</title><rect x="247.3" y="645" width="0.2" height="15.0" fill="rgb(222,138,1)" rx="2" ry="2" />
<text  x="250.33" y="655.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="763.2" y="501" width="0.2" height="15.0" fill="rgb(244,58,2)" rx="2" ry="2" />
<text  x="766.20" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (554 samples, 7.59%)</title><rect x="1028.3" y="613" width="89.6" height="15.0" fill="rgb(237,47,42)" rx="2" ry="2" />
<text  x="1031.33" y="623.5" >entry_SYSC..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;muduo::net::Channel* const*, std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="257.0" y="789" width="0.2" height="15.0" fill="rgb(206,3,34)" rx="2" ry="2" />
<text  x="260.03" y="799.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, true&gt; (1 samples, 0.01%)</title><rect x="98.9" y="549" width="0.2" height="15.0" fill="rgb(243,206,41)" rx="2" ry="2" />
<text  x="101.92" y="559.5" ></text>
</g>
<g >
<title>minmax_subwin_update (1 samples, 0.01%)</title><rect x="911.3" y="357" width="0.1" height="15.0" fill="rgb(227,35,41)" rx="2" ry="2" />
<text  x="914.29" y="367.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (1 samples, 0.01%)</title><rect x="553.2" y="757" width="0.2" height="15.0" fill="rgb(214,1,27)" rx="2" ry="2" />
<text  x="556.20" y="767.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="88.2" y="469" width="0.4" height="15.0" fill="rgb(252,148,39)" rx="2" ry="2" />
<text  x="91.25" y="479.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.01%)</title><rect x="295.7" y="741" width="0.1" height="15.0" fill="rgb(205,213,51)" rx="2" ry="2" />
<text  x="298.66" y="751.5" ></text>
</g>
<g >
<title>_IO_vsprintf (1 samples, 0.01%)</title><rect x="1163.2" y="725" width="0.1" height="15.0" fill="rgb(214,29,13)" rx="2" ry="2" />
<text  x="1166.16" y="735.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 0.88%)</title><rect x="260.9" y="981" width="10.4" height="15.0" fill="rgb(225,145,22)" rx="2" ry="2" />
<text  x="263.91" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (4 samples, 0.05%)</title><rect x="372.8" y="757" width="0.6" height="15.0" fill="rgb(254,202,20)" rx="2" ry="2" />
<text  x="375.78" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1178.5" y="677" width="0.2" height="15.0" fill="rgb(236,213,36)" rx="2" ry="2" />
<text  x="1181.52" y="687.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="1187.9" y="709" width="0.2" height="15.0" fill="rgb(231,89,50)" rx="2" ry="2" />
<text  x="1190.90" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="784.9" y="629" width="0.1" height="15.0" fill="rgb(229,181,33)" rx="2" ry="2" />
<text  x="787.87" y="639.5" ></text>
</g>
<g >
<title>kfree (3 samples, 0.04%)</title><rect x="330.6" y="405" width="0.5" height="15.0" fill="rgb(225,92,48)" rx="2" ry="2" />
<text  x="333.58" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="809.9" y="661" width="0.5" height="15.0" fill="rgb(227,37,44)" rx="2" ry="2" />
<text  x="812.92" y="671.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (1 samples, 0.01%)</title><rect x="337.5" y="485" width="0.2" height="15.0" fill="rgb(240,147,53)" rx="2" ry="2" />
<text  x="340.54" y="495.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="843.2" y="981" width="0.2" height="15.0" fill="rgb(217,23,7)" rx="2" ry="2" />
<text  x="846.23" y="991.5" ></text>
</g>
<g >
<title>kfree_skbmem (3 samples, 0.04%)</title><rect x="329.9" y="453" width="0.5" height="15.0" fill="rgb(239,138,52)" rx="2" ry="2" />
<text  x="332.94" y="463.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="310.9" y="773" width="0.3" height="15.0" fill="rgb(206,3,12)" rx="2" ry="2" />
<text  x="313.86" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="652.6" y="981" width="0.2" height="15.0" fill="rgb(214,186,32)" rx="2" ry="2" />
<text  x="655.62" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="493.7" y="757" width="0.2" height="15.0" fill="rgb(250,145,49)" rx="2" ry="2" />
<text  x="496.70" y="767.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (2 samples, 0.03%)</title><rect x="1132.3" y="677" width="0.3" height="15.0" fill="rgb(244,20,22)" rx="2" ry="2" />
<text  x="1135.29" y="687.5" ></text>
</g>
<g >
<title>muduo::net::sockets::read (1 samples, 0.01%)</title><rect x="111.0" y="693" width="0.2" height="15.0" fill="rgb(219,125,11)" rx="2" ry="2" />
<text  x="114.04" y="703.5" ></text>
</g>
<g >
<title>__ip_local_out (1 samples, 0.01%)</title><rect x="554.5" y="693" width="0.2" height="15.0" fill="rgb(241,42,28)" rx="2" ry="2" />
<text  x="557.49" y="703.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="251.9" y="725" width="0.1" height="15.0" fill="rgb(215,146,12)" rx="2" ry="2" />
<text  x="254.85" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (5 samples, 0.07%)</title><rect x="793.3" y="613" width="0.8" height="15.0" fill="rgb(240,29,8)" rx="2" ry="2" />
<text  x="796.27" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="248.6" y="773" width="0.2" height="15.0" fill="rgb(253,7,18)" rx="2" ry="2" />
<text  x="251.62" y="783.5" ></text>
</g>
<g >
<title>malloc_consolidate (21 samples, 0.29%)</title><rect x="614.0" y="981" width="3.4" height="15.0" fill="rgb(245,88,53)" rx="2" ry="2" />
<text  x="616.98" y="991.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="809.8" y="661" width="0.1" height="15.0" fill="rgb(211,90,15)" rx="2" ry="2" />
<text  x="812.76" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="1181.6" y="725" width="0.2" height="15.0" fill="rgb(232,199,39)" rx="2" ry="2" />
<text  x="1184.59" y="735.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="151.3" y="469" width="0.2" height="15.0" fill="rgb(208,136,2)" rx="2" ry="2" />
<text  x="154.30" y="479.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue (1 samples, 0.01%)</title><rect x="911.4" y="405" width="0.2" height="15.0" fill="rgb(249,192,35)" rx="2" ry="2" />
<text  x="914.45" y="415.5" ></text>
</g>
<g >
<title>pagecache_get_page (12 samples, 0.16%)</title><rect x="10.6" y="789" width="2.0" height="15.0" fill="rgb(252,2,5)" rx="2" ry="2" />
<text  x="13.65" y="799.5" ></text>
</g>
<g >
<title>realloc (2 samples, 0.03%)</title><rect x="957.2" y="981" width="0.3" height="15.0" fill="rgb(231,97,32)" rx="2" ry="2" />
<text  x="960.20" y="991.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="672.2" y="661" width="0.1" height="15.0" fill="rgb(238,166,15)" rx="2" ry="2" />
<text  x="675.18" y="671.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (11 samples, 0.15%)</title><rect x="116.7" y="805" width="1.8" height="15.0" fill="rgb(216,35,25)" rx="2" ry="2" />
<text  x="119.70" y="815.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="248.1" y="741" width="0.2" height="15.0" fill="rgb(216,29,23)" rx="2" ry="2" />
<text  x="251.13" y="751.5" ></text>
</g>
<g >
<title>tcp_sendmsg (233 samples, 3.19%)</title><rect x="891.1" y="821" width="37.6" height="15.0" fill="rgb(224,90,41)" rx="2" ry="2" />
<text  x="894.08" y="831.5" >tcp..</text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="60.3" y="821" width="0.5" height="15.0" fill="rgb(226,173,46)" rx="2" ry="2" />
<text  x="63.28" y="831.5" ></text>
</g>
<g >
<title>malloc_consolidate (2 samples, 0.03%)</title><rect x="650.8" y="997" width="0.4" height="15.0" fill="rgb(238,124,17)" rx="2" ry="2" />
<text  x="653.84" y="1007.5" ></text>
</g>
<g >
<title>epoll_wait (3 samples, 0.04%)</title><rect x="310.7" y="821" width="0.5" height="15.0" fill="rgb(235,135,12)" rx="2" ry="2" />
<text  x="313.70" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (1 samples, 0.01%)</title><rect x="503.2" y="821" width="0.2" height="15.0" fill="rgb(231,185,26)" rx="2" ry="2" />
<text  x="506.24" y="831.5" ></text>
</g>
<g >
<title>eventfd_write (452 samples, 6.19%)</title><rect x="690.9" y="533" width="73.1" height="15.0" fill="rgb(248,213,32)" rx="2" ry="2" />
<text  x="693.94" y="543.5" >eventfd_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data@plt (1 samples, 0.01%)</title><rect x="808.6" y="709" width="0.2" height="15.0" fill="rgb(252,65,54)" rx="2" ry="2" />
<text  x="811.63" y="719.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (1 samples, 0.01%)</title><rect x="88.1" y="453" width="0.1" height="15.0" fill="rgb(235,156,50)" rx="2" ry="2" />
<text  x="91.08" y="463.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="652.6" y="933" width="0.2" height="15.0" fill="rgb(233,7,52)" rx="2" ry="2" />
<text  x="655.62" y="943.5" ></text>
</g>
<g >
<title>tcp_update_pacing_rate (1 samples, 0.01%)</title><rect x="921.5" y="405" width="0.1" height="15.0" fill="rgb(219,221,31)" rx="2" ry="2" />
<text  x="924.47" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (3 samples, 0.04%)</title><rect x="94.6" y="533" width="0.4" height="15.0" fill="rgb(205,189,3)" rx="2" ry="2" />
<text  x="97.55" y="543.5" ></text>
</g>
<g >
<title>common_perm (1 samples, 0.01%)</title><rect x="1177.1" y="565" width="0.1" height="15.0" fill="rgb(218,84,40)" rx="2" ry="2" />
<text  x="1180.07" y="575.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="110.2" y="597" width="0.2" height="15.0" fill="rgb(209,218,16)" rx="2" ry="2" />
<text  x="113.23" y="607.5" ></text>
</g>
<g >
<title>walk_component (18 samples, 0.25%)</title><rect x="1170.4" y="565" width="2.9" height="15.0" fill="rgb(248,5,40)" rx="2" ry="2" />
<text  x="1173.44" y="575.5" ></text>
</g>
<g >
<title>iov_iter_init (1 samples, 0.01%)</title><rect x="547.4" y="885" width="0.1" height="15.0" fill="rgb(218,113,52)" rx="2" ry="2" />
<text  x="550.38" y="895.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (4 samples, 0.05%)</title><rect x="661.7" y="645" width="0.6" height="15.0" fill="rgb(248,142,46)" rx="2" ry="2" />
<text  x="664.68" y="655.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="77.3" y="581" width="0.1" height="15.0" fill="rgb(215,147,25)" rx="2" ry="2" />
<text  x="80.25" y="591.5" ></text>
</g>
<g >
<title>__fget_light (3 samples, 0.04%)</title><rect x="1030.8" y="549" width="0.4" height="15.0" fill="rgb(228,203,49)" rx="2" ry="2" />
<text  x="1033.76" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="258.5" y="821" width="0.1" height="15.0" fill="rgb(228,35,2)" rx="2" ry="2" />
<text  x="261.48" y="831.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (4 samples, 0.05%)</title><rect x="247.8" y="773" width="0.7" height="15.0" fill="rgb(224,134,25)" rx="2" ry="2" />
<text  x="250.81" y="783.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (1 samples, 0.01%)</title><rect x="337.5" y="501" width="0.2" height="15.0" fill="rgb(229,24,8)" rx="2" ry="2" />
<text  x="340.54" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9 samples, 0.12%)</title><rect x="99.7" y="533" width="1.5" height="15.0" fill="rgb(249,92,38)" rx="2" ry="2" />
<text  x="102.72" y="543.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="512.1" y="805" width="0.2" height="15.0" fill="rgb(246,49,48)" rx="2" ry="2" />
<text  x="515.13" y="815.5" ></text>
</g>
<g >
<title>rcu_bh_qs (1 samples, 0.01%)</title><rect x="576.8" y="597" width="0.2" height="15.0" fill="rgb(227,214,51)" rx="2" ry="2" />
<text  x="579.80" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="89.9" y="629" width="0.1" height="15.0" fill="rgb(243,71,53)" rx="2" ry="2" />
<text  x="92.86" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::_M_head (1 samples, 0.01%)</title><rect x="338.8" y="549" width="0.2" height="15.0" fill="rgb(238,7,42)" rx="2" ry="2" />
<text  x="341.83" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1184.3" y="693" width="0.2" height="15.0" fill="rgb(252,114,23)" rx="2" ry="2" />
<text  x="1187.34" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="1154.6" y="661" width="0.5" height="15.0" fill="rgb(205,174,54)" rx="2" ry="2" />
<text  x="1157.60" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="505.8" y="981" width="0.2" height="15.0" fill="rgb(247,98,48)" rx="2" ry="2" />
<text  x="508.83" y="991.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::readFd (82 samples, 1.12%)</title><rect x="74.7" y="677" width="13.2" height="15.0" fill="rgb(252,3,25)" rx="2" ry="2" />
<text  x="77.67" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="22.4" y="933" width="0.2" height="15.0" fill="rgb(214,90,0)" rx="2" ry="2" />
<text  x="25.45" y="943.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (447 samples, 6.12%)</title><rect x="162.1" y="165" width="72.3" height="15.0" fill="rgb(246,47,20)" rx="2" ry="2" />
<text  x="165.13" y="175.5" >ip_local..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1 samples, 0.01%)</title><rect x="795.1" y="645" width="0.1" height="15.0" fill="rgb(250,9,50)" rx="2" ry="2" />
<text  x="798.05" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (3 samples, 0.04%)</title><rect x="658.4" y="709" width="0.5" height="15.0" fill="rgb(227,129,0)" rx="2" ry="2" />
<text  x="661.44" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="87.0" y="613" width="0.1" height="15.0" fill="rgb(232,46,19)" rx="2" ry="2" />
<text  x="89.95" y="623.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="607.4" y="917" width="0.1" height="15.0" fill="rgb(227,59,48)" rx="2" ry="2" />
<text  x="610.36" y="927.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (271 samples, 3.71%)</title><rect x="69.3" y="757" width="43.8" height="15.0" fill="rgb(239,157,29)" rx="2" ry="2" />
<text  x="72.33" y="767.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (3 samples, 0.04%)</title><rect x="794.6" y="645" width="0.5" height="15.0" fill="rgb(228,139,13)" rx="2" ry="2" />
<text  x="797.57" y="655.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::getContext (1 samples, 0.01%)</title><rect x="356.0" y="581" width="0.1" height="15.0" fill="rgb(221,52,48)" rx="2" ry="2" />
<text  x="358.97" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="492.6" y="757" width="0.1" height="15.0" fill="rgb(226,149,11)" rx="2" ry="2" />
<text  x="495.57" y="767.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="850.3" y="757" width="0.2" height="15.0" fill="rgb(240,104,54)" rx="2" ry="2" />
<text  x="853.34" y="767.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="337.1" y="597" width="0.9" height="15.0" fill="rgb(214,27,21)" rx="2" ry="2" />
<text  x="340.05" y="607.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="99.4" y="517" width="0.2" height="15.0" fill="rgb(215,219,46)" rx="2" ry="2" />
<text  x="102.40" y="527.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="91.8" y="549" width="0.2" height="15.0" fill="rgb(213,202,8)" rx="2" ry="2" />
<text  x="94.80" y="559.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="28.8" y="837" width="0.1" height="15.0" fill="rgb(237,97,38)" rx="2" ry="2" />
<text  x="31.75" y="847.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="316.8" y="709" width="0.2" height="15.0" fill="rgb(247,176,51)" rx="2" ry="2" />
<text  x="319.84" y="719.5" ></text>
</g>
<g >
<title>rcu_bh_qs (1 samples, 0.01%)</title><rect x="923.6" y="597" width="0.1" height="15.0" fill="rgb(206,132,49)" rx="2" ry="2" />
<text  x="926.57" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;StaticServer::Entry&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="354.2" y="453" width="0.1" height="15.0" fill="rgb(247,77,20)" rx="2" ry="2" />
<text  x="357.19" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::TcpConnection*, false&gt;::_Head_base&lt;muduo::net::TcpConnection*&gt; (1 samples, 0.01%)</title><rect x="1123.6" y="581" width="0.1" height="15.0" fill="rgb(227,149,40)" rx="2" ry="2" />
<text  x="1126.56" y="591.5" ></text>
</g>
<g >
<title>__fdget_pos (2 samples, 0.03%)</title><rect x="687.9" y="581" width="0.3" height="15.0" fill="rgb(244,212,20)" rx="2" ry="2" />
<text  x="690.87" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="994.5" y="757" width="0.2" height="15.0" fill="rgb(242,0,6)" rx="2" ry="2" />
<text  x="997.55" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1143.3" y="661" width="0.1" height="15.0" fill="rgb(224,203,40)" rx="2" ry="2" />
<text  x="1146.28" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (2 samples, 0.03%)</title><rect x="318.6" y="789" width="0.3" height="15.0" fill="rgb(211,94,2)" rx="2" ry="2" />
<text  x="321.62" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="502.1" y="805" width="0.2" height="15.0" fill="rgb(215,145,12)" rx="2" ry="2" />
<text  x="505.11" y="815.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init@plt (1 samples, 0.01%)</title><rect x="266.1" y="965" width="0.1" height="15.0" fill="rgb(254,16,47)" rx="2" ry="2" />
<text  x="269.08" y="975.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="279.3" y="981" width="0.2" height="15.0" fill="rgb(231,105,35)" rx="2" ry="2" />
<text  x="282.34" y="991.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;char&gt; (1 samples, 0.01%)</title><rect x="678.3" y="613" width="0.2" height="15.0" fill="rgb(207,199,18)" rx="2" ry="2" />
<text  x="681.33" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;char&gt; (1 samples, 0.01%)</title><rect x="372.6" y="677" width="0.2" height="15.0" fill="rgb(248,13,18)" rx="2" ry="2" />
<text  x="375.62" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="619.8" y="965" width="0.2" height="15.0" fill="rgb(205,76,13)" rx="2" ry="2" />
<text  x="622.80" y="975.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="763.8" y="469" width="0.2" height="15.0" fill="rgb(234,169,23)" rx="2" ry="2" />
<text  x="766.85" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::TcpConnection*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="358.6" y="693" width="0.1" height="15.0" fill="rgb(212,132,46)" rx="2" ry="2" />
<text  x="361.55" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1153.3" y="677" width="0.2" height="15.0" fill="rgb(245,178,0)" rx="2" ry="2" />
<text  x="1156.30" y="687.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (4 samples, 0.05%)</title><rect x="483.0" y="421" width="0.7" height="15.0" fill="rgb(238,103,29)" rx="2" ry="2" />
<text  x="486.03" y="431.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (2 samples, 0.03%)</title><rect x="385.6" y="629" width="0.3" height="15.0" fill="rgb(241,202,14)" rx="2" ry="2" />
<text  x="388.55" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="66.3" y="725" width="0.1" height="15.0" fill="rgb(219,22,25)" rx="2" ry="2" />
<text  x="69.26" y="735.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="92.4" y="469" width="0.2" height="15.0" fill="rgb(253,221,20)" rx="2" ry="2" />
<text  x="95.45" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (5 samples, 0.07%)</title><rect x="995.0" y="597" width="0.8" height="15.0" fill="rgb(243,1,40)" rx="2" ry="2" />
<text  x="998.03" y="607.5" ></text>
</g>
<g >
<title>filename_lookup (35 samples, 0.48%)</title><rect x="1168.3" y="613" width="5.7" height="15.0" fill="rgb(215,171,13)" rx="2" ry="2" />
<text  x="1171.34" y="623.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="671.5" y="645" width="0.2" height="15.0" fill="rgb(252,152,16)" rx="2" ry="2" />
<text  x="674.54" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="87.8" y="661" width="0.1" height="15.0" fill="rgb(232,181,30)" rx="2" ry="2" />
<text  x="90.76" y="671.5" ></text>
</g>
<g >
<title>__check_object_size (2 samples, 0.03%)</title><rect x="847.1" y="821" width="0.3" height="15.0" fill="rgb(216,166,10)" rx="2" ry="2" />
<text  x="850.11" y="831.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (2 samples, 0.03%)</title><rect x="895.0" y="741" width="0.3" height="15.0" fill="rgb(212,130,17)" rx="2" ry="2" />
<text  x="897.96" y="751.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="549" width="0.2" height="15.0" fill="rgb(205,169,10)" rx="2" ry="2" />
<text  x="1123.81" y="559.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (127 samples, 1.74%)</title><rect x="556.4" y="613" width="20.6" height="15.0" fill="rgb(233,226,9)" rx="2" ry="2" />
<text  x="559.43" y="623.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="497.7" y="773" width="0.2" height="15.0" fill="rgb(231,20,9)" rx="2" ry="2" />
<text  x="500.75" y="783.5" ></text>
</g>
<g >
<title>tcp_v4_send_check (1 samples, 0.01%)</title><rect x="483.8" y="437" width="0.2" height="15.0" fill="rgb(252,38,3)" rx="2" ry="2" />
<text  x="486.84" y="447.5" ></text>
</g>
<g >
<title>__kfree_skb (6 samples, 0.08%)</title><rect x="563.5" y="373" width="1.0" height="15.0" fill="rgb(210,164,2)" rx="2" ry="2" />
<text  x="566.54" y="383.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="128.0" y="757" width="0.2" height="15.0" fill="rgb(210,192,31)" rx="2" ry="2" />
<text  x="131.02" y="767.5" ></text>
</g>
<g >
<title>ext4_da_write_end (8 samples, 0.11%)</title><rect x="12.6" y="821" width="1.3" height="15.0" fill="rgb(249,77,3)" rx="2" ry="2" />
<text  x="15.59" y="831.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="486.9" y="677" width="0.2" height="15.0" fill="rgb(234,139,42)" rx="2" ry="2" />
<text  x="489.91" y="687.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="1154.3" y="661" width="0.1" height="15.0" fill="rgb(212,64,1)" rx="2" ry="2" />
<text  x="1157.27" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::ThreadData::runInThread (1,174 samples, 16.08%)</title><rect x="652.9" y="965" width="189.8" height="15.0" fill="rgb(240,26,44)" rx="2" ry="2" />
<text  x="655.95" y="975.5" >muduo::detail::ThreadDat..</text>
</g>
<g >
<title>muduo::Logger::SourceFile::SourceFile&lt;56&gt; (1 samples, 0.01%)</title><rect x="125.1" y="805" width="0.2" height="15.0" fill="rgb(209,76,12)" rx="2" ry="2" />
<text  x="128.11" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="806.2" y="629" width="0.2" height="15.0" fill="rgb(253,203,38)" rx="2" ry="2" />
<text  x="809.20" y="639.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="652.6" y="917" width="0.2" height="15.0" fill="rgb(241,14,15)" rx="2" ry="2" />
<text  x="655.62" y="927.5" ></text>
</g>
<g >
<title>sys_write (3 samples, 0.04%)</title><rect x="1117.4" y="597" width="0.5" height="15.0" fill="rgb(240,152,33)" rx="2" ry="2" />
<text  x="1120.41" y="607.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="315.4" y="709" width="0.1" height="15.0" fill="rgb(232,102,52)" rx="2" ry="2" />
<text  x="318.39" y="719.5" ></text>
</g>
<g >
<title>sk_free (2 samples, 0.03%)</title><rect x="578.7" y="581" width="0.4" height="15.0" fill="rgb(250,99,52)" rx="2" ry="2" />
<text  x="581.74" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="1162.4" y="645" width="0.1" height="15.0" fill="rgb(246,124,28)" rx="2" ry="2" />
<text  x="1165.36" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (4 samples, 0.05%)</title><rect x="114.9" y="757" width="0.7" height="15.0" fill="rgb(233,47,8)" rx="2" ry="2" />
<text  x="117.92" y="767.5" ></text>
</g>
<g >
<title>new_slab (2 samples, 0.03%)</title><rect x="10.2" y="693" width="0.3" height="15.0" fill="rgb(236,161,5)" rx="2" ry="2" />
<text  x="13.16" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1123.9" y="645" width="0.1" height="15.0" fill="rgb(240,223,19)" rx="2" ry="2" />
<text  x="1126.88" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="682.4" y="629" width="0.1" height="15.0" fill="rgb(227,148,5)" rx="2" ry="2" />
<text  x="685.37" y="639.5" ></text>
</g>
<g >
<title>eventfd_write (514 samples, 7.04%)</title><rect x="1032.1" y="533" width="83.0" height="15.0" fill="rgb(254,134,38)" rx="2" ry="2" />
<text  x="1035.05" y="543.5" >eventfd_w..</text>
</g>
<g >
<title>std::copy&lt;char const*, char*&gt; (12 samples, 0.16%)</title><rect x="1019.0" y="661" width="1.9" height="15.0" fill="rgb(225,202,22)" rx="2" ry="2" />
<text  x="1021.96" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (8 samples, 0.11%)</title><rect x="776.0" y="661" width="1.3" height="15.0" fill="rgb(214,185,31)" rx="2" ry="2" />
<text  x="778.97" y="671.5" ></text>
</g>
<g >
<title>std::search&lt;char*, char const*&gt; (9 samples, 0.12%)</title><rect x="661.0" y="693" width="1.5" height="15.0" fill="rgb(213,27,54)" rx="2" ry="2" />
<text  x="664.03" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.4" y="597" width="0.1" height="15.0" fill="rgb(245,47,37)" rx="2" ry="2" />
<text  x="1122.35" y="607.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (2 samples, 0.03%)</title><rect x="927.3" y="741" width="0.3" height="15.0" fill="rgb(232,128,22)" rx="2" ry="2" />
<text  x="930.29" y="751.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.01%)</title><rect x="151.1" y="469" width="0.2" height="15.0" fill="rgb(238,152,47)" rx="2" ry="2" />
<text  x="154.13" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1127.4" y="677" width="0.2" height="15.0" fill="rgb(208,124,14)" rx="2" ry="2" />
<text  x="1130.44" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="954.5" y="933" width="0.1" height="15.0" fill="rgb(214,50,48)" rx="2" ry="2" />
<text  x="957.45" y="943.5" ></text>
</g>
<g >
<title>tcp_rcv_state_process (1 samples, 0.01%)</title><rect x="337.2" y="373" width="0.2" height="15.0" fill="rgb(233,96,28)" rx="2" ry="2" />
<text  x="340.21" y="383.5" ></text>
</g>
<g >
<title>uncompress (4 samples, 0.05%)</title><rect x="1142.3" y="693" width="0.7" height="15.0" fill="rgb(243,141,23)" rx="2" ry="2" />
<text  x="1145.31" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.01%)</title><rect x="807.8" y="709" width="0.2" height="15.0" fill="rgb(220,170,29)" rx="2" ry="2" />
<text  x="810.82" y="719.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="1145.4" y="645" width="0.3" height="15.0" fill="rgb(237,93,32)" rx="2" ry="2" />
<text  x="1148.38" y="655.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::lock (3 samples, 0.04%)</title><rect x="1162.2" y="709" width="0.5" height="15.0" fill="rgb(240,66,31)" rx="2" ry="2" />
<text  x="1165.19" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (2 samples, 0.03%)</title><rect x="770.5" y="645" width="0.3" height="15.0" fill="rgb(213,12,23)" rx="2" ry="2" />
<text  x="773.48" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (1 samples, 0.01%)</title><rect x="118.5" y="805" width="0.1" height="15.0" fill="rgb(215,70,1)" rx="2" ry="2" />
<text  x="121.48" y="815.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (37 samples, 0.51%)</title><rect x="77.7" y="549" width="6.0" height="15.0" fill="rgb(250,20,44)" rx="2" ry="2" />
<text  x="80.74" y="559.5" ></text>
</g>
<g >
<title>std::locale::~locale (1 samples, 0.01%)</title><rect x="280.0" y="981" width="0.1" height="15.0" fill="rgb(251,47,12)" rx="2" ry="2" />
<text  x="282.98" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::current (1 samples, 0.01%)</title><rect x="363.1" y="789" width="0.1" height="15.0" fill="rgb(228,41,17)" rx="2" ry="2" />
<text  x="366.08" y="799.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.04%)</title><rect x="282.7" y="997" width="0.5" height="15.0" fill="rgb(232,217,0)" rx="2" ry="2" />
<text  x="285.73" y="1007.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1 samples, 0.01%)</title><rect x="1134.2" y="581" width="0.2" height="15.0" fill="rgb(247,64,8)" rx="2" ry="2" />
<text  x="1137.23" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1125.3" y="597" width="0.2" height="15.0" fill="rgb(207,163,50)" rx="2" ry="2" />
<text  x="1128.33" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;void  (119 samples, 1.63%)</title><rect x="338.7" y="677" width="19.2" height="15.0" fill="rgb(223,178,21)" rx="2" ry="2" />
<text  x="341.67" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="360.2" y="773" width="0.1" height="15.0" fill="rgb(238,1,50)" rx="2" ry="2" />
<text  x="363.17" y="783.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt; (1 samples, 0.01%)</title><rect x="243.9" y="613" width="0.2" height="15.0" fill="rgb(227,128,42)" rx="2" ry="2" />
<text  x="246.93" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="617.1" y="965" width="0.3" height="15.0" fill="rgb(254,48,31)" rx="2" ry="2" />
<text  x="620.06" y="975.5" ></text>
</g>
<g >
<title>sdscatlen (1 samples, 0.01%)</title><rect x="652.6" y="997" width="0.2" height="15.0" fill="rgb(232,5,3)" rx="2" ry="2" />
<text  x="655.62" y="1007.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="128.2" y="757" width="0.1" height="15.0" fill="rgb(223,165,49)" rx="2" ry="2" />
<text  x="131.18" y="767.5" ></text>
</g>
<g >
<title>minmax_running_min (1 samples, 0.01%)</title><rect x="911.0" y="373" width="0.1" height="15.0" fill="rgb(249,181,8)" rx="2" ry="2" />
<text  x="913.96" y="383.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::_Placeholder&lt;1&gt;, true&gt;::_M_head (1 samples, 0.01%)</title><rect x="112.0" y="693" width="0.2" height="15.0" fill="rgb(241,124,2)" rx="2" ry="2" />
<text  x="115.01" y="703.5" ></text>
</g>
<g >
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="82.4" y="405" width="0.3" height="15.0" fill="rgb(218,112,40)" rx="2" ry="2" />
<text  x="85.43" y="415.5" ></text>
</g>
<g >
<title>ioread8_rep (1 samples, 0.01%)</title><rect x="40.7" y="645" width="0.2" height="15.0" fill="rgb(207,27,23)" rx="2" ry="2" />
<text  x="43.72" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1180.6" y="677" width="0.2" height="15.0" fill="rgb(226,39,25)" rx="2" ry="2" />
<text  x="1183.62" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="807.5" y="661" width="0.2" height="15.0" fill="rgb(229,189,47)" rx="2" ry="2" />
<text  x="810.50" y="671.5" ></text>
</g>
<g >
<title>ip_finish_output2 (2 samples, 0.03%)</title><rect x="158.9" y="373" width="0.3" height="15.0" fill="rgb(246,66,35)" rx="2" ry="2" />
<text  x="161.89" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="953.2" y="949" width="0.1" height="15.0" fill="rgb(244,19,38)" rx="2" ry="2" />
<text  x="956.16" y="959.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="613.7" y="981" width="0.1" height="15.0" fill="rgb(251,23,3)" rx="2" ry="2" />
<text  x="616.66" y="991.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl (2 samples, 0.03%)</title><rect x="771.1" y="597" width="0.3" height="15.0" fill="rgb(233,157,41)" rx="2" ry="2" />
<text  x="774.12" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="1158.5" y="645" width="0.1" height="15.0" fill="rgb(231,122,27)" rx="2" ry="2" />
<text  x="1161.48" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,372 samples, 18.80%)</title><rect x="37.5" y="901" width="221.8" height="15.0" fill="rgb(235,37,12)" rx="2" ry="2" />
<text  x="40.48" y="911.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale@plt (1 samples, 0.01%)</title><rect x="506.0" y="997" width="0.2" height="15.0" fill="rgb(219,0,51)" rx="2" ry="2" />
<text  x="508.99" y="1007.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="780.3" y="613" width="0.2" height="15.0" fill="rgb(212,139,16)" rx="2" ry="2" />
<text  x="783.34" y="623.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,198 samples, 16.41%)</title><rect x="991.5" y="885" width="193.7" height="15.0" fill="rgb(236,225,24)" rx="2" ry="2" />
<text  x="994.47" y="895.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::_Destroy_aux&lt;true&gt;::__destroy&lt;muduo::net::Channel**&gt; (1 samples, 0.01%)</title><rect x="504.7" y="773" width="0.2" height="15.0" fill="rgb(218,58,22)" rx="2" ry="2" />
<text  x="507.70" y="783.5" ></text>
</g>
<g >
<title>std::__search&lt;char*, char const*, __gnu_cxx::__ops::_Iter_equal_to_iter&gt; (8 samples, 0.11%)</title><rect x="661.2" y="677" width="1.3" height="15.0" fill="rgb(219,22,46)" rx="2" ry="2" />
<text  x="664.19" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="675.3" y="629" width="0.1" height="15.0" fill="rgb(220,0,29)" rx="2" ry="2" />
<text  x="678.26" y="639.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="512.0" y="821" width="0.1" height="15.0" fill="rgb(252,83,35)" rx="2" ry="2" />
<text  x="514.97" y="831.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (3 samples, 0.04%)</title><rect x="495.6" y="773" width="0.5" height="15.0" fill="rgb(247,151,45)" rx="2" ry="2" />
<text  x="498.64" y="783.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="901.3" y="581" width="0.1" height="15.0" fill="rgb(236,74,8)" rx="2" ry="2" />
<text  x="904.26" y="591.5" ></text>
</g>
<g >
<title>muduo::net::Channel::fd (1 samples, 0.01%)</title><rect x="130.4" y="789" width="0.2" height="15.0" fill="rgb(239,81,4)" rx="2" ry="2" />
<text  x="133.44" y="799.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="253.5" y="757" width="0.1" height="15.0" fill="rgb(212,37,14)" rx="2" ry="2" />
<text  x="256.47" y="767.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="81.0" y="437" width="0.1" height="15.0" fill="rgb(211,143,6)" rx="2" ry="2" />
<text  x="83.97" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="812.7" y="693" width="0.3" height="15.0" fill="rgb(249,37,54)" rx="2" ry="2" />
<text  x="815.67" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::~FixedBuffer (1 samples, 0.01%)</title><rect x="87.9" y="613" width="0.2" height="15.0" fill="rgb(241,138,53)" rx="2" ry="2" />
<text  x="90.92" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1005.5" y="677" width="0.2" height="15.0" fill="rgb(254,147,17)" rx="2" ry="2" />
<text  x="1008.54" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="330.3" y="373" width="0.1" height="15.0" fill="rgb(229,30,52)" rx="2" ry="2" />
<text  x="333.26" y="383.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;3&gt;, false, true&gt;::operator (1 samples, 0.01%)</title><rect x="90.3" y="613" width="0.2" height="15.0" fill="rgb(217,159,11)" rx="2" ry="2" />
<text  x="93.35" y="623.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="373.4" y="773" width="0.2" height="15.0" fill="rgb(218,135,6)" rx="2" ry="2" />
<text  x="376.43" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (11 samples, 0.15%)</title><rect x="679.3" y="661" width="1.8" height="15.0" fill="rgb(241,187,15)" rx="2" ry="2" />
<text  x="682.30" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.03%)</title><rect x="1180.0" y="725" width="0.3" height="15.0" fill="rgb(253,31,52)" rx="2" ry="2" />
<text  x="1182.98" y="735.5" ></text>
</g>
<g >
<title>swake_up (1 samples, 0.01%)</title><rect x="330.3" y="277" width="0.1" height="15.0" fill="rgb(209,119,45)" rx="2" ry="2" />
<text  x="333.26" y="287.5" ></text>
</g>
<g >
<title>sk_wait_data (103 samples, 1.41%)</title><rect x="512.8" y="821" width="16.6" height="15.0" fill="rgb(249,145,14)" rx="2" ry="2" />
<text  x="515.78" y="831.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="954.5" y="949" width="0.1" height="15.0" fill="rgb(241,184,34)" rx="2" ry="2" />
<text  x="957.45" y="959.5" ></text>
</g>
<g >
<title>inet_sendmsg (548 samples, 7.51%)</title><rect x="396.4" y="533" width="88.6" height="15.0" fill="rgb(228,4,34)" rx="2" ry="2" />
<text  x="399.38" y="543.5" >inet_sendmsg</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="368.3" y="725" width="0.1" height="15.0" fill="rgb(219,114,52)" rx="2" ry="2" />
<text  x="371.25" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="361.0" y="789" width="0.1" height="15.0" fill="rgb(214,118,4)" rx="2" ry="2" />
<text  x="363.98" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="1132.1" y="629" width="0.2" height="15.0" fill="rgb(216,196,27)" rx="2" ry="2" />
<text  x="1135.12" y="639.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (1 samples, 0.01%)</title><rect x="496.8" y="757" width="0.1" height="15.0" fill="rgb(216,124,17)" rx="2" ry="2" />
<text  x="499.78" y="767.5" ></text>
</g>
<g >
<title>sock_def_readable (61 samples, 0.84%)</title><rect x="565.6" y="389" width="9.9" height="15.0" fill="rgb(234,137,3)" rx="2" ry="2" />
<text  x="568.65" y="399.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="531.5" y="821" width="0.2" height="15.0" fill="rgb(235,162,15)" rx="2" ry="2" />
<text  x="534.53" y="831.5" ></text>
</g>
<g >
<title>skb_release_head_state (1 samples, 0.01%)</title><rect x="511.8" y="805" width="0.2" height="15.0" fill="rgb(221,187,30)" rx="2" ry="2" />
<text  x="514.81" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="94.2" y="533" width="0.2" height="15.0" fill="rgb(246,222,46)" rx="2" ry="2" />
<text  x="97.23" y="543.5" ></text>
</g>
<g >
<title>start_thread (1,174 samples, 16.08%)</title><rect x="652.9" y="997" width="189.8" height="15.0" fill="rgb(208,201,26)" rx="2" ry="2" />
<text  x="655.95" y="1007.5" >start_thread</text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="381.3" y="805" width="0.2" height="15.0" fill="rgb(247,116,22)" rx="2" ry="2" />
<text  x="384.35" y="815.5" ></text>
</g>
<g >
<title>Logging (29 samples, 0.40%)</title><rect x="10.0" y="1013" width="4.7" height="15.0" fill="rgb(253,210,28)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (3 samples, 0.04%)</title><rect x="485.0" y="501" width="0.5" height="15.0" fill="rgb(240,159,1)" rx="2" ry="2" />
<text  x="487.97" y="511.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="992.0" y="725" width="0.1" height="15.0" fill="rgb(215,210,45)" rx="2" ry="2" />
<text  x="994.96" y="735.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (1 samples, 0.01%)</title><rect x="385.4" y="693" width="0.2" height="15.0" fill="rgb(250,22,48)" rx="2" ry="2" />
<text  x="388.39" y="703.5" ></text>
</g>
<g >
<title>tcp_parse_md5sig_option (1 samples, 0.01%)</title><rect x="411.1" y="133" width="0.2" height="15.0" fill="rgb(211,131,35)" rx="2" ry="2" />
<text  x="414.09" y="143.5" ></text>
</g>
<g >
<title>muduo::detail::startThread (1,198 samples, 16.41%)</title><rect x="991.5" y="981" width="193.7" height="15.0" fill="rgb(244,116,20)" rx="2" ry="2" />
<text  x="994.47" y="991.5" >muduo::detail::startThread</text>
</g>
<g >
<title>__fdget (2 samples, 0.03%)</title><rect x="39.4" y="757" width="0.3" height="15.0" fill="rgb(211,17,9)" rx="2" ry="2" />
<text  x="42.42" y="767.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="246.0" y="677" width="0.2" height="15.0" fill="rgb(252,0,10)" rx="2" ry="2" />
<text  x="249.03" y="687.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (1 samples, 0.01%)</title><rect x="318.5" y="773" width="0.1" height="15.0" fill="rgb(226,17,54)" rx="2" ry="2" />
<text  x="321.46" y="783.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="1187.4" y="629" width="0.2" height="15.0" fill="rgb(226,149,43)" rx="2" ry="2" />
<text  x="1190.41" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.2" y="613" width="0.2" height="15.0" fill="rgb(226,82,36)" rx="2" ry="2" />
<text  x="1122.19" y="623.5" ></text>
</g>
<g >
<title>tcp_recvmsg (3 samples, 0.04%)</title><rect x="83.2" y="501" width="0.5" height="15.0" fill="rgb(223,209,52)" rx="2" ry="2" />
<text  x="86.23" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="29.7" y="965" width="0.2" height="15.0" fill="rgb(213,191,18)" rx="2" ry="2" />
<text  x="32.72" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="805.6" y="581" width="0.1" height="15.0" fill="rgb(240,55,39)" rx="2" ry="2" />
<text  x="808.56" y="591.5" ></text>
</g>
<g >
<title>futex_wake (10 samples, 0.14%)</title><rect x="992.4" y="725" width="1.7" height="15.0" fill="rgb(240,111,11)" rx="2" ry="2" />
<text  x="995.44" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3 samples, 0.04%)</title><rect x="1141.0" y="629" width="0.5" height="15.0" fill="rgb(246,147,0)" rx="2" ry="2" />
<text  x="1144.02" y="639.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (2 samples, 0.03%)</title><rect x="130.0" y="789" width="0.3" height="15.0" fill="rgb(233,115,25)" rx="2" ry="2" />
<text  x="132.96" y="799.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="496.8" y="741" width="0.1" height="15.0" fill="rgb(234,58,2)" rx="2" ry="2" />
<text  x="499.78" y="751.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="850.3" y="725" width="0.2" height="15.0" fill="rgb(227,208,22)" rx="2" ry="2" />
<text  x="853.34" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::operator (3 samples, 0.04%)</title><rect x="504.1" y="821" width="0.4" height="15.0" fill="rgb(237,74,6)" rx="2" ry="2" />
<text  x="507.05" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (3 samples, 0.04%)</title><rect x="1188.7" y="901" width="0.5" height="15.0" fill="rgb(253,24,10)" rx="2" ry="2" />
<text  x="1191.71" y="911.5" ></text>
</g>
<g >
<title>wait_woken (1 samples, 0.01%)</title><rect x="531.7" y="821" width="0.2" height="15.0" fill="rgb(233,118,21)" rx="2" ry="2" />
<text  x="534.70" y="831.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.01%)</title><rect x="151.1" y="453" width="0.2" height="15.0" fill="rgb(242,171,16)" rx="2" ry="2" />
<text  x="154.13" y="463.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="93.1" y="405" width="0.6" height="15.0" fill="rgb(212,44,24)" rx="2" ry="2" />
<text  x="96.10" y="415.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (1 samples, 0.01%)</title><rect x="550.1" y="789" width="0.2" height="15.0" fill="rgb(230,42,6)" rx="2" ry="2" />
<text  x="553.13" y="799.5" ></text>
</g>
<g >
<title>[libhiredis.so.0.13] (1 samples, 0.01%)</title><rect x="506.6" y="997" width="0.2" height="15.0" fill="rgb(247,220,47)" rx="2" ry="2" />
<text  x="509.64" y="1007.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.01%)</title><rect x="158.4" y="405" width="0.2" height="15.0" fill="rgb(209,103,47)" rx="2" ry="2" />
<text  x="161.41" y="415.5" ></text>
</g>
<g >
<title>eth_type_trans (1 samples, 0.01%)</title><rect x="924.9" y="581" width="0.1" height="15.0" fill="rgb(207,18,17)" rx="2" ry="2" />
<text  x="927.87" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="342.7" y="405" width="0.2" height="15.0" fill="rgb(246,6,20)" rx="2" ry="2" />
<text  x="345.71" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="379.7" y="741" width="0.2" height="15.0" fill="rgb(233,52,6)" rx="2" ry="2" />
<text  x="382.73" y="751.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.01%)</title><rect x="798.8" y="709" width="0.1" height="15.0" fill="rgb(250,185,38)" rx="2" ry="2" />
<text  x="801.77" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="352.9" y="405" width="0.2" height="15.0" fill="rgb(214,188,12)" rx="2" ry="2" />
<text  x="355.89" y="415.5" ></text>
</g>
<g >
<title>Parser::setConn (1 samples, 0.01%)</title><rect x="1163.0" y="725" width="0.2" height="15.0" fill="rgb(250,112,7)" rx="2" ry="2" />
<text  x="1166.00" y="735.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (19 samples, 0.26%)</title><rect x="670.1" y="693" width="3.1" height="15.0" fill="rgb(210,224,10)" rx="2" ry="2" />
<text  x="673.08" y="703.5" ></text>
</g>
<g >
<title>asyncOutput (5 samples, 0.07%)</title><rect x="316.2" y="773" width="0.8" height="15.0" fill="rgb(205,167,4)" rx="2" ry="2" />
<text  x="319.20" y="783.5" ></text>
</g>
<g >
<title>malloc_consolidate (8 samples, 0.11%)</title><rect x="988.1" y="997" width="1.3" height="15.0" fill="rgb(221,34,41)" rx="2" ry="2" />
<text  x="991.08" y="1007.5" ></text>
</g>
<g >
<title>tcp_small_queue_check.isra.29 (1 samples, 0.01%)</title><rect x="896.6" y="757" width="0.1" height="15.0" fill="rgb(250,214,32)" rx="2" ry="2" />
<text  x="899.58" y="767.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (2 samples, 0.03%)</title><rect x="804.6" y="709" width="0.3" height="15.0" fill="rgb(251,159,29)" rx="2" ry="2" />
<text  x="807.59" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.01%)</title><rect x="349.8" y="549" width="0.2" height="15.0" fill="rgb(226,43,32)" rx="2" ry="2" />
<text  x="352.82" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="265.4" y="949" width="0.2" height="15.0" fill="rgb(223,184,38)" rx="2" ry="2" />
<text  x="268.43" y="959.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (2 samples, 0.03%)</title><rect x="88.2" y="357" width="0.4" height="15.0" fill="rgb(252,24,30)" rx="2" ry="2" />
<text  x="91.25" y="367.5" ></text>
</g>
<g >
<title>rw_copy_check_uvector (3 samples, 0.04%)</title><rect x="335.6" y="549" width="0.5" height="15.0" fill="rgb(241,120,9)" rx="2" ry="2" />
<text  x="338.60" y="559.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::_Placeholder&lt;1&gt;, true&gt;::_Head_base&lt;std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="347.9" y="453" width="0.1" height="15.0" fill="rgb(207,36,17)" rx="2" ry="2" />
<text  x="350.88" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="137.9" y="645" width="0.3" height="15.0" fill="rgb(232,136,29)" rx="2" ry="2" />
<text  x="140.88" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::logLevel (1 samples, 0.01%)</title><rect x="673.2" y="693" width="0.1" height="15.0" fill="rgb(225,45,0)" rx="2" ry="2" />
<text  x="676.15" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="104.6" y="501" width="0.1" height="15.0" fill="rgb(236,101,29)" rx="2" ry="2" />
<text  x="107.57" y="511.5" ></text>
</g>
<g >
<title>ksize (1 samples, 0.01%)</title><rect x="156.3" y="469" width="0.2" height="15.0" fill="rgb(209,51,2)" rx="2" ry="2" />
<text  x="159.31" y="479.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="654.2" y="805" width="0.2" height="15.0" fill="rgb(234,168,1)" rx="2" ry="2" />
<text  x="657.24" y="815.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (7 samples, 0.10%)</title><rect x="1012.2" y="661" width="1.1" height="15.0" fill="rgb(246,40,33)" rx="2" ry="2" />
<text  x="1015.17" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="1016.2" y="661" width="0.2" height="15.0" fill="rgb(247,103,31)" rx="2" ry="2" />
<text  x="1019.21" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (6 samples, 0.08%)</title><rect x="337.1" y="613" width="0.9" height="15.0" fill="rgb(248,210,41)" rx="2" ry="2" />
<text  x="340.05" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="1162.4" y="677" width="0.1" height="15.0" fill="rgb(221,51,23)" rx="2" ry="2" />
<text  x="1165.36" y="687.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="674.1" y="565" width="0.2" height="15.0" fill="rgb(222,166,50)" rx="2" ry="2" />
<text  x="677.12" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6 samples, 0.08%)</title><rect x="1139.7" y="645" width="1.0" height="15.0" fill="rgb(209,190,15)" rx="2" ry="2" />
<text  x="1142.72" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="248.0" y="709" width="0.1" height="15.0" fill="rgb(216,172,22)" rx="2" ry="2" />
<text  x="250.97" y="719.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.01%)</title><rect x="656.3" y="757" width="0.2" height="15.0" fill="rgb(240,203,8)" rx="2" ry="2" />
<text  x="659.34" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="67.7" y="725" width="0.2" height="15.0" fill="rgb(226,7,0)" rx="2" ry="2" />
<text  x="70.71" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="135.0" y="805" width="0.3" height="15.0" fill="rgb(205,188,50)" rx="2" ry="2" />
<text  x="137.97" y="815.5" ></text>
</g>
<g >
<title>rw_verify_area (5 samples, 0.07%)</title><rect x="532.2" y="917" width="0.8" height="15.0" fill="rgb(231,126,48)" rx="2" ry="2" />
<text  x="535.18" y="927.5" ></text>
</g>
<g >
<title>[libc-2.23.so] (74 samples, 1.01%)</title><rect x="75.2" y="661" width="11.9" height="15.0" fill="rgb(238,200,30)" rx="2" ry="2" />
<text  x="78.15" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (248 samples, 3.40%)</title><rect x="319.6" y="773" width="40.1" height="15.0" fill="rgb(210,109,28)" rx="2" ry="2" />
<text  x="322.59" y="783.5" >std..</text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.15%)</title><rect x="683.7" y="597" width="1.7" height="15.0" fill="rgb(232,108,44)" rx="2" ry="2" />
<text  x="686.66" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::TcpConnection*, false&gt;::_Head_base&lt;muduo::net::TcpConnection*&gt; (1 samples, 0.01%)</title><rect x="1121.8" y="629" width="0.1" height="15.0" fill="rgb(247,93,23)" rx="2" ry="2" />
<text  x="1124.78" y="639.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (3 samples, 0.04%)</title><rect x="1125.5" y="645" width="0.5" height="15.0" fill="rgb(239,10,24)" rx="2" ry="2" />
<text  x="1128.50" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="354.5" y="517" width="0.3" height="15.0" fill="rgb(222,166,16)" rx="2" ry="2" />
<text  x="357.51" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="1018.0" y="645" width="0.1" height="15.0" fill="rgb(221,225,53)" rx="2" ry="2" />
<text  x="1020.99" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="769.8" y="597" width="0.2" height="15.0" fill="rgb(241,50,25)" rx="2" ry="2" />
<text  x="772.83" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="315.1" y="709" width="0.1" height="15.0" fill="rgb(252,93,33)" rx="2" ry="2" />
<text  x="318.06" y="719.5" ></text>
</g>
<g >
<title>sys_futex (11 samples, 0.15%)</title><rect x="683.7" y="581" width="1.7" height="15.0" fill="rgb(245,135,27)" rx="2" ry="2" />
<text  x="686.66" y="591.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (3 samples, 0.04%)</title><rect x="345.8" y="565" width="0.5" height="15.0" fill="rgb(211,2,50)" rx="2" ry="2" />
<text  x="348.78" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (2 samples, 0.03%)</title><rect x="338.3" y="661" width="0.4" height="15.0" fill="rgb(243,116,10)" rx="2" ry="2" />
<text  x="341.34" y="671.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,354 samples, 18.55%)</title><rect x="286.8" y="885" width="218.9" height="15.0" fill="rgb(209,206,16)" rx="2" ry="2" />
<text  x="289.77" y="895.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="770.0" y="629" width="0.2" height="15.0" fill="rgb(211,223,4)" rx="2" ry="2" />
<text  x="772.99" y="639.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (2 samples, 0.03%)</title><rect x="576.5" y="549" width="0.3" height="15.0" fill="rgb(251,44,17)" rx="2" ry="2" />
<text  x="579.48" y="559.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (17 samples, 0.23%)</title><rect x="496.8" y="805" width="2.7" height="15.0" fill="rgb(207,161,7)" rx="2" ry="2" />
<text  x="499.78" y="815.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::loop (1,369 samples, 18.76%)</title><rect x="37.8" y="837" width="221.3" height="15.0" fill="rgb(233,195,27)" rx="2" ry="2" />
<text  x="40.81" y="847.5" >muduo::net::EventLoop::loop</text>
</g>
<g >
<title>muduo::net::Buffer::append (19 samples, 0.26%)</title><rect x="1017.8" y="677" width="3.1" height="15.0" fill="rgb(237,154,46)" rx="2" ry="2" />
<text  x="1020.83" y="687.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnection (2 samples, 0.03%)</title><rect x="88.2" y="405" width="0.4" height="15.0" fill="rgb(209,101,27)" rx="2" ry="2" />
<text  x="91.25" y="415.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="355.8" y="549" width="0.2" height="15.0" fill="rgb(246,98,11)" rx="2" ry="2" />
<text  x="358.80" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="337.1" y="485" width="0.4" height="15.0" fill="rgb(233,133,11)" rx="2" ry="2" />
<text  x="340.05" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1152.7" y="693" width="0.1" height="15.0" fill="rgb(219,136,25)" rx="2" ry="2" />
<text  x="1155.66" y="703.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="122.0" y="757" width="0.2" height="15.0" fill="rgb(225,138,26)" rx="2" ry="2" />
<text  x="125.03" y="767.5" ></text>
</g>
<g >
<title>netif_rx (3 samples, 0.04%)</title><rect x="578.3" y="581" width="0.4" height="15.0" fill="rgb(241,76,15)" rx="2" ry="2" />
<text  x="581.26" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1 samples, 0.01%)</title><rect x="1185.8" y="997" width="0.2" height="15.0" fill="rgb(243,76,34)" rx="2" ry="2" />
<text  x="1188.80" y="1007.5" ></text>
</g>
<g >
<title>wake_up_q (4 samples, 0.05%)</title><rect x="341.1" y="437" width="0.6" height="15.0" fill="rgb(235,54,34)" rx="2" ry="2" />
<text  x="344.09" y="447.5" ></text>
</g>
<g >
<title>__tcp_v4_send_check (1 samples, 0.01%)</title><rect x="898.2" y="725" width="0.2" height="15.0" fill="rgb(229,220,42)" rx="2" ry="2" />
<text  x="901.19" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (7 samples, 0.10%)</title><rect x="491.9" y="789" width="1.2" height="15.0" fill="rgb(221,89,26)" rx="2" ry="2" />
<text  x="494.93" y="799.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.01%)</title><rect x="997.8" y="485" width="0.1" height="15.0" fill="rgb(227,141,48)" rx="2" ry="2" />
<text  x="1000.78" y="495.5" ></text>
</g>
<g >
<title>muduo::net::Channel::reventsToString[abi:cxx11] (14 samples, 0.19%)</title><rect x="499.5" y="805" width="2.3" height="15.0" fill="rgb(243,106,30)" rx="2" ry="2" />
<text  x="502.52" y="815.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="248.9" y="789" width="0.4" height="15.0" fill="rgb(205,227,48)" rx="2" ry="2" />
<text  x="251.94" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="504.2" y="789" width="0.2" height="15.0" fill="rgb(212,83,32)" rx="2" ry="2" />
<text  x="507.21" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.07%)</title><rect x="92.9" y="501" width="0.8" height="15.0" fill="rgb(222,130,40)" rx="2" ry="2" />
<text  x="95.93" y="511.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="821.4" y="645" width="0.2" height="15.0" fill="rgb(242,12,43)" rx="2" ry="2" />
<text  x="824.40" y="655.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEventWithGuard (10 samples, 0.14%)</title><rect x="1186.8" y="917" width="1.6" height="15.0" fill="rgb(244,122,33)" rx="2" ry="2" />
<text  x="1189.77" y="927.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="504.4" y="773" width="0.1" height="15.0" fill="rgb(219,146,0)" rx="2" ry="2" />
<text  x="507.37" y="783.5" ></text>
</g>
<g >
<title>select_estimate_accuracy (1 samples, 0.01%)</title><rect x="307.8" y="741" width="0.2" height="15.0" fill="rgb(228,14,25)" rx="2" ry="2" />
<text  x="310.79" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.16%)</title><rect x="1025.3" y="597" width="1.9" height="15.0" fill="rgb(221,96,15)" rx="2" ry="2" />
<text  x="1028.26" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="107.2" y="501" width="0.1" height="15.0" fill="rgb(217,20,35)" rx="2" ry="2" />
<text  x="110.16" y="511.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="1167.7" y="565" width="0.2" height="15.0" fill="rgb(218,58,25)" rx="2" ry="2" />
<text  x="1170.69" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="110.9" y="613" width="0.1" height="15.0" fill="rgb(243,220,45)" rx="2" ry="2" />
<text  x="113.88" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="258.2" y="789" width="0.1" height="15.0" fill="rgb(207,31,26)" rx="2" ry="2" />
<text  x="261.16" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="338.3" y="645" width="0.4" height="15.0" fill="rgb(244,152,38)" rx="2" ry="2" />
<text  x="341.34" y="655.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="94.1" y="437" width="0.1" height="15.0" fill="rgb(205,68,13)" rx="2" ry="2" />
<text  x="97.07" y="447.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="654.1" y="837" width="0.1" height="15.0" fill="rgb(216,36,1)" rx="2" ry="2" />
<text  x="657.08" y="847.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3 samples, 0.04%)</title><rect x="1188.7" y="917" width="0.5" height="15.0" fill="rgb(211,1,45)" rx="2" ry="2" />
<text  x="1191.71" y="927.5" ></text>
</g>
<g >
<title>sock_sendmsg (551 samples, 7.55%)</title><rect x="396.4" y="549" width="89.1" height="15.0" fill="rgb(215,76,51)" rx="2" ry="2" />
<text  x="399.38" y="559.5" >sock_sendmsg</text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="330.3" y="357" width="0.1" height="15.0" fill="rgb(241,20,23)" rx="2" ry="2" />
<text  x="333.26" y="367.5" ></text>
</g>
<g >
<title>tcp_close (1 samples, 0.01%)</title><rect x="658.8" y="389" width="0.1" height="15.0" fill="rgb(220,95,30)" rx="2" ry="2" />
<text  x="661.77" y="399.5" ></text>
</g>
<g >
<title>net_rx_action (458 samples, 6.27%)</title><rect x="160.8" y="277" width="74.1" height="15.0" fill="rgb(254,157,51)" rx="2" ry="2" />
<text  x="163.83" y="287.5" >net_rx_a..</text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.01%)</title><rect x="22.4" y="965" width="0.2" height="15.0" fill="rgb(214,69,22)" rx="2" ry="2" />
<text  x="25.45" y="975.5" ></text>
</g>
<g >
<title>vfs_read (149 samples, 2.04%)</title><rect x="508.9" y="933" width="24.1" height="15.0" fill="rgb(249,70,38)" rx="2" ry="2" />
<text  x="511.90" y="943.5" >v..</text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.01%)</title><rect x="1113.9" y="437" width="0.1" height="15.0" fill="rgb(225,61,48)" rx="2" ry="2" />
<text  x="1116.86" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::tuple (2 samples, 0.03%)</title><rect x="1123.6" y="613" width="0.3" height="15.0" fill="rgb(230,1,19)" rx="2" ry="2" />
<text  x="1126.56" y="623.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (3 samples, 0.04%)</title><rect x="265.6" y="965" width="0.5" height="15.0" fill="rgb(247,125,1)" rx="2" ry="2" />
<text  x="268.59" y="975.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="633.4" y="981" width="0.1" height="15.0" fill="rgb(218,105,40)" rx="2" ry="2" />
<text  x="636.38" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.01%)</title><rect x="785.0" y="645" width="0.2" height="15.0" fill="rgb(235,31,7)" rx="2" ry="2" />
<text  x="788.03" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="838.7" y="725" width="0.2" height="15.0" fill="rgb(227,199,41)" rx="2" ry="2" />
<text  x="841.70" y="735.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="252.2" y="789" width="0.1" height="15.0" fill="rgb(213,156,8)" rx="2" ry="2" />
<text  x="255.18" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="814.6" y="709" width="0.2" height="15.0" fill="rgb(221,88,52)" rx="2" ry="2" />
<text  x="817.61" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="28.6" y="933" width="0.2" height="15.0" fill="rgb(241,110,0)" rx="2" ry="2" />
<text  x="31.59" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2 samples, 0.03%)</title><rect x="1155.9" y="709" width="0.3" height="15.0" fill="rgb(254,19,19)" rx="2" ry="2" />
<text  x="1158.89" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="337.9" y="501" width="0.1" height="15.0" fill="rgb(225,176,41)" rx="2" ry="2" />
<text  x="340.86" y="511.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="765.6" y="517" width="0.2" height="15.0" fill="rgb(235,2,43)" rx="2" ry="2" />
<text  x="768.63" y="527.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="367.0" y="725" width="0.1" height="15.0" fill="rgb(213,156,1)" rx="2" ry="2" />
<text  x="369.96" y="735.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (2 samples, 0.03%)</title><rect x="500.7" y="789" width="0.3" height="15.0" fill="rgb(206,152,19)" rx="2" ry="2" />
<text  x="503.66" y="799.5" ></text>
</g>
<g >
<title>from_kuid_munged (1 samples, 0.01%)</title><rect x="1167.5" y="629" width="0.2" height="15.0" fill="rgb(213,196,28)" rx="2" ry="2" />
<text  x="1170.53" y="639.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt;::replace (1 samples, 0.01%)</title><rect x="1188.2" y="629" width="0.2" height="15.0" fill="rgb(226,84,0)" rx="2" ry="2" />
<text  x="1191.22" y="639.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (12 samples, 0.16%)</title><rect x="673.3" y="661" width="2.0" height="15.0" fill="rgb(242,114,26)" rx="2" ry="2" />
<text  x="676.32" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt; (1 samples, 0.01%)</title><rect x="487.2" y="629" width="0.2" height="15.0" fill="rgb(223,81,23)" rx="2" ry="2" />
<text  x="490.24" y="639.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="1154.1" y="661" width="0.2" height="15.0" fill="rgb(245,94,26)" rx="2" ry="2" />
<text  x="1157.11" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (30 samples, 0.41%)</title><rect x="1136.0" y="693" width="4.9" height="15.0" fill="rgb(214,44,2)" rx="2" ry="2" />
<text  x="1139.00" y="703.5" ></text>
</g>
<g >
<title>tcp_sendmsg (571 samples, 7.82%)</title><rect x="150.5" y="517" width="92.3" height="15.0" fill="rgb(243,148,21)" rx="2" ry="2" />
<text  x="153.49" y="527.5" >tcp_sendmsg</text>
</g>
<g >
<title>__libc_start_main (19 samples, 0.26%)</title><rect x="1186.6" y="981" width="3.1" height="15.0" fill="rgb(217,42,53)" rx="2" ry="2" />
<text  x="1189.61" y="991.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::sendInLoop (656 samples, 8.99%)</title><rect x="138.2" y="709" width="106.1" height="15.0" fill="rgb(243,166,50)" rx="2" ry="2" />
<text  x="141.20" y="719.5" >muduo::net::..</text>
</g>
<g >
<title>dst_release (2 samples, 0.03%)</title><rect x="167.1" y="101" width="0.4" height="15.0" fill="rgb(221,197,32)" rx="2" ry="2" />
<text  x="170.14" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (6 samples, 0.08%)</title><rect x="806.7" y="693" width="1.0" height="15.0" fill="rgb(225,224,9)" rx="2" ry="2" />
<text  x="809.69" y="703.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="1011.0" y="645" width="0.2" height="15.0" fill="rgb(249,191,53)" rx="2" ry="2" />
<text  x="1014.04" y="655.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="1007.6" y="693" width="0.4" height="15.0" fill="rgb(207,21,21)" rx="2" ry="2" />
<text  x="1010.64" y="703.5" ></text>
</g>
<g >
<title>wake_up_q (11 samples, 0.15%)</title><rect x="683.7" y="533" width="1.7" height="15.0" fill="rgb(216,184,3)" rx="2" ry="2" />
<text  x="686.66" y="543.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="1123.2" y="645" width="0.2" height="15.0" fill="rgb(224,92,34)" rx="2" ry="2" />
<text  x="1126.23" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char&gt; (1 samples, 0.01%)</title><rect x="776.0" y="645" width="0.1" height="15.0" fill="rgb(231,222,22)" rx="2" ry="2" />
<text  x="778.97" y="655.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="414.0" y="85" width="0.2" height="15.0" fill="rgb(251,17,42)" rx="2" ry="2" />
<text  x="417.00" y="95.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="335.3" y="565" width="0.1" height="15.0" fill="rgb(235,175,5)" rx="2" ry="2" />
<text  x="338.27" y="575.5" ></text>
</g>
<g >
<title>adler32 (16 samples, 0.22%)</title><rect x="971.4" y="997" width="2.6" height="15.0" fill="rgb(233,184,15)" rx="2" ry="2" />
<text  x="974.43" y="1007.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.03%)</title><rect x="10.6" y="741" width="0.4" height="15.0" fill="rgb(207,7,44)" rx="2" ry="2" />
<text  x="13.65" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="1148.1" y="661" width="0.2" height="15.0" fill="rgb(238,199,6)" rx="2" ry="2" />
<text  x="1151.13" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="839.3" y="693" width="0.2" height="15.0" fill="rgb(214,110,4)" rx="2" ry="2" />
<text  x="842.35" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (5 samples, 0.07%)</title><rect x="253.3" y="789" width="0.8" height="15.0" fill="rgb(233,38,35)" rx="2" ry="2" />
<text  x="256.31" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="795.5" y="661" width="0.2" height="15.0" fill="rgb(231,135,17)" rx="2" ry="2" />
<text  x="798.54" y="671.5" ></text>
</g>
<g >
<title>cp_new_stat (6 samples, 0.08%)</title><rect x="821.7" y="645" width="1.0" height="15.0" fill="rgb(248,88,39)" rx="2" ry="2" />
<text  x="824.72" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="842.9" y="981" width="0.3" height="15.0" fill="rgb(220,19,47)" rx="2" ry="2" />
<text  x="845.90" y="991.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (302 samples, 4.14%)</title><rect x="312.0" y="821" width="48.8" height="15.0" fill="rgb(237,29,41)" rx="2" ry="2" />
<text  x="314.99" y="831.5" >mudu..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="123.7" y="741" width="0.1" height="15.0" fill="rgb(213,144,33)" rx="2" ry="2" />
<text  x="126.65" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="376.3" y="693" width="0.2" height="15.0" fill="rgb(226,50,39)" rx="2" ry="2" />
<text  x="379.34" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.23%)</title><rect x="321.5" y="645" width="2.8" height="15.0" fill="rgb(249,107,50)" rx="2" ry="2" />
<text  x="324.53" y="655.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.01%)</title><rect x="17.6" y="965" width="0.2" height="15.0" fill="rgb(219,168,31)" rx="2" ry="2" />
<text  x="20.60" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="815.3" y="709" width="0.1" height="15.0" fill="rgb(217,169,26)" rx="2" ry="2" />
<text  x="818.26" y="719.5" ></text>
</g>
<g >
<title>ThreadPool1 (2,088 samples, 28.61%)</title><rect x="506.6" y="1013" width="337.6" height="15.0" fill="rgb(218,91,44)" rx="2" ry="2" />
<text  x="509.64" y="1023.5" >ThreadPool1</text>
</g>
<g >
<title>_IO_vsnprintf (33 samples, 0.45%)</title><rect x="23.4" y="981" width="5.4" height="15.0" fill="rgb(253,49,24)" rx="2" ry="2" />
<text  x="26.42" y="991.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdownInLoop (3 samples, 0.04%)</title><rect x="88.1" y="533" width="0.5" height="15.0" fill="rgb(232,76,2)" rx="2" ry="2" />
<text  x="91.08" y="543.5" ></text>
</g>
<g >
<title>strrchr (1 samples, 0.01%)</title><rect x="502.8" y="805" width="0.1" height="15.0" fill="rgb(212,43,32)" rx="2" ry="2" />
<text  x="505.76" y="815.5" ></text>
</g>
<g >
<title>schedule_timeout (2 samples, 0.03%)</title><rect x="849.2" y="805" width="0.3" height="15.0" fill="rgb(254,12,2)" rx="2" ry="2" />
<text  x="852.21" y="815.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="260.7" y="981" width="0.2" height="15.0" fill="rgb(230,173,30)" rx="2" ry="2" />
<text  x="263.74" y="991.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="1001.5" y="597" width="0.3" height="15.0" fill="rgb(205,30,1)" rx="2" ry="2" />
<text  x="1004.50" y="607.5" ></text>
</g>
<g >
<title>__fget_light (3 samples, 0.04%)</title><rect x="888.2" y="901" width="0.5" height="15.0" fill="rgb(237,85,21)" rx="2" ry="2" />
<text  x="891.17" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="351.3" y="469" width="0.1" height="15.0" fill="rgb(208,39,51)" rx="2" ry="2" />
<text  x="354.28" y="479.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (2 samples, 0.03%)</title><rect x="365.0" y="773" width="0.3" height="15.0" fill="rgb(223,184,12)" rx="2" ry="2" />
<text  x="368.02" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (6 samples, 0.08%)</title><rect x="953.3" y="933" width="1.0" height="15.0" fill="rgb(205,68,4)" rx="2" ry="2" />
<text  x="956.32" y="943.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (1 samples, 0.01%)</title><rect x="672.0" y="661" width="0.2" height="15.0" fill="rgb(212,62,3)" rx="2" ry="2" />
<text  x="675.02" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="126.4" y="741" width="0.8" height="15.0" fill="rgb(248,194,27)" rx="2" ry="2" />
<text  x="129.40" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="949.4" y="965" width="0.2" height="15.0" fill="rgb(240,12,32)" rx="2" ry="2" />
<text  x="952.44" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="369.5" y="757" width="0.2" height="15.0" fill="rgb(241,59,1)" rx="2" ry="2" />
<text  x="372.55" y="767.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="254.0" y="773" width="0.1" height="15.0" fill="rgb(229,34,21)" rx="2" ry="2" />
<text  x="256.95" y="783.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (3 samples, 0.04%)</title><rect x="840.2" y="725" width="0.4" height="15.0" fill="rgb(245,210,11)" rx="2" ry="2" />
<text  x="843.15" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="35.4" y="965" width="0.3" height="15.0" fill="rgb(236,107,44)" rx="2" ry="2" />
<text  x="38.38" y="975.5" ></text>
</g>
<g >
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="152.8" y="469" width="0.3" height="15.0" fill="rgb(234,161,20)" rx="2" ry="2" />
<text  x="155.75" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~tuple (6 samples, 0.08%)</title><rect x="246.4" y="645" width="0.9" height="15.0" fill="rgb(207,10,38)" rx="2" ry="2" />
<text  x="249.36" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="1152.7" y="709" width="0.3" height="15.0" fill="rgb(210,128,33)" rx="2" ry="2" />
<text  x="1155.66" y="719.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="1017.0" y="661" width="0.3" height="15.0" fill="rgb(250,32,0)" rx="2" ry="2" />
<text  x="1020.02" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="339.2" y="565" width="0.1" height="15.0" fill="rgb(214,113,39)" rx="2" ry="2" />
<text  x="342.15" y="575.5" ></text>
</g>
<g >
<title>futex_wait_setup (1 samples, 0.01%)</title><rect x="673.5" y="533" width="0.1" height="15.0" fill="rgb(217,98,15)" rx="2" ry="2" />
<text  x="676.48" y="543.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::loop (19 samples, 0.26%)</title><rect x="1186.6" y="949" width="3.1" height="15.0" fill="rgb(241,37,38)" rx="2" ry="2" />
<text  x="1189.61" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9 samples, 0.12%)</title><rect x="1021.9" y="645" width="1.4" height="15.0" fill="rgb(243,152,23)" rx="2" ry="2" />
<text  x="1024.87" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="652.5" y="965" width="0.1" height="15.0" fill="rgb(206,34,47)" rx="2" ry="2" />
<text  x="655.46" y="975.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1020.6" y="645" width="0.1" height="15.0" fill="rgb(227,110,20)" rx="2" ry="2" />
<text  x="1023.57" y="655.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::sendInLoop (628 samples, 8.60%)</title><rect x="386.0" y="693" width="101.6" height="15.0" fill="rgb(249,53,22)" rx="2" ry="2" />
<text  x="389.04" y="703.5" >muduo::net::..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.01%)</title><rect x="260.3" y="997" width="0.1" height="15.0" fill="rgb(215,92,54)" rx="2" ry="2" />
<text  x="263.26" y="1007.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="357.6" y="581" width="0.1" height="15.0" fill="rgb(218,11,39)" rx="2" ry="2" />
<text  x="360.58" y="591.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="499.2" y="757" width="0.2" height="15.0" fill="rgb(239,73,31)" rx="2" ry="2" />
<text  x="502.20" y="767.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="110.2" y="469" width="0.2" height="15.0" fill="rgb(229,176,6)" rx="2" ry="2" />
<text  x="113.23" y="479.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="414.0" y="101" width="0.2" height="15.0" fill="rgb(229,54,4)" rx="2" ry="2" />
<text  x="417.00" y="111.5" ></text>
</g>
<g >
<title>tcp_sendmsg (224 samples, 3.07%)</title><rect x="548.2" y="821" width="36.2" height="15.0" fill="rgb(221,75,25)" rx="2" ry="2" />
<text  x="551.19" y="831.5" >tcp..</text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="943.1" y="933" width="0.4" height="15.0" fill="rgb(216,164,34)" rx="2" ry="2" />
<text  x="946.14" y="943.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (3 samples, 0.04%)</title><rect x="498.1" y="757" width="0.5" height="15.0" fill="rgb(213,11,5)" rx="2" ry="2" />
<text  x="501.07" y="767.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="77.3" y="565" width="0.1" height="15.0" fill="rgb(244,196,41)" rx="2" ry="2" />
<text  x="80.25" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1158.0" y="693" width="0.2" height="15.0" fill="rgb(245,166,30)" rx="2" ry="2" />
<text  x="1160.99" y="703.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="613" width="0.2" height="15.0" fill="rgb(228,78,52)" rx="2" ry="2" />
<text  x="1190.41" y="623.5" ></text>
</g>
<g >
<title>schedule_timeout (96 samples, 1.32%)</title><rect x="513.9" y="789" width="15.5" height="15.0" fill="rgb(251,221,17)" rx="2" ry="2" />
<text  x="516.91" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4 samples, 0.05%)</title><rect x="767.4" y="565" width="0.7" height="15.0" fill="rgb(233,126,40)" rx="2" ry="2" />
<text  x="770.41" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8 samples, 0.11%)</title><rect x="1022.0" y="613" width="1.3" height="15.0" fill="rgb(231,56,5)" rx="2" ry="2" />
<text  x="1025.03" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="959.8" y="981" width="0.1" height="15.0" fill="rgb(239,197,14)" rx="2" ry="2" />
<text  x="962.79" y="991.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="382.2" y="757" width="0.3" height="15.0" fill="rgb(207,102,25)" rx="2" ry="2" />
<text  x="385.16" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::get (2 samples, 0.03%)</title><rect x="110.7" y="661" width="0.3" height="15.0" fill="rgb(224,113,38)" rx="2" ry="2" />
<text  x="113.72" y="671.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="279.5" y="949" width="0.2" height="15.0" fill="rgb(226,67,12)" rx="2" ry="2" />
<text  x="282.50" y="959.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (33 samples, 0.45%)</title><rect x="784.2" y="693" width="5.4" height="15.0" fill="rgb(238,170,44)" rx="2" ry="2" />
<text  x="787.22" y="703.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (4 samples, 0.05%)</title><rect x="496.8" y="773" width="0.6" height="15.0" fill="rgb(228,19,40)" rx="2" ry="2" />
<text  x="499.78" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.01%)</title><rect x="1155.1" y="661" width="0.1" height="15.0" fill="rgb(209,117,14)" rx="2" ry="2" />
<text  x="1158.08" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9 samples, 0.12%)</title><rect x="1133.9" y="661" width="1.5" height="15.0" fill="rgb(241,16,17)" rx="2" ry="2" />
<text  x="1136.90" y="671.5" ></text>
</g>
<g >
<title>asyncOutput (2 samples, 0.03%)</title><rect x="361.5" y="805" width="0.3" height="15.0" fill="rgb(228,141,54)" rx="2" ry="2" />
<text  x="364.46" y="815.5" ></text>
</g>
<g >
<title>std::copy&lt;char const*, char*&gt; (1 samples, 0.01%)</title><rect x="1020.9" y="677" width="0.2" height="15.0" fill="rgb(249,18,27)" rx="2" ry="2" />
<text  x="1023.90" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="310.1" y="821" width="0.1" height="15.0" fill="rgb(207,38,39)" rx="2" ry="2" />
<text  x="313.05" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (7 samples, 0.10%)</title><rect x="1161.1" y="693" width="1.1" height="15.0" fill="rgb(232,166,4)" rx="2" ry="2" />
<text  x="1164.06" y="703.5" ></text>
</g>
<g >
<title>inflateInit2_ (2 samples, 0.03%)</title><rect x="668.8" y="693" width="0.3" height="15.0" fill="rgb(216,115,36)" rx="2" ry="2" />
<text  x="671.79" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (7 samples, 0.10%)</title><rect x="103.4" y="501" width="1.2" height="15.0" fill="rgb(214,172,32)" rx="2" ry="2" />
<text  x="106.44" y="511.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5 samples, 0.07%)</title><rect x="1134.2" y="597" width="0.8" height="15.0" fill="rgb(207,57,7)" rx="2" ry="2" />
<text  x="1137.23" y="607.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (2 samples, 0.03%)</title><rect x="260.4" y="997" width="0.3" height="15.0" fill="rgb(236,192,16)" rx="2" ry="2" />
<text  x="263.42" y="1007.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1119.7" y="549" width="0.1" height="15.0" fill="rgb(226,136,38)" rx="2" ry="2" />
<text  x="1122.68" y="559.5" ></text>
</g>
<g >
<title>select_estimate_accuracy (1 samples, 0.01%)</title><rect x="58.5" y="741" width="0.2" height="15.0" fill="rgb(211,186,0)" rx="2" ry="2" />
<text  x="61.50" y="751.5" ></text>
</g>
<g >
<title>StaticServer0 (1,522 samples, 20.85%)</title><rect x="14.7" y="1013" width="246.0" height="15.0" fill="rgb(229,28,29)" rx="2" ry="2" />
<text  x="17.69" y="1023.5" >StaticServer0</text>
</g>
<g >
<title>find_get_entry (1 samples, 0.01%)</title><rect x="12.4" y="773" width="0.2" height="15.0" fill="rgb(215,203,29)" rx="2" ry="2" />
<text  x="15.42" y="783.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1020.4" y="629" width="0.2" height="15.0" fill="rgb(208,71,32)" rx="2" ry="2" />
<text  x="1023.41" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="316.5" y="725" width="0.5" height="15.0" fill="rgb(213,229,18)" rx="2" ry="2" />
<text  x="319.52" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="678.7" y="661" width="0.1" height="15.0" fill="rgb(208,206,6)" rx="2" ry="2" />
<text  x="681.65" y="671.5" ></text>
</g>
<g >
<title>sock_write_iter (229 samples, 3.14%)</title><rect x="547.7" y="869" width="37.0" height="15.0" fill="rgb(241,152,33)" rx="2" ry="2" />
<text  x="550.70" y="879.5" >soc..</text>
</g>
<g >
<title>vfs_getattr_nosec (2 samples, 0.03%)</title><rect x="1177.2" y="613" width="0.4" height="15.0" fill="rgb(215,199,27)" rx="2" ry="2" />
<text  x="1180.23" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="985.7" y="981" width="0.1" height="15.0" fill="rgb(218,88,54)" rx="2" ry="2" />
<text  x="988.65" y="991.5" ></text>
</g>
<g >
<title>__schedule (44 samples, 0.60%)</title><rect x="388.1" y="597" width="7.2" height="15.0" fill="rgb(218,223,3)" rx="2" ry="2" />
<text  x="391.14" y="607.5" ></text>
</g>
<g >
<title>unlazy_walk (4 samples, 0.05%)</title><rect x="1168.7" y="565" width="0.6" height="15.0" fill="rgb(249,84,42)" rx="2" ry="2" />
<text  x="1171.66" y="575.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (2 samples, 0.03%)</title><rect x="314.6" y="693" width="0.3" height="15.0" fill="rgb(253,55,53)" rx="2" ry="2" />
<text  x="317.58" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (2 samples, 0.03%)</title><rect x="810.4" y="709" width="0.3" height="15.0" fill="rgb(245,152,43)" rx="2" ry="2" />
<text  x="813.41" y="719.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (2 samples, 0.03%)</title><rect x="813.5" y="693" width="0.3" height="15.0" fill="rgb(209,117,1)" rx="2" ry="2" />
<text  x="816.48" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (2 samples, 0.03%)</title><rect x="373.6" y="789" width="0.3" height="15.0" fill="rgb(248,205,20)" rx="2" ry="2" />
<text  x="376.59" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="997.6" y="789" width="0.5" height="15.0" fill="rgb(228,120,10)" rx="2" ry="2" />
<text  x="1000.62" y="799.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="837.7" y="725" width="0.2" height="15.0" fill="rgb(239,100,30)" rx="2" ry="2" />
<text  x="840.73" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1153.3" y="693" width="0.2" height="15.0" fill="rgb(246,182,34)" rx="2" ry="2" />
<text  x="1156.30" y="703.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.01%)</title><rect x="155.8" y="453" width="0.2" height="15.0" fill="rgb(210,62,17)" rx="2" ry="2" />
<text  x="158.82" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (1 samples, 0.01%)</title><rect x="381.2" y="805" width="0.1" height="15.0" fill="rgb(253,217,30)" rx="2" ry="2" />
<text  x="384.19" y="815.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setWriteCompleteCallback (9 samples, 0.12%)</title><rect x="344.0" y="565" width="1.5" height="15.0" fill="rgb(214,89,24)" rx="2" ry="2" />
<text  x="347.00" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool, true&gt; (1 samples, 0.01%)</title><rect x="107.3" y="501" width="0.2" height="15.0" fill="rgb(208,25,1)" rx="2" ry="2" />
<text  x="110.32" y="511.5" ></text>
</g>
<g >
<title>__snprintf (3 samples, 0.04%)</title><rect x="1010.6" y="645" width="0.4" height="15.0" fill="rgb(252,167,52)" rx="2" ry="2" />
<text  x="1013.55" y="655.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="1007.3" y="693" width="0.3" height="15.0" fill="rgb(226,104,53)" rx="2" ry="2" />
<text  x="1010.32" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_Rb_tree_const_iterator (1 samples, 0.01%)</title><rect x="374.9" y="757" width="0.1" height="15.0" fill="rgb(245,53,45)" rx="2" ry="2" />
<text  x="377.88" y="767.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (497 samples, 6.81%)</title><rect x="685.4" y="645" width="80.4" height="15.0" fill="rgb(225,209,14)" rx="2" ry="2" />
<text  x="688.44" y="655.5" >muduo::ne..</text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.03%)</title><rect x="617.4" y="981" width="0.3" height="15.0" fill="rgb(228,205,23)" rx="2" ry="2" />
<text  x="620.38" y="991.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,133 samples, 15.52%)</title><rect x="659.4" y="789" width="183.2" height="15.0" fill="rgb(212,70,43)" rx="2" ry="2" />
<text  x="662.41" y="799.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>dev_queue_xmit (17 samples, 0.23%)</title><rect x="923.7" y="645" width="2.8" height="15.0" fill="rgb(243,167,5)" rx="2" ry="2" />
<text  x="926.74" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (15 samples, 0.21%)</title><rect x="66.3" y="789" width="2.4" height="15.0" fill="rgb(211,123,7)" rx="2" ry="2" />
<text  x="69.26" y="799.5" ></text>
</g>
<g >
<title>apparmor_inode_getattr (2 samples, 0.03%)</title><rect x="835.0" y="597" width="0.3" height="15.0" fill="rgb(228,195,23)" rx="2" ry="2" />
<text  x="837.98" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="657.6" y="789" width="0.4" height="15.0" fill="rgb(225,75,52)" rx="2" ry="2" />
<text  x="660.63" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="780.3" y="597" width="0.2" height="15.0" fill="rgb(227,20,47)" rx="2" ry="2" />
<text  x="783.34" y="607.5" ></text>
</g>
<g >
<title>alloc_page_buffers (2 samples, 0.03%)</title><rect x="10.2" y="773" width="0.3" height="15.0" fill="rgb(242,43,4)" rx="2" ry="2" />
<text  x="13.16" y="783.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (3 samples, 0.04%)</title><rect x="270.0" y="949" width="0.4" height="15.0" fill="rgb(218,89,49)" rx="2" ry="2" />
<text  x="272.96" y="959.5" ></text>
</g>
<g >
<title>security_inode_permission (1 samples, 0.01%)</title><rect x="1170.3" y="533" width="0.1" height="15.0" fill="rgb(232,55,45)" rx="2" ry="2" />
<text  x="1173.28" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (18 samples, 0.25%)</title><rect x="321.5" y="661" width="2.9" height="15.0" fill="rgb(214,117,29)" rx="2" ry="2" />
<text  x="324.53" y="671.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.01%)</title><rect x="94.1" y="453" width="0.1" height="15.0" fill="rgb(236,205,53)" rx="2" ry="2" />
<text  x="97.07" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (251 samples, 3.44%)</title><rect x="545.8" y="949" width="40.5" height="15.0" fill="rgb(218,91,33)" rx="2" ry="2" />
<text  x="548.76" y="959.5" >do_..</text>
</g>
<g >
<title>finish_task_switch (7 samples, 0.10%)</title><rect x="1029.5" y="533" width="1.1" height="15.0" fill="rgb(240,0,21)" rx="2" ry="2" />
<text  x="1032.47" y="543.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="841.8" y="677" width="0.1" height="15.0" fill="rgb(229,142,51)" rx="2" ry="2" />
<text  x="844.77" y="687.5" ></text>
</g>
<g >
<title>ep_send_events_proc (1 samples, 0.01%)</title><rect x="44.6" y="741" width="0.2" height="15.0" fill="rgb(217,114,6)" rx="2" ry="2" />
<text  x="47.60" y="751.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.01%)</title><rect x="261.6" y="949" width="0.1" height="15.0" fill="rgb(238,83,16)" rx="2" ry="2" />
<text  x="264.55" y="959.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="682.9" y="485" width="0.1" height="15.0" fill="rgb(229,29,4)" rx="2" ry="2" />
<text  x="685.85" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="656.2" y="805" width="0.3" height="15.0" fill="rgb(230,30,40)" rx="2" ry="2" />
<text  x="659.18" y="815.5" ></text>
</g>
<g >
<title>sdscatfmt (3 samples, 0.04%)</title><rect x="619.5" y="981" width="0.5" height="15.0" fill="rgb(244,102,0)" rx="2" ry="2" />
<text  x="622.48" y="991.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::queueInLoop (595 samples, 8.15%)</title><rect x="1024.9" y="661" width="96.2" height="15.0" fill="rgb(220,158,47)" rx="2" ry="2" />
<text  x="1027.94" y="671.5" >muduo::net:..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_M_head (1 samples, 0.01%)</title><rect x="348.0" y="485" width="0.2" height="15.0" fill="rgb(253,223,31)" rx="2" ry="2" />
<text  x="351.04" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="1188.4" y="917" width="0.1" height="15.0" fill="rgb(237,174,4)" rx="2" ry="2" />
<text  x="1191.38" y="927.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (6 samples, 0.08%)</title><rect x="44.8" y="709" width="0.9" height="15.0" fill="rgb(251,139,32)" rx="2" ry="2" />
<text  x="47.76" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;muduo::net::EventLoop*&amp;&gt; (1 samples, 0.01%)</title><rect x="101.7" y="565" width="0.1" height="15.0" fill="rgb(227,139,10)" rx="2" ry="2" />
<text  x="104.66" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1006.5" y="677" width="0.2" height="15.0" fill="rgb(227,188,37)" rx="2" ry="2" />
<text  x="1009.51" y="687.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (5 samples, 0.07%)</title><rect x="906.6" y="405" width="0.8" height="15.0" fill="rgb(223,124,6)" rx="2" ry="2" />
<text  x="909.60" y="415.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.01%)</title><rect x="398.2" y="469" width="0.1" height="15.0" fill="rgb(214,203,53)" rx="2" ry="2" />
<text  x="401.16" y="479.5" ></text>
</g>
<g >
<title>ccx::Redis::exeGET[abi:cxx11] (15 samples, 0.21%)</title><rect x="1004.2" y="693" width="2.5" height="15.0" fill="rgb(210,191,51)" rx="2" ry="2" />
<text  x="1007.25" y="703.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="1144.7" y="661" width="0.2" height="15.0" fill="rgb(223,102,13)" rx="2" ry="2" />
<text  x="1147.73" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (1 samples, 0.01%)</title><rect x="1129.5" y="661" width="0.2" height="15.0" fill="rgb(219,94,30)" rx="2" ry="2" />
<text  x="1132.54" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1123.7" y="549" width="0.2" height="15.0" fill="rgb(219,183,9)" rx="2" ry="2" />
<text  x="1126.72" y="559.5" ></text>
</g>
<g >
<title>___slab_alloc (2 samples, 0.03%)</title><rect x="10.2" y="709" width="0.3" height="15.0" fill="rgb(243,200,47)" rx="2" ry="2" />
<text  x="13.16" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="247.3" y="629" width="0.2" height="15.0" fill="rgb(232,155,27)" rx="2" ry="2" />
<text  x="250.33" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1140.7" y="645" width="0.2" height="15.0" fill="rgb(240,126,25)" rx="2" ry="2" />
<text  x="1143.69" y="655.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="997.9" y="549" width="0.2" height="15.0" fill="rgb(211,64,52)" rx="2" ry="2" />
<text  x="1000.94" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (11 samples, 0.15%)</title><rect x="679.3" y="677" width="1.8" height="15.0" fill="rgb(226,62,10)" rx="2" ry="2" />
<text  x="682.30" y="687.5" ></text>
</g>
<g >
<title>__inet_lookup_established (1 samples, 0.01%)</title><rect x="162.5" y="149" width="0.1" height="15.0" fill="rgb(221,161,49)" rx="2" ry="2" />
<text  x="165.45" y="159.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (128 samples, 1.75%)</title><rect x="556.3" y="645" width="20.7" height="15.0" fill="rgb(235,146,4)" rx="2" ry="2" />
<text  x="559.27" y="655.5" ></text>
</g>
<g >
<title>tcp_write_xmit (518 samples, 7.10%)</title><rect x="157.4" y="453" width="83.8" height="15.0" fill="rgb(215,27,37)" rx="2" ry="2" />
<text  x="160.44" y="463.5" >tcp_write..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="504.1" y="805" width="0.1" height="15.0" fill="rgb(206,202,46)" rx="2" ry="2" />
<text  x="507.05" y="815.5" ></text>
</g>
<g >
<title>generic_perform_write (28 samples, 0.38%)</title><rect x="10.2" y="837" width="4.5" height="15.0" fill="rgb(211,43,17)" rx="2" ry="2" />
<text  x="13.16" y="847.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::sendInLoop (655 samples, 8.97%)</title><rect x="138.2" y="693" width="105.9" height="15.0" fill="rgb(227,176,29)" rx="2" ry="2" />
<text  x="141.20" y="703.5" >muduo::net::..</text>
</g>
<g >
<title>std::forward&lt;StaticServer*&amp;&gt; (1 samples, 0.01%)</title><rect x="109.3" y="613" width="0.1" height="15.0" fill="rgb(227,61,19)" rx="2" ry="2" />
<text  x="112.26" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1162.5" y="645" width="0.2" height="15.0" fill="rgb(219,33,46)" rx="2" ry="2" />
<text  x="1165.52" y="655.5" ></text>
</g>
<g >
<title>__snprintf (1 samples, 0.01%)</title><rect x="799.9" y="661" width="0.2" height="15.0" fill="rgb(251,1,26)" rx="2" ry="2" />
<text  x="802.90" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="244.3" y="693" width="0.1" height="15.0" fill="rgb(245,151,28)" rx="2" ry="2" />
<text  x="247.25" y="703.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.30%)</title><rect x="1186.3" y="997" width="3.5" height="15.0" fill="rgb(234,134,9)" rx="2" ry="2" />
<text  x="1189.28" y="1007.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.05%)</title><rect x="893.7" y="773" width="0.6" height="15.0" fill="rgb(214,68,6)" rx="2" ry="2" />
<text  x="896.67" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt;::operator (4 samples, 0.05%)</title><rect x="780.0" y="645" width="0.7" height="15.0" fill="rgb(219,207,2)" rx="2" ry="2" />
<text  x="783.02" y="655.5" ></text>
</g>
<g >
<title>sock_read_iter (172 samples, 2.36%)</title><rect x="846.0" y="885" width="27.8" height="15.0" fill="rgb(220,173,38)" rx="2" ry="2" />
<text  x="848.97" y="895.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.01%)</title><rect x="137.9" y="581" width="0.1" height="15.0" fill="rgb(247,121,28)" rx="2" ry="2" />
<text  x="140.88" y="591.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (108 samples, 1.48%)</title><rect x="558.7" y="453" width="17.5" height="15.0" fill="rgb(244,10,53)" rx="2" ry="2" />
<text  x="561.69" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,156 samples, 15.84%)</title><rect x="998.1" y="821" width="186.9" height="15.0" fill="rgb(229,40,27)" rx="2" ry="2" />
<text  x="1001.10" y="831.5" >std::_Function_handler&lt;v..</text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.01%)</title><rect x="406.7" y="277" width="0.2" height="15.0" fill="rgb(217,109,52)" rx="2" ry="2" />
<text  x="409.73" y="287.5" ></text>
</g>
<g >
<title>ip_rcv_finish (435 samples, 5.96%)</title><rect x="409.0" y="197" width="70.3" height="15.0" fill="rgb(222,100,15)" rx="2" ry="2" />
<text  x="411.99" y="207.5" >ip_rcv_..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1117.3" y="565" width="0.1" height="15.0" fill="rgb(218,146,23)" rx="2" ry="2" />
<text  x="1120.25" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1121.3" y="613" width="0.2" height="15.0" fill="rgb(223,71,39)" rx="2" ry="2" />
<text  x="1124.29" y="623.5" ></text>
</g>
<g >
<title>std::move&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="771.6" y="677" width="0.3" height="15.0" fill="rgb(253,221,13)" rx="2" ry="2" />
<text  x="774.61" y="687.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&gt; (1 samples, 0.01%)</title><rect x="91.8" y="533" width="0.2" height="15.0" fill="rgb(229,44,24)" rx="2" ry="2" />
<text  x="94.80" y="543.5" ></text>
</g>
<g >
<title>sock_def_readable (403 samples, 5.52%)</title><rect x="168.9" y="85" width="65.2" height="15.0" fill="rgb(230,122,10)" rx="2" ry="2" />
<text  x="171.92" y="95.5" >sock_de..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="353.9" y="469" width="0.1" height="15.0" fill="rgb(219,38,4)" rx="2" ry="2" />
<text  x="356.86" y="479.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::ensureWritableBytes (1 samples, 0.01%)</title><rect x="676.7" y="661" width="0.2" height="15.0" fill="rgb(240,171,11)" rx="2" ry="2" />
<text  x="679.71" y="671.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="805.7" y="597" width="0.3" height="15.0" fill="rgb(221,226,38)" rx="2" ry="2" />
<text  x="808.72" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="106.0" y="469" width="0.4" height="15.0" fill="rgb(251,158,42)" rx="2" ry="2" />
<text  x="109.03" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="95.2" y="469" width="0.2" height="15.0" fill="rgb(249,5,23)" rx="2" ry="2" />
<text  x="98.20" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="500.5" y="773" width="0.2" height="15.0" fill="rgb(216,195,38)" rx="2" ry="2" />
<text  x="503.49" y="783.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (1 samples, 0.01%)</title><rect x="137.6" y="613" width="0.1" height="15.0" fill="rgb(224,69,34)" rx="2" ry="2" />
<text  x="140.55" y="623.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2 samples, 0.03%)</title><rect x="279.5" y="981" width="0.3" height="15.0" fill="rgb(251,132,47)" rx="2" ry="2" />
<text  x="282.50" y="991.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="495.8" y="741" width="0.2" height="15.0" fill="rgb(235,124,42)" rx="2" ry="2" />
<text  x="498.81" y="751.5" ></text>
</g>
<g >
<title>sock_close (1 samples, 0.01%)</title><rect x="997.8" y="437" width="0.1" height="15.0" fill="rgb(245,101,32)" rx="2" ry="2" />
<text  x="1000.78" y="447.5" ></text>
</g>
<g >
<title>mod_timer (1 samples, 0.01%)</title><rect x="561.1" y="373" width="0.2" height="15.0" fill="rgb(221,168,3)" rx="2" ry="2" />
<text  x="564.12" y="383.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.43 (3 samples, 0.04%)</title><rect x="400.1" y="453" width="0.5" height="15.0" fill="rgb(219,0,29)" rx="2" ry="2" />
<text  x="403.10" y="463.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (4 samples, 0.05%)</title><rect x="501.0" y="789" width="0.6" height="15.0" fill="rgb(241,62,13)" rx="2" ry="2" />
<text  x="503.98" y="799.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="992.0" y="805" width="0.1" height="15.0" fill="rgb(251,18,45)" rx="2" ry="2" />
<text  x="994.96" y="815.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="319.4" y="773" width="0.2" height="15.0" fill="rgb(232,78,35)" rx="2" ry="2" />
<text  x="322.43" y="783.5" ></text>
</g>
<g >
<title>std::find&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5 samples, 0.07%)</title><rect x="779.9" y="693" width="0.8" height="15.0" fill="rgb(243,134,52)" rx="2" ry="2" />
<text  x="782.85" y="703.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="18.6" y="965" width="0.3" height="15.0" fill="rgb(212,147,42)" rx="2" ry="2" />
<text  x="21.57" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="778.4" y="613" width="0.5" height="15.0" fill="rgb(245,24,5)" rx="2" ry="2" />
<text  x="781.40" y="623.5" ></text>
</g>
<g >
<title>sock_recvmsg (169 samples, 2.32%)</title><rect x="846.5" y="869" width="27.3" height="15.0" fill="rgb(224,9,5)" rx="2" ry="2" />
<text  x="849.46" y="879.5" >s..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (7 samples, 0.10%)</title><rect x="1186.8" y="709" width="1.1" height="15.0" fill="rgb(226,152,3)" rx="2" ry="2" />
<text  x="1189.77" y="719.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="674.1" y="581" width="0.2" height="15.0" fill="rgb(226,42,37)" rx="2" ry="2" />
<text  x="677.12" y="591.5" ></text>
</g>
<g >
<title>StaticServer1 (1,521 samples, 20.84%)</title><rect x="260.7" y="1013" width="245.9" height="15.0" fill="rgb(222,165,28)" rx="2" ry="2" />
<text  x="263.74" y="1023.5" >StaticServer1</text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (12 samples, 0.16%)</title><rect x="683.5" y="645" width="1.9" height="15.0" fill="rgb(227,140,14)" rx="2" ry="2" />
<text  x="686.50" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="500.5" y="741" width="0.2" height="15.0" fill="rgb(240,120,42)" rx="2" ry="2" />
<text  x="503.49" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2 samples, 0.03%)</title><rect x="806.9" y="613" width="0.3" height="15.0" fill="rgb(238,127,27)" rx="2" ry="2" />
<text  x="809.85" y="623.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="1014.4" y="549" width="0.2" height="15.0" fill="rgb(230,217,32)" rx="2" ry="2" />
<text  x="1017.43" y="559.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="821.4" y="629" width="0.2" height="15.0" fill="rgb(231,193,28)" rx="2" ry="2" />
<text  x="824.40" y="639.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="1015.7" y="613" width="0.3" height="15.0" fill="rgb(245,110,44)" rx="2" ry="2" />
<text  x="1018.72" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_move_assign (1 samples, 0.01%)</title><rect x="1188.2" y="581" width="0.2" height="15.0" fill="rgb(238,137,11)" rx="2" ry="2" />
<text  x="1191.22" y="591.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (6 samples, 0.08%)</title><rect x="337.1" y="565" width="0.9" height="15.0" fill="rgb(206,110,53)" rx="2" ry="2" />
<text  x="340.05" y="575.5" ></text>
</g>
<g >
<title>__fdget_pos (5 samples, 0.07%)</title><rect x="689.6" y="565" width="0.9" height="15.0" fill="rgb(230,14,16)" rx="2" ry="2" />
<text  x="692.64" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="617.1" y="933" width="0.3" height="15.0" fill="rgb(242,34,36)" rx="2" ry="2" />
<text  x="620.06" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.01%)</title><rect x="788.4" y="645" width="0.2" height="15.0" fill="rgb(246,106,34)" rx="2" ry="2" />
<text  x="791.42" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_read (2 samples, 0.03%)</title><rect x="324.4" y="677" width="0.4" height="15.0" fill="rgb(247,132,24)" rx="2" ry="2" />
<text  x="327.44" y="687.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="648.7" y="901" width="0.2" height="15.0" fill="rgb(236,181,15)" rx="2" ry="2" />
<text  x="651.74" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.03%)</title><rect x="811.2" y="709" width="0.3" height="15.0" fill="rgb(246,76,26)" rx="2" ry="2" />
<text  x="814.22" y="719.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (2 samples, 0.03%)</title><rect x="337.5" y="517" width="0.4" height="15.0" fill="rgb(240,54,17)" rx="2" ry="2" />
<text  x="340.54" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="1017.8" y="629" width="0.2" height="15.0" fill="rgb(205,134,42)" rx="2" ry="2" />
<text  x="1020.83" y="639.5" ></text>
</g>
<g >
<title>strlen (3 samples, 0.04%)</title><rect x="601.9" y="965" width="0.4" height="15.0" fill="rgb(218,86,12)" rx="2" ry="2" />
<text  x="604.86" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (1 samples, 0.01%)</title><rect x="1157.0" y="709" width="0.2" height="15.0" fill="rgb(251,222,37)" rx="2" ry="2" />
<text  x="1160.02" y="719.5" ></text>
</g>
<g >
<title>sys_read (12 samples, 0.16%)</title><rect x="322.3" y="629" width="2.0" height="15.0" fill="rgb(248,10,22)" rx="2" ry="2" />
<text  x="325.34" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="385.1" y="613" width="0.1" height="15.0" fill="rgb(239,35,7)" rx="2" ry="2" />
<text  x="388.07" y="623.5" ></text>
</g>
<g >
<title>set_root (1 samples, 0.01%)</title><rect x="1173.3" y="565" width="0.2" height="15.0" fill="rgb(220,147,42)" rx="2" ry="2" />
<text  x="1176.35" y="575.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.01%)</title><rect x="150.3" y="517" width="0.2" height="15.0" fill="rgb(233,34,32)" rx="2" ry="2" />
<text  x="153.33" y="527.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="63.8" y="741" width="0.2" height="15.0" fill="rgb(229,56,7)" rx="2" ry="2" />
<text  x="66.83" y="751.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (18 samples, 0.25%)</title><rect x="801.4" y="709" width="2.9" height="15.0" fill="rgb(232,24,49)" rx="2" ry="2" />
<text  x="804.35" y="719.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (5 samples, 0.07%)</title><rect x="561.1" y="389" width="0.8" height="15.0" fill="rgb(210,227,21)" rx="2" ry="2" />
<text  x="564.12" y="399.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="345.9" y="501" width="0.2" height="15.0" fill="rgb(218,38,6)" rx="2" ry="2" />
<text  x="348.94" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="1117.9" y="597" width="0.3" height="15.0" fill="rgb(229,164,27)" rx="2" ry="2" />
<text  x="1120.90" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (613 samples, 8.40%)</title><rect x="387.7" y="645" width="99.1" height="15.0" fill="rgb(236,172,35)" rx="2" ry="2" />
<text  x="390.65" y="655.5" >do_syscall_64</text>
</g>
<g >
<title>__slab_free (1 samples, 0.01%)</title><rect x="330.3" y="421" width="0.1" height="15.0" fill="rgb(240,153,8)" rx="2" ry="2" />
<text  x="333.26" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="1147.8" y="661" width="0.3" height="15.0" fill="rgb(218,160,4)" rx="2" ry="2" />
<text  x="1150.81" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="102.1" y="533" width="0.5" height="15.0" fill="rgb(217,152,6)" rx="2" ry="2" />
<text  x="105.15" y="543.5" ></text>
</g>
<g >
<title>raw_local_deliver (1 samples, 0.01%)</title><rect x="162.6" y="149" width="0.2" height="15.0" fill="rgb(250,193,15)" rx="2" ry="2" />
<text  x="165.61" y="159.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (4 samples, 0.05%)</title><rect x="812.3" y="709" width="0.7" height="15.0" fill="rgb(208,31,3)" rx="2" ry="2" />
<text  x="815.35" y="719.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1013.6" y="629" width="0.2" height="15.0" fill="rgb(206,51,30)" rx="2" ry="2" />
<text  x="1016.62" y="639.5" ></text>
</g>
<g >
<title>__strchrnul (1 samples, 0.01%)</title><rect x="1186.4" y="965" width="0.2" height="15.0" fill="rgb(245,70,12)" rx="2" ry="2" />
<text  x="1189.44" y="975.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="369.5" y="789" width="0.2" height="15.0" fill="rgb(244,2,25)" rx="2" ry="2" />
<text  x="372.55" y="799.5" ></text>
</g>
<g >
<title>vfs_getattr_nosec (4 samples, 0.05%)</title><rect x="835.3" y="613" width="0.7" height="15.0" fill="rgb(216,125,39)" rx="2" ry="2" />
<text  x="838.30" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="783.1" y="565" width="0.1" height="15.0" fill="rgb(234,221,34)" rx="2" ry="2" />
<text  x="786.09" y="575.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;unsigned long&gt; (5 samples, 0.07%)</title><rect x="117.5" y="773" width="0.8" height="15.0" fill="rgb(229,67,24)" rx="2" ry="2" />
<text  x="120.51" y="783.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::~TcpConnection (2 samples, 0.03%)</title><rect x="997.8" y="613" width="0.3" height="15.0" fill="rgb(248,113,21)" rx="2" ry="2" />
<text  x="1000.78" y="623.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1 samples, 0.01%)</title><rect x="12.6" y="757" width="0.1" height="15.0" fill="rgb(235,29,8)" rx="2" ry="2" />
<text  x="15.59" y="767.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (10 samples, 0.14%)</title><rect x="29.9" y="981" width="1.6" height="15.0" fill="rgb(247,81,31)" rx="2" ry="2" />
<text  x="32.88" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.01%)</title><rect x="1128.4" y="645" width="0.2" height="15.0" fill="rgb(218,127,21)" rx="2" ry="2" />
<text  x="1131.41" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="246.8" y="597" width="0.2" height="15.0" fill="rgb(250,183,20)" rx="2" ry="2" />
<text  x="249.84" y="607.5" ></text>
</g>
<g >
<title>__GI___readv (2 samples, 0.03%)</title><rect x="336.2" y="661" width="0.4" height="15.0" fill="rgb(225,89,33)" rx="2" ry="2" />
<text  x="339.24" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="794.4" y="645" width="0.2" height="15.0" fill="rgb(247,114,8)" rx="2" ry="2" />
<text  x="797.40" y="655.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="267.2" y="965" width="0.2" height="15.0" fill="rgb(250,199,13)" rx="2" ry="2" />
<text  x="270.21" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="946.5" y="917" width="0.2" height="15.0" fill="rgb(211,97,54)" rx="2" ry="2" />
<text  x="949.53" y="927.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5 samples, 0.07%)</title><rect x="995.0" y="629" width="0.8" height="15.0" fill="rgb(215,133,35)" rx="2" ry="2" />
<text  x="998.03" y="639.5" ></text>
</g>
<g >
<title>ccx::Redis::exeGET[abi:cxx11] (1 samples, 0.01%)</title><rect x="1143.8" y="709" width="0.1" height="15.0" fill="rgb(246,140,6)" rx="2" ry="2" />
<text  x="1146.76" y="719.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (5 samples, 0.07%)</title><rect x="872.3" y="821" width="0.8" height="15.0" fill="rgb(215,59,11)" rx="2" ry="2" />
<text  x="875.33" y="831.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="850.3" y="661" width="0.2" height="15.0" fill="rgb(249,23,48)" rx="2" ry="2" />
<text  x="853.34" y="671.5" ></text>
</g>
<g >
<title>eth_type_trans (1 samples, 0.01%)</title><rect x="480.6" y="277" width="0.2" height="15.0" fill="rgb(246,80,44)" rx="2" ry="2" />
<text  x="483.61" y="287.5" ></text>
</g>
<g >
<title>rw_verify_area (9 samples, 0.12%)</title><rect x="333.8" y="549" width="1.5" height="15.0" fill="rgb(216,178,48)" rx="2" ry="2" />
<text  x="336.82" y="559.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (2 samples, 0.03%)</title><rect x="124.5" y="757" width="0.3" height="15.0" fill="rgb(249,165,6)" rx="2" ry="2" />
<text  x="127.46" y="767.5" ></text>
</g>
<g >
<title>__fget (2 samples, 0.03%)</title><rect x="71.9" y="581" width="0.3" height="15.0" fill="rgb(239,114,50)" rx="2" ry="2" />
<text  x="74.92" y="591.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (2 samples, 0.03%)</title><rect x="803.1" y="645" width="0.4" height="15.0" fill="rgb(239,157,7)" rx="2" ry="2" />
<text  x="806.13" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="276.6" y="917" width="0.1" height="15.0" fill="rgb(248,151,9)" rx="2" ry="2" />
<text  x="279.59" y="927.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::length (1 samples, 0.01%)</title><rect x="804.4" y="709" width="0.2" height="15.0" fill="rgb(248,116,30)" rx="2" ry="2" />
<text  x="807.43" y="719.5" ></text>
</g>
<g >
<title>vmware_sched_clock (1 samples, 0.01%)</title><rect x="581.3" y="709" width="0.2" height="15.0" fill="rgb(208,150,13)" rx="2" ry="2" />
<text  x="584.33" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="123.8" y="725" width="0.2" height="15.0" fill="rgb(244,149,15)" rx="2" ry="2" />
<text  x="126.81" y="735.5" ></text>
</g>
<g >
<title>tcp_cwnd_restart (1 samples, 0.01%)</title><rect x="156.6" y="469" width="0.2" height="15.0" fill="rgb(244,215,12)" rx="2" ry="2" />
<text  x="159.63" y="479.5" ></text>
</g>
<g >
<title>vfs_write (530 samples, 7.26%)</title><rect x="1031.4" y="565" width="85.7" height="15.0" fill="rgb(207,99,11)" rx="2" ry="2" />
<text  x="1034.41" y="575.5" >vfs_write</text>
</g>
<g >
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="241.8" y="453" width="0.4" height="15.0" fill="rgb(248,107,7)" rx="2" ry="2" />
<text  x="244.83" y="463.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (3 samples, 0.04%)</title><rect x="129.8" y="805" width="0.5" height="15.0" fill="rgb(250,71,45)" rx="2" ry="2" />
<text  x="132.79" y="815.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1188.1" y="757" width="0.1" height="15.0" fill="rgb(254,172,54)" rx="2" ry="2" />
<text  x="1191.06" y="767.5" ></text>
</g>
<g >
<title>all (7,299 samples, 100%)</title><rect x="10.0" y="1029" width="1180.0" height="15.0" fill="rgb(236,94,51)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>lookup_fast (16 samples, 0.22%)</title><rect x="1170.8" y="549" width="2.5" height="15.0" fill="rgb(206,151,51)" rx="2" ry="2" />
<text  x="1173.76" y="559.5" ></text>
</g>
<g >
<title>loopback_xmit (6 samples, 0.08%)</title><rect x="480.6" y="293" width="1.0" height="15.0" fill="rgb(238,212,37)" rx="2" ry="2" />
<text  x="483.61" y="303.5" ></text>
</g>
<g >
<title>[webServer] (2 samples, 0.03%)</title><rect x="621.6" y="997" width="0.3" height="15.0" fill="rgb(221,30,28)" rx="2" ry="2" />
<text  x="624.58" y="1007.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="501" width="0.2" height="15.0" fill="rgb(221,4,4)" rx="2" ry="2" />
<text  x="1123.81" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1010.4" y="597" width="0.2" height="15.0" fill="rgb(229,6,47)" rx="2" ry="2" />
<text  x="1013.39" y="607.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="69.7" y="677" width="0.1" height="15.0" fill="rgb(227,50,18)" rx="2" ry="2" />
<text  x="72.65" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="66.9" y="757" width="0.2" height="15.0" fill="rgb(241,203,49)" rx="2" ry="2" />
<text  x="69.91" y="767.5" ></text>
</g>
<g >
<title>tcp_options_write (1 samples, 0.01%)</title><rect x="483.7" y="437" width="0.1" height="15.0" fill="rgb(235,43,30)" rx="2" ry="2" />
<text  x="486.68" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="808.6" y="693" width="0.2" height="15.0" fill="rgb(243,131,43)" rx="2" ry="2" />
<text  x="811.63" y="703.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::put (18 samples, 0.25%)</title><rect x="341.1" y="565" width="2.9" height="15.0" fill="rgb(252,55,48)" rx="2" ry="2" />
<text  x="344.09" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; &gt;::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; const&amp;, true&gt; (1 samples, 0.01%)</title><rect x="97.6" y="533" width="0.2" height="15.0" fill="rgb(208,185,37)" rx="2" ry="2" />
<text  x="100.62" y="543.5" ></text>
</g>
<g >
<title>bictcp_cong_avoid (1 samples, 0.01%)</title><rect x="908.5" y="389" width="0.2" height="15.0" fill="rgb(207,226,54)" rx="2" ry="2" />
<text  x="911.54" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (2 samples, 0.03%)</title><rect x="106.0" y="453" width="0.4" height="15.0" fill="rgb(254,229,16)" rx="2" ry="2" />
<text  x="109.03" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_free (3 samples, 0.04%)</title><rect x="909.8" y="341" width="0.5" height="15.0" fill="rgb(247,138,48)" rx="2" ry="2" />
<text  x="912.83" y="351.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.01%)</title><rect x="551.7" y="741" width="0.2" height="15.0" fill="rgb(251,70,0)" rx="2" ry="2" />
<text  x="554.74" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.01%)</title><rect x="1129.5" y="613" width="0.2" height="15.0" fill="rgb(240,225,4)" rx="2" ry="2" />
<text  x="1132.54" y="623.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="648.7" y="917" width="0.2" height="15.0" fill="rgb(230,110,41)" rx="2" ry="2" />
<text  x="651.74" y="927.5" ></text>
</g>
<g >
<title>fput (1 samples, 0.01%)</title><rect x="86.5" y="597" width="0.1" height="15.0" fill="rgb(211,110,23)" rx="2" ry="2" />
<text  x="89.47" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="1188.7" y="885" width="0.5" height="15.0" fill="rgb(211,229,35)" rx="2" ry="2" />
<text  x="1191.71" y="895.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1012.0" y="613" width="0.2" height="15.0" fill="rgb(214,93,48)" rx="2" ry="2" />
<text  x="1015.01" y="623.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="581.3" y="725" width="0.2" height="15.0" fill="rgb(226,63,49)" rx="2" ry="2" />
<text  x="584.33" y="735.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="1017.0" y="645" width="0.3" height="15.0" fill="rgb(244,208,24)" rx="2" ry="2" />
<text  x="1020.02" y="655.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.01%)</title><rect x="1174.6" y="581" width="0.2" height="15.0" fill="rgb(218,207,18)" rx="2" ry="2" />
<text  x="1177.64" y="591.5" ></text>
</g>
<g >
<title>start_thread (1,198 samples, 16.41%)</title><rect x="991.5" y="997" width="193.7" height="15.0" fill="rgb(215,226,38)" rx="2" ry="2" />
<text  x="994.47" y="1007.5" >start_thread</text>
</g>
<g >
<title>copyin (1 samples, 0.01%)</title><rect x="153.7" y="485" width="0.2" height="15.0" fill="rgb(243,82,6)" rx="2" ry="2" />
<text  x="156.72" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5 samples, 0.07%)</title><rect x="770.8" y="677" width="0.8" height="15.0" fill="rgb(251,100,14)" rx="2" ry="2" />
<text  x="773.80" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (13 samples, 0.18%)</title><rect x="1021.5" y="661" width="2.1" height="15.0" fill="rgb(212,216,32)" rx="2" ry="2" />
<text  x="1024.54" y="671.5" ></text>
</g>
<g >
<title>tcp_close (1 samples, 0.01%)</title><rect x="997.8" y="389" width="0.1" height="15.0" fill="rgb(224,183,23)" rx="2" ry="2" />
<text  x="1000.78" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1011.0" y="613" width="0.2" height="15.0" fill="rgb(217,206,43)" rx="2" ry="2" />
<text  x="1014.04" y="623.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (19 samples, 0.26%)</title><rect x="604.4" y="981" width="3.1" height="15.0" fill="rgb(246,208,4)" rx="2" ry="2" />
<text  x="607.45" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="385.2" y="549" width="0.2" height="15.0" fill="rgb(205,90,46)" rx="2" ry="2" />
<text  x="388.23" y="559.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.01%)</title><rect x="512.3" y="805" width="0.2" height="15.0" fill="rgb(239,175,27)" rx="2" ry="2" />
<text  x="515.30" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="103.1" y="453" width="0.2" height="15.0" fill="rgb(233,153,42)" rx="2" ry="2" />
<text  x="106.12" y="463.5" ></text>
</g>
<g >
<title>SYSC_newstat (67 samples, 0.92%)</title><rect x="1166.7" y="661" width="10.9" height="15.0" fill="rgb(205,84,12)" rx="2" ry="2" />
<text  x="1169.72" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="796.3" y="565" width="0.2" height="15.0" fill="rgb(231,200,12)" rx="2" ry="2" />
<text  x="799.34" y="575.5" ></text>
</g>
<g >
<title>tcp_recvmsg (23 samples, 0.32%)</title><rect x="329.8" y="485" width="3.7" height="15.0" fill="rgb(254,186,18)" rx="2" ry="2" />
<text  x="332.78" y="495.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.01%)</title><rect x="763.0" y="517" width="0.2" height="15.0" fill="rgb(248,51,34)" rx="2" ry="2" />
<text  x="766.04" y="527.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (2 samples, 0.03%)</title><rect x="372.5" y="741" width="0.3" height="15.0" fill="rgb(244,214,7)" rx="2" ry="2" />
<text  x="375.46" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="612.5" y="965" width="0.5" height="15.0" fill="rgb(250,66,21)" rx="2" ry="2" />
<text  x="615.53" y="975.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="128.0" y="789" width="0.2" height="15.0" fill="rgb(227,68,39)" rx="2" ry="2" />
<text  x="131.02" y="799.5" ></text>
</g>
<g >
<title>__strcasecmp_avx (3 samples, 0.04%)</title><rect x="1164.0" y="725" width="0.5" height="15.0" fill="rgb(248,207,16)" rx="2" ry="2" />
<text  x="1166.97" y="735.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (6 samples, 0.08%)</title><rect x="1147.3" y="677" width="1.0" height="15.0" fill="rgb(208,179,48)" rx="2" ry="2" />
<text  x="1150.32" y="687.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator@plt (1 samples, 0.01%)</title><rect x="813.0" y="709" width="0.2" height="15.0" fill="rgb(251,221,35)" rx="2" ry="2" />
<text  x="815.99" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="385.6" y="693" width="0.3" height="15.0" fill="rgb(206,67,21)" rx="2" ry="2" />
<text  x="388.55" y="703.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.01%)</title><rect x="850.3" y="677" width="0.2" height="15.0" fill="rgb(212,93,34)" rx="2" ry="2" />
<text  x="853.34" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="115.2" y="725" width="0.4" height="15.0" fill="rgb(220,107,25)" rx="2" ry="2" />
<text  x="118.24" y="735.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::net::TcpConnection*, std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="358.6" y="709" width="0.1" height="15.0" fill="rgb(237,224,19)" rx="2" ry="2" />
<text  x="361.55" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1152.2" y="629" width="0.1" height="15.0" fill="rgb(219,119,28)" rx="2" ry="2" />
<text  x="1155.17" y="639.5" ></text>
</g>
<g >
<title>skb_release_all (4 samples, 0.05%)</title><rect x="330.4" y="453" width="0.7" height="15.0" fill="rgb(223,77,27)" rx="2" ry="2" />
<text  x="333.42" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="91.8" y="453" width="0.2" height="15.0" fill="rgb(213,151,26)" rx="2" ry="2" />
<text  x="94.80" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (2 samples, 0.03%)</title><rect x="101.8" y="549" width="0.3" height="15.0" fill="rgb(253,15,18)" rx="2" ry="2" />
<text  x="104.83" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="69.7" y="693" width="0.1" height="15.0" fill="rgb(225,14,41)" rx="2" ry="2" />
<text  x="72.65" y="703.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;2ul, muduo::Timestamp&amp;&amp;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="90.3" y="533" width="0.2" height="15.0" fill="rgb(228,76,15)" rx="2" ry="2" />
<text  x="93.35" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="338.5" y="629" width="0.2" height="15.0" fill="rgb(249,77,9)" rx="2" ry="2" />
<text  x="341.51" y="639.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (10 samples, 0.14%)</title><rect x="1186.8" y="837" width="1.6" height="15.0" fill="rgb(245,90,28)" rx="2" ry="2" />
<text  x="1189.77" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1129.5" y="645" width="0.2" height="15.0" fill="rgb(238,78,30)" rx="2" ry="2" />
<text  x="1132.54" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="356.6" y="597" width="0.2" height="15.0" fill="rgb(235,162,24)" rx="2" ry="2" />
<text  x="359.61" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (4 samples, 0.05%)</title><rect x="997.5" y="821" width="0.6" height="15.0" fill="rgb(254,137,18)" rx="2" ry="2" />
<text  x="1000.46" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (3 samples, 0.04%)</title><rect x="780.0" y="629" width="0.5" height="15.0" fill="rgb(246,181,54)" rx="2" ry="2" />
<text  x="783.02" y="639.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1013.6" y="565" width="0.2" height="15.0" fill="rgb(226,8,40)" rx="2" ry="2" />
<text  x="1016.62" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (2 samples, 0.03%)</title><rect x="379.9" y="757" width="0.3" height="15.0" fill="rgb(244,200,46)" rx="2" ry="2" />
<text  x="382.89" y="767.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (37 samples, 0.51%)</title><rect x="363.4" y="805" width="6.0" height="15.0" fill="rgb(231,64,18)" rx="2" ry="2" />
<text  x="366.40" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5 samples, 0.07%)</title><rect x="775.0" y="693" width="0.8" height="15.0" fill="rgb(216,209,2)" rx="2" ry="2" />
<text  x="778.00" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="350.3" y="485" width="0.2" height="15.0" fill="rgb(216,1,27)" rx="2" ry="2" />
<text  x="353.31" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="948.8" y="949" width="0.2" height="15.0" fill="rgb(219,179,48)" rx="2" ry="2" />
<text  x="951.79" y="959.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (15 samples, 0.21%)</title><rect x="154.0" y="485" width="2.5" height="15.0" fill="rgb(234,1,0)" rx="2" ry="2" />
<text  x="157.04" y="495.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (13 samples, 0.18%)</title><rect x="97.0" y="565" width="2.1" height="15.0" fill="rgb(214,14,42)" rx="2" ry="2" />
<text  x="99.98" y="575.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.01%)</title><rect x="479.5" y="229" width="0.1" height="15.0" fill="rgb(209,195,41)" rx="2" ry="2" />
<text  x="482.48" y="239.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (1 samples, 0.01%)</title><rect x="1179.3" y="725" width="0.2" height="15.0" fill="rgb(214,177,19)" rx="2" ry="2" />
<text  x="1182.33" y="735.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1147.6" y="613" width="0.2" height="15.0" fill="rgb(230,190,39)" rx="2" ry="2" />
<text  x="1150.64" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="272.4" y="949" width="0.1" height="15.0" fill="rgb(235,34,50)" rx="2" ry="2" />
<text  x="275.38" y="959.5" ></text>
</g>
<g >
<title>__fget (3 samples, 0.04%)</title><rect x="1030.8" y="533" width="0.4" height="15.0" fill="rgb(245,168,20)" rx="2" ry="2" />
<text  x="1033.76" y="543.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (13 samples, 0.18%)</title><rect x="365.7" y="773" width="2.1" height="15.0" fill="rgb(211,134,6)" rx="2" ry="2" />
<text  x="368.67" y="783.5" ></text>
</g>
<g >
<title>do_iter_read (38 samples, 0.52%)</title><rect x="329.1" y="565" width="6.2" height="15.0" fill="rgb(248,197,54)" rx="2" ry="2" />
<text  x="332.13" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::tuple (2 samples, 0.03%)</title><rect x="771.1" y="613" width="0.3" height="15.0" fill="rgb(247,88,22)" rx="2" ry="2" />
<text  x="774.12" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (3 samples, 0.04%)</title><rect x="492.2" y="773" width="0.5" height="15.0" fill="rgb(235,215,34)" rx="2" ry="2" />
<text  x="495.25" y="783.5" ></text>
</g>
<g >
<title>skb_clone (1 samples, 0.01%)</title><rect x="482.1" y="421" width="0.1" height="15.0" fill="rgb(246,124,19)" rx="2" ry="2" />
<text  x="485.06" y="431.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.01%)</title><rect x="997.8" y="453" width="0.1" height="15.0" fill="rgb(228,48,33)" rx="2" ry="2" />
<text  x="1000.78" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::_Placeholder&lt;1&gt;, true&gt;::_M_head (1 samples, 0.01%)</title><rect x="358.7" y="693" width="0.2" height="15.0" fill="rgb(220,143,51)" rx="2" ry="2" />
<text  x="361.71" y="703.5" ></text>
</g>
<g >
<title>lookup_fast (19 samples, 0.26%)</title><rect x="826.3" y="549" width="3.0" height="15.0" fill="rgb(246,216,13)" rx="2" ry="2" />
<text  x="829.25" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1123.7" y="565" width="0.2" height="15.0" fill="rgb(248,173,29)" rx="2" ry="2" />
<text  x="1126.72" y="575.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1 samples, 0.01%)</title><rect x="479.0" y="85" width="0.2" height="15.0" fill="rgb(228,109,36)" rx="2" ry="2" />
<text  x="481.99" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="775.8" y="661" width="0.2" height="15.0" fill="rgb(218,34,29)" rx="2" ry="2" />
<text  x="778.81" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1133.1" y="645" width="0.2" height="15.0" fill="rgb(244,98,22)" rx="2" ry="2" />
<text  x="1136.09" y="655.5" ></text>
</g>
<g >
<title>tcp_chrono_start (1 samples, 0.01%)</title><rect x="156.5" y="469" width="0.1" height="15.0" fill="rgb(246,140,48)" rx="2" ry="2" />
<text  x="159.47" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (2 samples, 0.03%)</title><rect x="1159.4" y="693" width="0.4" height="15.0" fill="rgb(252,87,0)" rx="2" ry="2" />
<text  x="1162.45" y="703.5" ></text>
</g>
<g >
<title>complete_walk (4 samples, 0.05%)</title><rect x="1168.7" y="581" width="0.6" height="15.0" fill="rgb(237,18,10)" rx="2" ry="2" />
<text  x="1171.66" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (4 samples, 0.05%)</title><rect x="353.4" y="517" width="0.6" height="15.0" fill="rgb(219,57,25)" rx="2" ry="2" />
<text  x="356.38" y="527.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (1 samples, 0.01%)</title><rect x="63.0" y="757" width="0.2" height="15.0" fill="rgb(215,175,23)" rx="2" ry="2" />
<text  x="66.03" y="767.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.01%)</title><rect x="330.3" y="325" width="0.1" height="15.0" fill="rgb(243,54,43)" rx="2" ry="2" />
<text  x="333.26" y="335.5" ></text>
</g>
<g >
<title>std::locale::locale (2 samples, 0.03%)</title><rect x="20.0" y="965" width="0.3" height="15.0" fill="rgb(237,160,24)" rx="2" ry="2" />
<text  x="23.02" y="975.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="682.9" y="613" width="0.1" height="15.0" fill="rgb(207,151,4)" rx="2" ry="2" />
<text  x="685.85" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="990.8" y="981" width="0.2" height="15.0" fill="rgb(237,137,52)" rx="2" ry="2" />
<text  x="993.83" y="991.5" ></text>
</g>
<g >
<title>sock_sendmsg (227 samples, 3.11%)</title><rect x="548.0" y="853" width="36.7" height="15.0" fill="rgb(209,20,36)" rx="2" ry="2" />
<text  x="551.02" y="863.5" >soc..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1187.6" y="645" width="0.1" height="15.0" fill="rgb(221,103,21)" rx="2" ry="2" />
<text  x="1190.58" y="655.5" ></text>
</g>
<g >
<title>__lock_text_start (6 samples, 0.08%)</title><rect x="44.8" y="693" width="0.9" height="15.0" fill="rgb(244,115,25)" rx="2" ry="2" />
<text  x="47.76" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="1136.7" y="661" width="0.3" height="15.0" fill="rgb(233,184,44)" rx="2" ry="2" />
<text  x="1139.65" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="92.6" y="533" width="0.3" height="15.0" fill="rgb(233,81,17)" rx="2" ry="2" />
<text  x="95.61" y="543.5" ></text>
</g>
<g >
<title>strncpy_from_user (5 samples, 0.07%)</title><rect x="1174.8" y="597" width="0.8" height="15.0" fill="rgb(209,199,36)" rx="2" ry="2" />
<text  x="1177.80" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::unique_ptr&lt;char*, std::default_delete&lt;char []&gt;, void, bool&gt; (1 samples, 0.01%)</title><rect x="1132.6" y="693" width="0.2" height="15.0" fill="rgb(243,18,42)" rx="2" ry="2" />
<text  x="1135.61" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1185.8" y="981" width="0.2" height="15.0" fill="rgb(253,171,9)" rx="2" ry="2" />
<text  x="1188.80" y="991.5" ></text>
</g>
<g >
<title>std::move&lt;bool  (1 samples, 0.01%)</title><rect x="345.3" y="501" width="0.2" height="15.0" fill="rgb(235,150,19)" rx="2" ry="2" />
<text  x="348.30" y="511.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (2 samples, 0.03%)</title><rect x="680.1" y="549" width="0.3" height="15.0" fill="rgb(252,85,1)" rx="2" ry="2" />
<text  x="683.11" y="559.5" ></text>
</g>
<g >
<title>sdscatfmt (2 samples, 0.03%)</title><rect x="652.3" y="997" width="0.3" height="15.0" fill="rgb(208,117,37)" rx="2" ry="2" />
<text  x="655.30" y="1007.5" ></text>
</g>
<g >
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="240.4" y="389" width="0.3" height="15.0" fill="rgb(240,226,51)" rx="2" ry="2" />
<text  x="243.37" y="399.5" ></text>
</g>
<g >
<title>__vfs_write (2 samples, 0.03%)</title><rect x="88.2" y="261" width="0.4" height="15.0" fill="rgb(210,106,4)" rx="2" ry="2" />
<text  x="91.25" y="271.5" ></text>
</g>
<g >
<title>_itoa_word (4 samples, 0.05%)</title><rect x="272.5" y="965" width="0.7" height="15.0" fill="rgb(225,177,8)" rx="2" ry="2" />
<text  x="275.55" y="975.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (6 samples, 0.08%)</title><rect x="266.2" y="965" width="1.0" height="15.0" fill="rgb(221,130,37)" rx="2" ry="2" />
<text  x="269.24" y="975.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="680.3" y="533" width="0.1" height="15.0" fill="rgb(223,164,37)" rx="2" ry="2" />
<text  x="683.27" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="385.7" y="549" width="0.2" height="15.0" fill="rgb(223,0,17)" rx="2" ry="2" />
<text  x="388.71" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="112.7" y="677" width="0.1" height="15.0" fill="rgb(244,33,36)" rx="2" ry="2" />
<text  x="115.66" y="687.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.01%)</title><rect x="110.2" y="533" width="0.2" height="15.0" fill="rgb(239,36,19)" rx="2" ry="2" />
<text  x="113.23" y="543.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (4 samples, 0.05%)</title><rect x="995.8" y="773" width="0.7" height="15.0" fill="rgb(243,187,23)" rx="2" ry="2" />
<text  x="998.84" y="783.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (3 samples, 0.04%)</title><rect x="992.0" y="821" width="0.4" height="15.0" fill="rgb(241,33,27)" rx="2" ry="2" />
<text  x="994.96" y="831.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::fillActiveChannels (40 samples, 0.55%)</title><rect x="374.2" y="805" width="6.5" height="15.0" fill="rgb(246,212,35)" rx="2" ry="2" />
<text  x="377.23" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="656.2" y="821" width="0.3" height="15.0" fill="rgb(245,197,40)" rx="2" ry="2" />
<text  x="659.18" y="831.5" ></text>
</g>
<g >
<title>vfs_write (562 samples, 7.70%)</title><rect x="395.9" y="613" width="90.9" height="15.0" fill="rgb(213,119,10)" rx="2" ry="2" />
<text  x="398.90" y="623.5" >vfs_write</text>
</g>
<g >
<title>tcp_established_options (1 samples, 0.01%)</title><rect x="242.2" y="453" width="0.1" height="15.0" fill="rgb(228,116,8)" rx="2" ry="2" />
<text  x="245.15" y="463.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (4 samples, 0.05%)</title><rect x="1014.4" y="645" width="0.7" height="15.0" fill="rgb(249,221,6)" rx="2" ry="2" />
<text  x="1017.43" y="655.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="671.7" y="645" width="0.2" height="15.0" fill="rgb(236,110,13)" rx="2" ry="2" />
<text  x="674.70" y="655.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="848.7" y="789" width="0.5" height="15.0" fill="rgb(237,86,20)" rx="2" ry="2" />
<text  x="851.72" y="799.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; (1 samples, 0.01%)</title><rect x="348.5" y="453" width="0.2" height="15.0" fill="rgb(238,83,45)" rx="2" ry="2" />
<text  x="351.53" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="337.7" y="469" width="0.2" height="15.0" fill="rgb(245,100,30)" rx="2" ry="2" />
<text  x="340.70" y="479.5" ></text>
</g>
<g >
<title>__check_object_size (1 samples, 0.01%)</title><rect x="830.9" y="597" width="0.2" height="15.0" fill="rgb(251,142,42)" rx="2" ry="2" />
<text  x="833.94" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="544.1" y="965" width="0.7" height="15.0" fill="rgb(214,196,32)" rx="2" ry="2" />
<text  x="547.14" y="975.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1 samples, 0.01%)</title><rect x="337.7" y="437" width="0.2" height="15.0" fill="rgb(252,44,16)" rx="2" ry="2" />
<text  x="340.70" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple (2 samples, 0.03%)</title><rect x="342.9" y="437" width="0.3" height="15.0" fill="rgb(249,33,35)" rx="2" ry="2" />
<text  x="345.87" y="447.5" ></text>
</g>
<g >
<title>tcp_push (520 samples, 7.12%)</title><rect x="157.1" y="485" width="84.1" height="15.0" fill="rgb(211,218,22)" rx="2" ry="2" />
<text  x="160.12" y="495.5" >tcp_push</text>
</g>
<g >
<title>boost::less_than_comparable1&lt;muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt; &gt;::less_than_comparable1 (1 samples, 0.01%)</title><rect x="496.0" y="725" width="0.1" height="15.0" fill="rgb(223,58,21)" rx="2" ry="2" />
<text  x="498.97" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="22.0" y="901" width="0.1" height="15.0" fill="rgb(215,66,50)" rx="2" ry="2" />
<text  x="24.96" y="911.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.01%)</title><rect x="82.6" y="181" width="0.1" height="15.0" fill="rgb(216,126,17)" rx="2" ry="2" />
<text  x="85.59" y="191.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::~FixedBuffer (1 samples, 0.01%)</title><rect x="499.4" y="773" width="0.1" height="15.0" fill="rgb(234,32,45)" rx="2" ry="2" />
<text  x="502.36" y="783.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.04%)</title><rect x="29.1" y="981" width="0.5" height="15.0" fill="rgb(219,86,30)" rx="2" ry="2" />
<text  x="32.08" y="991.5" ></text>
</g>
<g >
<title>free (2 samples, 0.03%)</title><rect x="954.3" y="981" width="0.3" height="15.0" fill="rgb(250,39,17)" rx="2" ry="2" />
<text  x="957.29" y="991.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1 samples, 0.01%)</title><rect x="512.5" y="805" width="0.1" height="15.0" fill="rgb(247,222,13)" rx="2" ry="2" />
<text  x="515.46" y="815.5" ></text>
</g>
<g >
<title>CZlibMgr::UnCompress (1 samples, 0.01%)</title><rect x="663.3" y="693" width="0.2" height="15.0" fill="rgb(236,17,16)" rx="2" ry="2" />
<text  x="666.29" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::_M_erase_at_end (2 samples, 0.03%)</title><rect x="504.5" y="805" width="0.4" height="15.0" fill="rgb(241,49,26)" rx="2" ry="2" />
<text  x="507.54" y="815.5" ></text>
</g>
<g >
<title>sock_poll (8 samples, 0.11%)</title><rect x="42.7" y="693" width="1.2" height="15.0" fill="rgb(237,32,26)" rx="2" ry="2" />
<text  x="45.66" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1010.4" y="613" width="0.2" height="15.0" fill="rgb(223,37,4)" rx="2" ry="2" />
<text  x="1013.39" y="623.5" ></text>
</g>
<g >
<title>__inet_lookup_established (7 samples, 0.10%)</title><rect x="163.7" y="133" width="1.2" height="15.0" fill="rgb(220,20,35)" rx="2" ry="2" />
<text  x="166.74" y="143.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="320.2" y="693" width="0.2" height="15.0" fill="rgb(226,20,11)" rx="2" ry="2" />
<text  x="323.24" y="703.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;&gt; (2 samples, 0.03%)</title><rect x="112.0" y="709" width="0.3" height="15.0" fill="rgb(245,46,8)" rx="2" ry="2" />
<text  x="115.01" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="679.3" y="645" width="0.2" height="15.0" fill="rgb(233,123,36)" rx="2" ry="2" />
<text  x="682.30" y="655.5" ></text>
</g>
<g >
<title>sys_getsockopt (1 samples, 0.01%)</title><rect x="324.8" y="629" width="0.1" height="15.0" fill="rgb(225,108,43)" rx="2" ry="2" />
<text  x="327.76" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;void  (679 samples, 9.30%)</title><rect x="135.8" y="805" width="109.7" height="15.0" fill="rgb(242,171,9)" rx="2" ry="2" />
<text  x="138.78" y="815.5" >std::function..</text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="137.6" y="597" width="0.1" height="15.0" fill="rgb(218,52,16)" rx="2" ry="2" />
<text  x="140.55" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="794.2" y="613" width="0.2" height="15.0" fill="rgb(252,126,41)" rx="2" ry="2" />
<text  x="797.24" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="353.4" y="453" width="0.1" height="15.0" fill="rgb(239,222,19)" rx="2" ry="2" />
<text  x="356.38" y="463.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;1&gt;, false, true&gt;::operator (1 samples, 0.01%)</title><rect x="90.2" y="613" width="0.1" height="15.0" fill="rgb(246,212,16)" rx="2" ry="2" />
<text  x="93.19" y="623.5" ></text>
</g>
<g >
<title>__virt_addr_valid (3 samples, 0.04%)</title><rect x="398.3" y="469" width="0.5" height="15.0" fill="rgb(249,204,20)" rx="2" ry="2" />
<text  x="401.32" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="352.9" y="453" width="0.2" height="15.0" fill="rgb(250,220,22)" rx="2" ry="2" />
<text  x="355.89" y="463.5" ></text>
</g>
<g >
<title>skb_release_all (4 samples, 0.05%)</title><rect x="563.9" y="357" width="0.6" height="15.0" fill="rgb(242,52,33)" rx="2" ry="2" />
<text  x="566.87" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="337.7" y="501" width="0.2" height="15.0" fill="rgb(213,188,53)" rx="2" ry="2" />
<text  x="340.70" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_M_lower_bound (28 samples, 0.38%)</title><rect x="375.4" y="757" width="4.5" height="15.0" fill="rgb(228,180,29)" rx="2" ry="2" />
<text  x="378.37" y="767.5" ></text>
</g>
<g >
<title>ep_send_events_proc (2 samples, 0.03%)</title><rect x="295.0" y="741" width="0.3" height="15.0" fill="rgb(252,202,32)" rx="2" ry="2" />
<text  x="298.02" y="751.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.10%)</title><rect x="942.8" y="981" width="1.1" height="15.0" fill="rgb(225,2,27)" rx="2" ry="2" />
<text  x="945.81" y="991.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (4 samples, 0.05%)</title><rect x="366.8" y="757" width="0.6" height="15.0" fill="rgb(244,143,49)" rx="2" ry="2" />
<text  x="369.80" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (5 samples, 0.07%)</title><rect x="778.1" y="677" width="0.8" height="15.0" fill="rgb(210,54,28)" rx="2" ry="2" />
<text  x="781.08" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.01%)</title><rect x="807.3" y="629" width="0.2" height="15.0" fill="rgb(207,192,18)" rx="2" ry="2" />
<text  x="810.34" y="639.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (3 samples, 0.04%)</title><rect x="1134.5" y="565" width="0.5" height="15.0" fill="rgb(207,47,34)" rx="2" ry="2" />
<text  x="1137.55" y="575.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (467 samples, 6.40%)</title><rect x="159.9" y="341" width="75.5" height="15.0" fill="rgb(220,216,13)" rx="2" ry="2" />
<text  x="162.86" y="351.5" >__local_..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="787.8" y="597" width="0.1" height="15.0" fill="rgb(228,215,53)" rx="2" ry="2" />
<text  x="790.78" y="607.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="532.8" y="885" width="0.2" height="15.0" fill="rgb(246,99,43)" rx="2" ry="2" />
<text  x="535.83" y="895.5" ></text>
</g>
<g >
<title>__vfs_read (1 samples, 0.01%)</title><rect x="845.7" y="933" width="0.1" height="15.0" fill="rgb(238,42,2)" rx="2" ry="2" />
<text  x="848.65" y="943.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1152.3" y="693" width="0.2" height="15.0" fill="rgb(246,57,32)" rx="2" ry="2" />
<text  x="1155.33" y="703.5" ></text>
</g>
<g >
<title>asyncOutput (1 samples, 0.01%)</title><rect x="116.4" y="805" width="0.1" height="15.0" fill="rgb(225,3,3)" rx="2" ry="2" />
<text  x="119.38" y="815.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (1 samples, 0.01%)</title><rect x="373.9" y="805" width="0.2" height="15.0" fill="rgb(239,199,17)" rx="2" ry="2" />
<text  x="376.91" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="1150.6" y="645" width="0.1" height="15.0" fill="rgb(237,34,10)" rx="2" ry="2" />
<text  x="1153.55" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.03%)</title><rect x="106.8" y="517" width="0.4" height="15.0" fill="rgb(243,38,54)" rx="2" ry="2" />
<text  x="109.84" y="527.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (256 samples, 3.51%)</title><rect x="70.0" y="725" width="41.4" height="15.0" fill="rgb(241,166,31)" rx="2" ry="2" />
<text  x="72.98" y="735.5" >std..</text>
</g>
<g >
<title>pthread_once@plt (1 samples, 0.01%)</title><rect x="30.4" y="949" width="0.1" height="15.0" fill="rgb(223,210,38)" rx="2" ry="2" />
<text  x="33.37" y="959.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="290.5" y="741" width="0.6" height="15.0" fill="rgb(221,156,14)" rx="2" ry="2" />
<text  x="293.49" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (1 samples, 0.01%)</title><rect x="380.5" y="789" width="0.2" height="15.0" fill="rgb(212,87,17)" rx="2" ry="2" />
<text  x="383.54" y="799.5" ></text>
</g>
<g >
<title>path_lookupat (2 samples, 0.03%)</title><rect x="1175.6" y="613" width="0.3" height="15.0" fill="rgb(251,197,11)" rx="2" ry="2" />
<text  x="1178.61" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1014.8" y="629" width="0.3" height="15.0" fill="rgb(243,5,6)" rx="2" ry="2" />
<text  x="1017.75" y="639.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.01%)</title><rect x="834.0" y="565" width="0.2" height="15.0" fill="rgb(252,229,23)" rx="2" ry="2" />
<text  x="837.01" y="575.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1148.3" y="645" width="0.2" height="15.0" fill="rgb(233,196,2)" rx="2" ry="2" />
<text  x="1151.29" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1131.3" y="629" width="0.2" height="15.0" fill="rgb(216,4,32)" rx="2" ry="2" />
<text  x="1134.32" y="639.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="331.4" y="453" width="0.2" height="15.0" fill="rgb(215,103,11)" rx="2" ry="2" />
<text  x="334.39" y="463.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::add (1 samples, 0.01%)</title><rect x="117.3" y="773" width="0.2" height="15.0" fill="rgb(226,216,13)" rx="2" ry="2" />
<text  x="120.35" y="783.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (1 samples, 0.01%)</title><rect x="396.4" y="501" width="0.1" height="15.0" fill="rgb(239,96,53)" rx="2" ry="2" />
<text  x="399.38" y="511.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (19 samples, 0.26%)</title><rect x="71.1" y="677" width="3.1" height="15.0" fill="rgb(233,207,10)" rx="2" ry="2" />
<text  x="74.11" y="687.5" ></text>
</g>
<g >
<title>schedule (96 samples, 1.32%)</title><rect x="513.9" y="773" width="15.5" height="15.0" fill="rgb(230,123,28)" rx="2" ry="2" />
<text  x="516.91" y="783.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="351.1" y="469" width="0.2" height="15.0" fill="rgb(216,180,35)" rx="2" ry="2" />
<text  x="354.12" y="479.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="92.4" y="421" width="0.2" height="15.0" fill="rgb(214,16,32)" rx="2" ry="2" />
<text  x="95.45" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (3 samples, 0.04%)</title><rect x="1159.3" y="709" width="0.5" height="15.0" fill="rgb(218,3,8)" rx="2" ry="2" />
<text  x="1162.28" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="774.7" y="645" width="0.1" height="15.0" fill="rgb(216,69,27)" rx="2" ry="2" />
<text  x="777.68" y="655.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="368.3" y="741" width="0.1" height="15.0" fill="rgb(224,167,18)" rx="2" ry="2" />
<text  x="371.25" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.01%)</title><rect x="1188.2" y="549" width="0.2" height="15.0" fill="rgb(246,174,1)" rx="2" ry="2" />
<text  x="1191.22" y="559.5" ></text>
</g>
<g >
<title>tcp_established_options (1 samples, 0.01%)</title><rect x="242.6" y="469" width="0.2" height="15.0" fill="rgb(241,102,25)" rx="2" ry="2" />
<text  x="245.64" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="363.7" y="709" width="0.2" height="15.0" fill="rgb(243,103,40)" rx="2" ry="2" />
<text  x="366.73" y="719.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="949.4" y="981" width="0.2" height="15.0" fill="rgb(226,165,24)" rx="2" ry="2" />
<text  x="952.44" y="991.5" ></text>
</g>
<g >
<title>tcp_send_mss (9 samples, 0.12%)</title><rect x="582.9" y="789" width="1.5" height="15.0" fill="rgb(243,21,17)" rx="2" ry="2" />
<text  x="585.94" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (10 samples, 0.14%)</title><rect x="1186.8" y="821" width="1.6" height="15.0" fill="rgb(232,215,4)" rx="2" ry="2" />
<text  x="1189.77" y="831.5" ></text>
</g>
<g >
<title>vfprintf (2 samples, 0.03%)</title><rect x="621.3" y="981" width="0.3" height="15.0" fill="rgb(230,88,31)" rx="2" ry="2" />
<text  x="624.26" y="991.5" ></text>
</g>
<g >
<title>eventfd_write (2 samples, 0.03%)</title><rect x="1186.9" y="533" width="0.4" height="15.0" fill="rgb(216,228,46)" rx="2" ry="2" />
<text  x="1189.93" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="94.1" y="517" width="0.1" height="15.0" fill="rgb(206,100,9)" rx="2" ry="2" />
<text  x="97.07" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7 samples, 0.10%)</title><rect x="1138.3" y="613" width="1.1" height="15.0" fill="rgb(226,32,9)" rx="2" ry="2" />
<text  x="1141.27" y="623.5" ></text>
</g>
<g >
<title>muduo::LogStream::buffer (1 samples, 0.01%)</title><rect x="317.0" y="773" width="0.2" height="15.0" fill="rgb(244,54,12)" rx="2" ry="2" />
<text  x="320.00" y="783.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="40.7" y="725" width="0.2" height="15.0" fill="rgb(237,129,34)" rx="2" ry="2" />
<text  x="43.72" y="735.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="1015.1" y="501" width="0.1" height="15.0" fill="rgb(222,206,26)" rx="2" ry="2" />
<text  x="1018.08" y="511.5" ></text>
</g>
<g >
<title>fput (1 samples, 0.01%)</title><rect x="71.8" y="629" width="0.1" height="15.0" fill="rgb(216,179,43)" rx="2" ry="2" />
<text  x="74.76" y="639.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEventWithGuard (326 samples, 4.47%)</title><rect x="61.4" y="805" width="52.7" height="15.0" fill="rgb(228,35,0)" rx="2" ry="2" />
<text  x="64.41" y="815.5" >muduo..</text>
</g>
<g >
<title>std::_Maybe_unary_or_binary_function&lt;void&gt;::_Maybe_unary_or_binary_function (1 samples, 0.01%)</title><rect x="769.5" y="661" width="0.2" height="15.0" fill="rgb(208,107,11)" rx="2" ry="2" />
<text  x="772.51" y="671.5" ></text>
</g>
<g >
<title>common_file_perm (2 samples, 0.03%)</title><rect x="585.9" y="853" width="0.3" height="15.0" fill="rgb(254,96,47)" rx="2" ry="2" />
<text  x="588.85" y="863.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue (12 samples, 0.16%)</title><rect x="563.4" y="389" width="1.9" height="15.0" fill="rgb(246,32,29)" rx="2" ry="2" />
<text  x="566.38" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.04%)</title><rect x="350.5" y="517" width="0.5" height="15.0" fill="rgb(233,125,49)" rx="2" ry="2" />
<text  x="353.47" y="527.5" ></text>
</g>
<g >
<title>std::move&lt;void  (1 samples, 0.01%)</title><rect x="345.0" y="517" width="0.1" height="15.0" fill="rgb(253,119,26)" rx="2" ry="2" />
<text  x="347.97" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="245.7" y="757" width="1.8" height="15.0" fill="rgb(216,156,28)" rx="2" ry="2" />
<text  x="248.71" y="767.5" ></text>
</g>
<g >
<title>sys_read (1 samples, 0.01%)</title><rect x="1187.9" y="741" width="0.2" height="15.0" fill="rgb(229,13,41)" rx="2" ry="2" />
<text  x="1190.90" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="118.0" y="693" width="0.2" height="15.0" fill="rgb(244,93,16)" rx="2" ry="2" />
<text  x="120.99" y="703.5" ></text>
</g>
<g >
<title>redisCommandArgv (1 samples, 0.01%)</title><rect x="1126.0" y="693" width="0.1" height="15.0" fill="rgb(211,204,5)" rx="2" ry="2" />
<text  x="1128.98" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="89.1" y="597" width="0.1" height="15.0" fill="rgb(232,43,15)" rx="2" ry="2" />
<text  x="92.05" y="607.5" ></text>
</g>
<g >
<title>redisReaderGetReply (3 samples, 0.04%)</title><rect x="619.0" y="981" width="0.5" height="15.0" fill="rgb(211,201,23)" rx="2" ry="2" />
<text  x="622.00" y="991.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="382.2" y="773" width="0.3" height="15.0" fill="rgb(223,138,28)" rx="2" ry="2" />
<text  x="385.16" y="783.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="77.3" y="533" width="0.1" height="15.0" fill="rgb(235,223,47)" rx="2" ry="2" />
<text  x="80.25" y="543.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::connectDestroyed (1 samples, 0.01%)</title><rect x="137.6" y="709" width="0.1" height="15.0" fill="rgb(226,49,37)" rx="2" ry="2" />
<text  x="140.55" y="719.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="1015.1" y="581" width="0.1" height="15.0" fill="rgb(234,149,17)" rx="2" ry="2" />
<text  x="1018.08" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="769.8" y="581" width="0.2" height="15.0" fill="rgb(218,197,37)" rx="2" ry="2" />
<text  x="772.83" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="662.3" y="629" width="0.2" height="15.0" fill="rgb(246,139,9)" rx="2" ry="2" />
<text  x="665.32" y="639.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="953.2" y="917" width="0.1" height="15.0" fill="rgb(237,60,27)" rx="2" ry="2" />
<text  x="956.16" y="927.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (2 samples, 0.03%)</title><rect x="506.3" y="997" width="0.3" height="15.0" fill="rgb(210,20,10)" rx="2" ry="2" />
<text  x="509.31" y="1007.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1151.5" y="565" width="0.2" height="15.0" fill="rgb(218,111,40)" rx="2" ry="2" />
<text  x="1154.52" y="575.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (2 samples, 0.03%)</title><rect x="252.7" y="757" width="0.3" height="15.0" fill="rgb(209,33,31)" rx="2" ry="2" />
<text  x="255.66" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="601.4" y="933" width="0.1" height="15.0" fill="rgb(254,95,15)" rx="2" ry="2" />
<text  x="604.37" y="943.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="363.2" y="741" width="0.2" height="15.0" fill="rgb(223,126,9)" rx="2" ry="2" />
<text  x="366.24" y="751.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.04%)</title><rect x="18.1" y="965" width="0.5" height="15.0" fill="rgb(252,94,29)" rx="2" ry="2" />
<text  x="21.08" y="975.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::net::EventLoop*&gt; (2 samples, 0.03%)</title><rect x="111.5" y="709" width="0.3" height="15.0" fill="rgb(215,226,39)" rx="2" ry="2" />
<text  x="114.53" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::operator (3 samples, 0.04%)</title><rect x="1015.7" y="645" width="0.5" height="15.0" fill="rgb(205,7,39)" rx="2" ry="2" />
<text  x="1018.72" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="337.1" y="581" width="0.9" height="15.0" fill="rgb(225,75,25)" rx="2" ry="2" />
<text  x="340.05" y="591.5" ></text>
</g>
<g >
<title>tcp_rcv_established (420 samples, 5.75%)</title><rect x="166.2" y="117" width="67.9" height="15.0" fill="rgb(245,193,16)" rx="2" ry="2" />
<text  x="169.17" y="127.5" >tcp_rcv..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="657.5" y="725" width="0.1" height="15.0" fill="rgb(212,148,14)" rx="2" ry="2" />
<text  x="660.47" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (1 samples, 0.01%)</title><rect x="357.9" y="677" width="0.2" height="15.0" fill="rgb(220,201,52)" rx="2" ry="2" />
<text  x="360.91" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (494 samples, 6.77%)</title><rect x="685.9" y="613" width="79.9" height="15.0" fill="rgb(241,80,51)" rx="2" ry="2" />
<text  x="688.93" y="623.5" >entry_SYS..</text>
</g>
<g >
<title>apparmor_socket_recvmsg (1 samples, 0.01%)</title><rect x="333.5" y="485" width="0.2" height="15.0" fill="rgb(216,46,3)" rx="2" ry="2" />
<text  x="336.49" y="495.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="123.5" y="709" width="0.2" height="15.0" fill="rgb(220,114,37)" rx="2" ry="2" />
<text  x="126.49" y="719.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.05%)</title><rect x="780.0" y="677" width="0.7" height="15.0" fill="rgb(229,216,31)" rx="2" ry="2" />
<text  x="783.02" y="687.5" ></text>
</g>
<g >
<title>tcp_poll (1 samples, 0.01%)</title><rect x="294.2" y="693" width="0.2" height="15.0" fill="rgb(235,58,47)" rx="2" ry="2" />
<text  x="297.21" y="703.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1016.9" y="613" width="0.1" height="15.0" fill="rgb(231,38,51)" rx="2" ry="2" />
<text  x="1019.86" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="348.0" y="453" width="0.2" height="15.0" fill="rgb(239,55,25)" rx="2" ry="2" />
<text  x="351.04" y="463.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (3 samples, 0.04%)</title><rect x="670.6" y="661" width="0.5" height="15.0" fill="rgb(237,203,22)" rx="2" ry="2" />
<text  x="673.57" y="671.5" ></text>
</g>
<g >
<title>new_sync_write (553 samples, 7.58%)</title><rect x="396.1" y="581" width="89.4" height="15.0" fill="rgb(236,61,5)" rx="2" ry="2" />
<text  x="399.06" y="591.5" >new_sync_w..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="1007.8" y="661" width="0.2" height="15.0" fill="rgb(233,120,41)" rx="2" ry="2" />
<text  x="1010.80" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="1117.9" y="581" width="0.3" height="15.0" fill="rgb(220,194,39)" rx="2" ry="2" />
<text  x="1120.90" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="244.3" y="677" width="0.1" height="15.0" fill="rgb(223,25,35)" rx="2" ry="2" />
<text  x="247.25" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.01%)</title><rect x="1162.0" y="645" width="0.2" height="15.0" fill="rgb(230,167,38)" rx="2" ry="2" />
<text  x="1165.03" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="489.5" y="725" width="0.2" height="15.0" fill="rgb(222,42,22)" rx="2" ry="2" />
<text  x="492.50" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="385.4" y="661" width="0.2" height="15.0" fill="rgb(238,195,20)" rx="2" ry="2" />
<text  x="388.39" y="671.5" ></text>
</g>
<g >
<title>cmpxchg_double_slab.isra.33 (1 samples, 0.01%)</title><rect x="79.7" y="405" width="0.1" height="15.0" fill="rgb(210,91,13)" rx="2" ry="2" />
<text  x="82.68" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (6 samples, 0.08%)</title><rect x="342.5" y="517" width="1.0" height="15.0" fill="rgb(240,185,42)" rx="2" ry="2" />
<text  x="345.55" y="527.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (3 samples, 0.04%)</title><rect x="92.4" y="549" width="0.5" height="15.0" fill="rgb(216,186,28)" rx="2" ry="2" />
<text  x="95.45" y="559.5" ></text>
</g>
<g >
<title>dev_queue_xmit (19 samples, 0.26%)</title><rect x="577.0" y="645" width="3.0" height="15.0" fill="rgb(232,123,15)" rx="2" ry="2" />
<text  x="579.96" y="655.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="129.1" y="693" width="0.2" height="15.0" fill="rgb(239,122,4)" rx="2" ry="2" />
<text  x="132.15" y="703.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="1117.3" y="421" width="0.1" height="15.0" fill="rgb(254,35,41)" rx="2" ry="2" />
<text  x="1120.25" y="431.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (4 samples, 0.05%)</title><rect x="281.4" y="981" width="0.7" height="15.0" fill="rgb(216,49,44)" rx="2" ry="2" />
<text  x="284.44" y="991.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.01%)</title><rect x="807.0" y="565" width="0.2" height="15.0" fill="rgb(207,146,10)" rx="2" ry="2" />
<text  x="810.01" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="513.1" y="805" width="0.2" height="15.0" fill="rgb(216,156,10)" rx="2" ry="2" />
<text  x="516.10" y="815.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (7 samples, 0.10%)</title><rect x="1114.0" y="517" width="1.1" height="15.0" fill="rgb(218,47,38)" rx="2" ry="2" />
<text  x="1117.02" y="527.5" ></text>
</g>
<g >
<title>iov_iter_advance (1 samples, 0.01%)</title><rect x="894.3" y="773" width="0.2" height="15.0" fill="rgb(251,193,16)" rx="2" ry="2" />
<text  x="897.31" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.01%)</title><rect x="789.7" y="677" width="0.2" height="15.0" fill="rgb(216,125,12)" rx="2" ry="2" />
<text  x="792.72" y="687.5" ></text>
</g>
<g >
<title>security_socket_getsockopt (1 samples, 0.01%)</title><rect x="324.8" y="613" width="0.1" height="15.0" fill="rgb(233,142,32)" rx="2" ry="2" />
<text  x="327.76" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (25 samples, 0.34%)</title><rect x="351.1" y="549" width="4.1" height="15.0" fill="rgb(229,61,46)" rx="2" ry="2" />
<text  x="354.12" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="489.8" y="741" width="1.8" height="15.0" fill="rgb(239,206,47)" rx="2" ry="2" />
<text  x="492.82" y="751.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="240.5" y="357" width="0.2" height="15.0" fill="rgb(210,152,8)" rx="2" ry="2" />
<text  x="243.54" y="367.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="837.6" y="709" width="0.1" height="15.0" fill="rgb(208,141,19)" rx="2" ry="2" />
<text  x="840.57" y="719.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (5 samples, 0.07%)</title><rect x="341.1" y="549" width="0.8" height="15.0" fill="rgb(235,85,1)" rx="2" ry="2" />
<text  x="344.09" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="354.7" y="501" width="0.1" height="15.0" fill="rgb(246,96,9)" rx="2" ry="2" />
<text  x="357.67" y="511.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="675.4" y="597" width="0.2" height="15.0" fill="rgb(227,87,44)" rx="2" ry="2" />
<text  x="678.42" y="607.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="1117.9" y="613" width="0.3" height="15.0" fill="rgb(249,55,49)" rx="2" ry="2" />
<text  x="1120.90" y="623.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.01%)</title><rect x="286.0" y="981" width="0.1" height="15.0" fill="rgb(205,51,43)" rx="2" ry="2" />
<text  x="288.96" y="991.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="888.7" y="917" width="0.1" height="15.0" fill="rgb(228,200,16)" rx="2" ry="2" />
<text  x="891.65" y="927.5" ></text>
</g>
<g >
<title>__errno_location (2 samples, 0.03%)</title><rect x="797.6" y="709" width="0.4" height="15.0" fill="rgb(247,223,31)" rx="2" ry="2" />
<text  x="800.64" y="719.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="799.7" y="661" width="0.2" height="15.0" fill="rgb(226,86,12)" rx="2" ry="2" />
<text  x="802.74" y="671.5" ></text>
</g>
<g >
<title>path_init (1 samples, 0.01%)</title><rect x="1173.3" y="581" width="0.2" height="15.0" fill="rgb(216,47,53)" rx="2" ry="2" />
<text  x="1176.35" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1152.8" y="677" width="0.2" height="15.0" fill="rgb(238,112,17)" rx="2" ry="2" />
<text  x="1155.82" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="1165.3" y="693" width="0.3" height="15.0" fill="rgb(209,189,6)" rx="2" ry="2" />
<text  x="1168.27" y="703.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.01%)</title><rect x="997.8" y="469" width="0.1" height="15.0" fill="rgb(213,110,14)" rx="2" ry="2" />
<text  x="1000.78" y="479.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (3 samples, 0.04%)</title><rect x="62.5" y="757" width="0.5" height="15.0" fill="rgb(209,195,36)" rx="2" ry="2" />
<text  x="65.54" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt;::construct&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="354.2" y="469" width="0.1" height="15.0" fill="rgb(254,82,36)" rx="2" ry="2" />
<text  x="357.19" y="479.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (1 samples, 0.01%)</title><rect x="337.4" y="245" width="0.1" height="15.0" fill="rgb(222,50,33)" rx="2" ry="2" />
<text  x="340.37" y="255.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1006.5" y="645" width="0.2" height="15.0" fill="rgb(218,228,33)" rx="2" ry="2" />
<text  x="1009.51" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="488.2" y="709" width="0.2" height="15.0" fill="rgb(253,228,49)" rx="2" ry="2" />
<text  x="491.21" y="719.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="65.6" y="757" width="0.2" height="15.0" fill="rgb(244,207,47)" rx="2" ry="2" />
<text  x="68.61" y="767.5" ></text>
</g>
<g >
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="482.7" y="437" width="0.3" height="15.0" fill="rgb(226,9,24)" rx="2" ry="2" />
<text  x="485.71" y="447.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (10 samples, 0.14%)</title><rect x="128.2" y="789" width="1.6" height="15.0" fill="rgb(235,55,45)" rx="2" ry="2" />
<text  x="131.18" y="799.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (2 samples, 0.03%)</title><rect x="372.0" y="757" width="0.3" height="15.0" fill="rgb(215,159,26)" rx="2" ry="2" />
<text  x="374.97" y="767.5" ></text>
</g>
<g >
<title>std::locale::operator= (1 samples, 0.01%)</title><rect x="31.5" y="981" width="0.2" height="15.0" fill="rgb(253,218,48)" rx="2" ry="2" />
<text  x="34.50" y="991.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,372 samples, 18.80%)</title><rect x="37.5" y="949" width="221.8" height="15.0" fill="rgb(230,59,42)" rx="2" ry="2" />
<text  x="40.48" y="959.5" >std::function&lt;void </text>
</g>
<g >
<title>std::function&lt;void  (12 samples, 0.16%)</title><rect x="994.7" y="805" width="1.9" height="15.0" fill="rgb(248,67,36)" rx="2" ry="2" />
<text  x="997.71" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5 samples, 0.07%)</title><rect x="95.7" y="549" width="0.8" height="15.0" fill="rgb(237,201,35)" rx="2" ry="2" />
<text  x="98.68" y="559.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::_Placeholder&lt;1&gt;, true&gt;::_Head_base (1 samples, 0.01%)</title><rect x="97.6" y="501" width="0.2" height="15.0" fill="rgb(238,133,30)" rx="2" ry="2" />
<text  x="100.62" y="511.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (3 samples, 0.04%)</title><rect x="125.6" y="757" width="0.5" height="15.0" fill="rgb(243,48,6)" rx="2" ry="2" />
<text  x="128.59" y="767.5" ></text>
</g>
<g >
<title>[unknown] (475 samples, 6.51%)</title><rect x="544.8" y="997" width="76.8" height="15.0" fill="rgb(213,47,4)" rx="2" ry="2" />
<text  x="547.79" y="1007.5" >[unknown]</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="837.6" y="677" width="0.1" height="15.0" fill="rgb(245,153,28)" rx="2" ry="2" />
<text  x="840.57" y="687.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.01%)</title><rect x="674.1" y="533" width="0.2" height="15.0" fill="rgb(239,223,9)" rx="2" ry="2" />
<text  x="677.12" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (3 samples, 0.04%)</title><rect x="1001.3" y="629" width="0.5" height="15.0" fill="rgb(228,176,5)" rx="2" ry="2" />
<text  x="1004.34" y="639.5" ></text>
</g>
<g >
<title>sys_epoll_wait (1 samples, 0.01%)</title><rect x="1186.6" y="885" width="0.2" height="15.0" fill="rgb(237,30,24)" rx="2" ry="2" />
<text  x="1189.61" y="895.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (665 samples, 9.11%)</title><rect x="137.1" y="741" width="107.5" height="15.0" fill="rgb(253,103,34)" rx="2" ry="2" />
<text  x="140.07" y="751.5" >std::__invoke..</text>
</g>
<g >
<title>__softirqentry_text_start (142 samples, 1.95%)</title><rect x="900.1" y="597" width="23.0" height="15.0" fill="rgb(233,9,35)" rx="2" ry="2" />
<text  x="903.13" y="607.5" >_..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="791.3" y="613" width="0.2" height="15.0" fill="rgb(205,36,7)" rx="2" ry="2" />
<text  x="794.33" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="943.1" y="949" width="0.4" height="15.0" fill="rgb(227,19,23)" rx="2" ry="2" />
<text  x="946.14" y="959.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, void&gt; (1 samples, 0.01%)</title><rect x="97.5" y="533" width="0.1" height="15.0" fill="rgb(239,42,4)" rx="2" ry="2" />
<text  x="100.46" y="543.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (4 samples, 0.05%)</title><rect x="314.4" y="741" width="0.7" height="15.0" fill="rgb(207,54,2)" rx="2" ry="2" />
<text  x="317.42" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;unsigned long&gt; (4 samples, 0.05%)</title><rect x="362.4" y="773" width="0.7" height="15.0" fill="rgb(212,38,23)" rx="2" ry="2" />
<text  x="365.43" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3 samples, 0.04%)</title><rect x="796.0" y="613" width="0.5" height="15.0" fill="rgb(254,42,46)" rx="2" ry="2" />
<text  x="799.02" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="1139.6" y="645" width="0.1" height="15.0" fill="rgb(228,228,30)" rx="2" ry="2" />
<text  x="1142.56" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="994.5" y="789" width="0.2" height="15.0" fill="rgb(237,159,8)" rx="2" ry="2" />
<text  x="997.55" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,198 samples, 16.41%)</title><rect x="991.5" y="933" width="193.7" height="15.0" fill="rgb(229,115,43)" rx="2" ry="2" />
<text  x="994.47" y="943.5" >std::_Function_handler&lt;vo..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="1014.4" y="613" width="0.4" height="15.0" fill="rgb(234,219,45)" rx="2" ry="2" />
<text  x="1017.43" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.03%)</title><rect x="816.4" y="677" width="0.3" height="15.0" fill="rgb(243,202,49)" rx="2" ry="2" />
<text  x="819.39" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::net::Buffer*&gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="348.9" y="453" width="0.1" height="15.0" fill="rgb(252,224,39)" rx="2" ry="2" />
<text  x="351.85" y="463.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (60 samples, 0.82%)</title><rect x="565.8" y="357" width="9.7" height="15.0" fill="rgb(223,99,5)" rx="2" ry="2" />
<text  x="568.81" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (10 samples, 0.14%)</title><rect x="1153.9" y="709" width="1.7" height="15.0" fill="rgb(226,63,49)" rx="2" ry="2" />
<text  x="1156.95" y="719.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::getContextkv (10 samples, 0.14%)</title><rect x="804.9" y="709" width="1.6" height="15.0" fill="rgb(229,11,41)" rx="2" ry="2" />
<text  x="807.91" y="719.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (5 samples, 0.07%)</title><rect x="1009.7" y="645" width="0.9" height="15.0" fill="rgb(212,113,12)" rx="2" ry="2" />
<text  x="1012.74" y="655.5" ></text>
</g>
<g >
<title>_IO_setb (2 samples, 0.03%)</title><rect x="22.9" y="981" width="0.4" height="15.0" fill="rgb(248,191,47)" rx="2" ry="2" />
<text  x="25.93" y="991.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.01%)</title><rect x="337.4" y="229" width="0.1" height="15.0" fill="rgb(240,46,24)" rx="2" ry="2" />
<text  x="340.37" y="239.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&gt; (1 samples, 0.01%)</title><rect x="244.9" y="725" width="0.2" height="15.0" fill="rgb(238,89,16)" rx="2" ry="2" />
<text  x="247.90" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (5 samples, 0.07%)</title><rect x="809.6" y="677" width="0.8" height="15.0" fill="rgb(234,2,21)" rx="2" ry="2" />
<text  x="812.60" y="687.5" ></text>
</g>
<g >
<title>sys_readv (66 samples, 0.90%)</title><rect x="76.0" y="613" width="10.6" height="15.0" fill="rgb(216,23,31)" rx="2" ry="2" />
<text  x="78.96" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="265.3" y="933" width="0.1" height="15.0" fill="rgb(238,72,28)" rx="2" ry="2" />
<text  x="268.27" y="943.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleRead (205 samples, 2.81%)</title><rect x="324.9" y="693" width="33.2" height="15.0" fill="rgb(231,195,45)" rx="2" ry="2" />
<text  x="327.93" y="703.5" >mu..</text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="28.9" y="933" width="0.2" height="15.0" fill="rgb(226,214,35)" rx="2" ry="2" />
<text  x="31.91" y="943.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="88.6" y="661" width="0.1" height="15.0" fill="rgb(242,49,28)" rx="2" ry="2" />
<text  x="91.57" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="489.2" y="741" width="0.1" height="15.0" fill="rgb(243,1,15)" rx="2" ry="2" />
<text  x="492.18" y="751.5" ></text>
</g>
<g >
<title>__GI___shutdown (3 samples, 0.04%)</title><rect x="337.1" y="501" width="0.4" height="15.0" fill="rgb(229,0,41)" rx="2" ry="2" />
<text  x="340.05" y="511.5" ></text>
</g>
<g >
<title>tcp_v4_md5_lookup (1 samples, 0.01%)</title><rect x="580.8" y="725" width="0.2" height="15.0" fill="rgb(205,87,47)" rx="2" ry="2" />
<text  x="583.84" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="675.3" y="661" width="0.1" height="15.0" fill="rgb(231,227,43)" rx="2" ry="2" />
<text  x="678.26" y="671.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (1 samples, 0.01%)</title><rect x="399.6" y="485" width="0.2" height="15.0" fill="rgb(251,189,26)" rx="2" ry="2" />
<text  x="402.62" y="495.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::ensureWritableBytes (3 samples, 0.04%)</title><rect x="1018.1" y="661" width="0.5" height="15.0" fill="rgb(229,70,16)" rx="2" ry="2" />
<text  x="1021.15" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1119.7" y="517" width="0.1" height="15.0" fill="rgb(226,103,8)" rx="2" ry="2" />
<text  x="1122.68" y="527.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="127.4" y="741" width="0.1" height="15.0" fill="rgb(222,216,8)" rx="2" ry="2" />
<text  x="130.37" y="751.5" ></text>
</g>
<g >
<title>ip_finish_output (168 samples, 2.30%)</title><rect x="899.3" y="677" width="27.2" height="15.0" fill="rgb(243,103,41)" rx="2" ry="2" />
<text  x="902.32" y="687.5" >i..</text>
</g>
<g >
<title>ip_queue_xmit (1 samples, 0.01%)</title><rect x="581.2" y="741" width="0.1" height="15.0" fill="rgb(209,133,42)" rx="2" ry="2" />
<text  x="584.17" y="751.5" ></text>
</g>
<g >
<title>alloc_pages_current (2 samples, 0.03%)</title><rect x="10.6" y="757" width="0.4" height="15.0" fill="rgb(205,125,52)" rx="2" ry="2" />
<text  x="13.65" y="767.5" ></text>
</g>
<g >
<title>ip_output (479 samples, 6.56%)</title><rect x="404.6" y="389" width="77.5" height="15.0" fill="rgb(246,105,30)" rx="2" ry="2" />
<text  x="407.63" y="399.5" >ip_output</text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (3 samples, 0.04%)</title><rect x="353.5" y="501" width="0.5" height="15.0" fill="rgb(249,129,15)" rx="2" ry="2" />
<text  x="356.54" y="511.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (1 samples, 0.01%)</title><rect x="28.9" y="981" width="0.2" height="15.0" fill="rgb(208,68,31)" rx="2" ry="2" />
<text  x="31.91" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (2 samples, 0.03%)</title><rect x="269.5" y="949" width="0.3" height="15.0" fill="rgb(229,153,13)" rx="2" ry="2" />
<text  x="272.47" y="959.5" ></text>
</g>
<g >
<title>std::move&lt;void  (1 samples, 0.01%)</title><rect x="773.5" y="629" width="0.2" height="15.0" fill="rgb(238,224,27)" rx="2" ry="2" />
<text  x="776.55" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="661.0" y="629" width="0.2" height="15.0" fill="rgb(217,32,53)" rx="2" ry="2" />
<text  x="664.03" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="135.3" y="789" width="0.2" height="15.0" fill="rgb(254,166,29)" rx="2" ry="2" />
<text  x="138.29" y="799.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;unsigned long&gt; (1 samples, 0.01%)</title><rect x="361.8" y="805" width="0.1" height="15.0" fill="rgb(234,141,44)" rx="2" ry="2" />
<text  x="364.79" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1011.8" y="629" width="0.2" height="15.0" fill="rgb(231,217,48)" rx="2" ry="2" />
<text  x="1014.84" y="639.5" ></text>
</g>
<g >
<title>__fget_light (6 samples, 0.08%)</title><rect x="289.4" y="741" width="0.9" height="15.0" fill="rgb(214,67,3)" rx="2" ry="2" />
<text  x="292.36" y="751.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (497 samples, 6.81%)</title><rect x="685.4" y="629" width="80.4" height="15.0" fill="rgb(245,126,3)" rx="2" ry="2" />
<text  x="688.44" y="639.5" >[libpthre..</text>
</g>
<g >
<title>std::ios_base::_M_init (1 samples, 0.01%)</title><rect x="18.9" y="965" width="0.2" height="15.0" fill="rgb(253,202,43)" rx="2" ry="2" />
<text  x="21.89" y="975.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="337.5" y="469" width="0.2" height="15.0" fill="rgb(249,192,47)" rx="2" ry="2" />
<text  x="340.54" y="479.5" ></text>
</g>
<g >
<title>rw_verify_area (4 samples, 0.05%)</title><rect x="929.7" y="901" width="0.7" height="15.0" fill="rgb(254,187,50)" rx="2" ry="2" />
<text  x="932.72" y="911.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (6 samples, 0.08%)</title><rect x="36.0" y="981" width="1.0" height="15.0" fill="rgb(238,179,10)" rx="2" ry="2" />
<text  x="39.03" y="991.5" ></text>
</g>
<g >
<title>std::find&lt;char*, char&gt; (4 samples, 0.05%)</title><rect x="813.2" y="709" width="0.6" height="15.0" fill="rgb(254,188,2)" rx="2" ry="2" />
<text  x="816.16" y="719.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::removeChannel (1 samples, 0.01%)</title><rect x="385.1" y="677" width="0.1" height="15.0" fill="rgb(238,121,44)" rx="2" ry="2" />
<text  x="388.07" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="127.2" y="741" width="0.2" height="15.0" fill="rgb(247,122,52)" rx="2" ry="2" />
<text  x="130.21" y="751.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (5 samples, 0.07%)</title><rect x="803.0" y="677" width="0.8" height="15.0" fill="rgb(227,90,51)" rx="2" ry="2" />
<text  x="805.97" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="89.9" y="661" width="0.1" height="15.0" fill="rgb(246,124,23)" rx="2" ry="2" />
<text  x="92.86" y="671.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="673.5" y="581" width="0.1" height="15.0" fill="rgb(254,196,18)" rx="2" ry="2" />
<text  x="676.48" y="591.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="243.6" y="581" width="0.2" height="15.0" fill="rgb(241,165,17)" rx="2" ry="2" />
<text  x="246.61" y="591.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="1143.9" y="709" width="0.2" height="15.0" fill="rgb(222,57,4)" rx="2" ry="2" />
<text  x="1146.93" y="719.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (2 samples, 0.03%)</title><rect x="810.1" y="645" width="0.3" height="15.0" fill="rgb(221,140,29)" rx="2" ry="2" />
<text  x="813.08" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (2 samples, 0.03%)</title><rect x="107.8" y="533" width="0.3" height="15.0" fill="rgb(218,179,18)" rx="2" ry="2" />
<text  x="110.81" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="381.2" y="773" width="0.1" height="15.0" fill="rgb(221,31,41)" rx="2" ry="2" />
<text  x="384.19" y="783.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.15%)</title><rect x="683.7" y="613" width="1.7" height="15.0" fill="rgb(213,115,51)" rx="2" ry="2" />
<text  x="686.66" y="623.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="129.6" y="773" width="0.2" height="15.0" fill="rgb(211,97,28)" rx="2" ry="2" />
<text  x="132.63" y="783.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (4 samples, 0.05%)</title><rect x="12.9" y="757" width="0.7" height="15.0" fill="rgb(230,164,47)" rx="2" ry="2" />
<text  x="15.91" y="767.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="317.5" y="741" width="0.2" height="15.0" fill="rgb(247,127,4)" rx="2" ry="2" />
<text  x="320.49" y="751.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="1184.5" y="773" width="0.2" height="15.0" fill="rgb(246,189,7)" rx="2" ry="2" />
<text  x="1187.50" y="783.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="150.6" y="501" width="0.4" height="15.0" fill="rgb(215,168,41)" rx="2" ry="2" />
<text  x="153.65" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt; (1 samples, 0.01%)</title><rect x="110.9" y="629" width="0.1" height="15.0" fill="rgb(246,3,51)" rx="2" ry="2" />
<text  x="113.88" y="639.5" ></text>
</g>
<g >
<title>unlazy_walk (6 samples, 0.08%)</title><rect x="823.7" y="565" width="0.9" height="15.0" fill="rgb(232,192,44)" rx="2" ry="2" />
<text  x="826.66" y="575.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (2 samples, 0.03%)</title><rect x="657.6" y="773" width="0.4" height="15.0" fill="rgb(223,2,32)" rx="2" ry="2" />
<text  x="660.63" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (4 samples, 0.05%)</title><rect x="1151.4" y="613" width="0.6" height="15.0" fill="rgb(248,81,35)" rx="2" ry="2" />
<text  x="1154.36" y="623.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (146 samples, 2.00%)</title><rect x="900.1" y="629" width="23.6" height="15.0" fill="rgb(218,34,23)" rx="2" ry="2" />
<text  x="903.13" y="639.5" >d..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="87.6" y="613" width="0.2" height="15.0" fill="rgb(240,88,40)" rx="2" ry="2" />
<text  x="90.60" y="623.5" ></text>
</g>
<g >
<title>security_inode_getattr (2 samples, 0.03%)</title><rect x="1168.0" y="629" width="0.3" height="15.0" fill="rgb(246,100,43)" rx="2" ry="2" />
<text  x="1171.01" y="639.5" ></text>
</g>
<g >
<title>ksize (1 samples, 0.01%)</title><rect x="552.1" y="773" width="0.1" height="15.0" fill="rgb(230,84,42)" rx="2" ry="2" />
<text  x="555.07" y="783.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (147 samples, 2.01%)</title><rect x="900.0" y="645" width="23.7" height="15.0" fill="rgb(244,42,0)" rx="2" ry="2" />
<text  x="902.97" y="655.5" >_..</text>
</g>
<g >
<title>std::forward&lt;std::shared_ptr&lt;StaticServer::Entry&gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="106.5" y="453" width="0.2" height="15.0" fill="rgb(207,72,34)" rx="2" ry="2" />
<text  x="109.51" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="32.5" y="933" width="0.1" height="15.0" fill="rgb(251,50,27)" rx="2" ry="2" />
<text  x="35.47" y="943.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="315.2" y="709" width="0.2" height="15.0" fill="rgb(226,71,19)" rx="2" ry="2" />
<text  x="318.23" y="719.5" ></text>
</g>
<g >
<title>__check_object_size (3 samples, 0.04%)</title><rect x="1175.0" y="581" width="0.5" height="15.0" fill="rgb(221,46,25)" rx="2" ry="2" />
<text  x="1177.97" y="591.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="800.4" y="613" width="0.1" height="15.0" fill="rgb(250,130,28)" rx="2" ry="2" />
<text  x="803.38" y="623.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.01%)</title><rect x="247.3" y="373" width="0.2" height="15.0" fill="rgb(237,161,41)" rx="2" ry="2" />
<text  x="250.33" y="383.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::runInThread (1,197 samples, 16.40%)</title><rect x="991.5" y="853" width="193.5" height="15.0" fill="rgb(244,141,51)" rx="2" ry="2" />
<text  x="994.47" y="863.5" >muduo::ThreadPl&lt;Parser&gt;::..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="264.5" y="949" width="0.6" height="15.0" fill="rgb(228,19,34)" rx="2" ry="2" />
<text  x="267.46" y="959.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::size (1 samples, 0.01%)</title><rect x="257.7" y="821" width="0.1" height="15.0" fill="rgb(228,223,4)" rx="2" ry="2" />
<text  x="260.67" y="831.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setContextkv (6 samples, 0.08%)</title><rect x="806.7" y="709" width="1.0" height="15.0" fill="rgb(205,174,1)" rx="2" ry="2" />
<text  x="809.69" y="719.5" ></text>
</g>
<g >
<title>muduo::Fmt::data (1 samples, 0.01%)</title><rect x="494.4" y="773" width="0.1" height="15.0" fill="rgb(207,201,12)" rx="2" ry="2" />
<text  x="497.35" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="339.0" y="517" width="0.2" height="15.0" fill="rgb(227,48,43)" rx="2" ry="2" />
<text  x="341.99" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="342.7" y="421" width="0.2" height="15.0" fill="rgb(232,163,29)" rx="2" ry="2" />
<text  x="345.71" y="431.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="41.0" y="725" width="0.2" height="15.0" fill="rgb(224,59,54)" rx="2" ry="2" />
<text  x="44.04" y="735.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="335.1" y="517" width="0.2" height="15.0" fill="rgb(207,65,1)" rx="2" ry="2" />
<text  x="338.11" y="527.5" ></text>
</g>
<g >
<title>muduo::net::Channel::enableReading (1 samples, 0.01%)</title><rect x="137.7" y="693" width="0.2" height="15.0" fill="rgb(237,128,29)" rx="2" ry="2" />
<text  x="140.72" y="703.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::handleRead (1 samples, 0.01%)</title><rect x="1187.9" y="805" width="0.2" height="15.0" fill="rgb(248,152,1)" rx="2" ry="2" />
<text  x="1190.90" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (2 samples, 0.03%)</title><rect x="777.8" y="693" width="0.3" height="15.0" fill="rgb(207,219,8)" rx="2" ry="2" />
<text  x="780.75" y="703.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (7 samples, 0.10%)</title><rect x="1000.7" y="661" width="1.1" height="15.0" fill="rgb(211,188,17)" rx="2" ry="2" />
<text  x="1003.69" y="671.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1 samples, 0.01%)</title><rect x="994.7" y="741" width="0.2" height="15.0" fill="rgb(208,202,16)" rx="2" ry="2" />
<text  x="997.71" y="751.5" ></text>
</g>
<g >
<title>net_rx_action (123 samples, 1.69%)</title><rect x="556.9" y="581" width="19.9" height="15.0" fill="rgb(251,155,6)" rx="2" ry="2" />
<text  x="559.92" y="591.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="530.9" y="805" width="0.1" height="15.0" fill="rgb(248,199,22)" rx="2" ry="2" />
<text  x="533.89" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="107.5" y="533" width="0.1" height="15.0" fill="rgb(206,177,21)" rx="2" ry="2" />
<text  x="110.48" y="543.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (1 samples, 0.01%)</title><rect x="137.6" y="629" width="0.1" height="15.0" fill="rgb(254,88,19)" rx="2" ry="2" />
<text  x="140.55" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 0.14%)</title><rect x="992.4" y="773" width="1.7" height="15.0" fill="rgb(209,113,7)" rx="2" ry="2" />
<text  x="995.44" y="783.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (2 samples, 0.03%)</title><rect x="891.4" y="805" width="0.3" height="15.0" fill="rgb(245,6,22)" rx="2" ry="2" />
<text  x="894.40" y="815.5" ></text>
</g>
<g >
<title>CZlibMgr::UnCompress (1 samples, 0.01%)</title><rect x="999.7" y="709" width="0.2" height="15.0" fill="rgb(223,165,50)" rx="2" ry="2" />
<text  x="1002.72" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="784.1" y="693" width="0.1" height="15.0" fill="rgb(235,40,39)" rx="2" ry="2" />
<text  x="787.06" y="703.5" ></text>
</g>
<g >
<title>strrchr (1 samples, 0.01%)</title><rect x="257.3" y="805" width="0.2" height="15.0" fill="rgb(215,50,40)" rx="2" ry="2" />
<text  x="260.35" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="469" width="0.2" height="15.0" fill="rgb(253,94,51)" rx="2" ry="2" />
<text  x="1123.81" y="479.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::end (1 samples, 0.01%)</title><rect x="802.6" y="661" width="0.2" height="15.0" fill="rgb(217,185,4)" rx="2" ry="2" />
<text  x="805.65" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="770.3" y="661" width="0.5" height="15.0" fill="rgb(247,44,31)" rx="2" ry="2" />
<text  x="773.32" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="324.8" y="661" width="0.1" height="15.0" fill="rgb(221,85,44)" rx="2" ry="2" />
<text  x="327.76" y="671.5" ></text>
</g>
<g >
<title>try_to_wake_up (10 samples, 0.14%)</title><rect x="992.4" y="693" width="1.7" height="15.0" fill="rgb(214,200,2)" rx="2" ry="2" />
<text  x="995.44" y="703.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 0.01%)</title><rect x="58.3" y="741" width="0.2" height="15.0" fill="rgb(206,52,50)" rx="2" ry="2" />
<text  x="61.34" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="1119.5" y="597" width="0.3" height="15.0" fill="rgb(235,177,27)" rx="2" ry="2" />
<text  x="1122.51" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="673.6" y="629" width="0.2" height="15.0" fill="rgb(235,18,46)" rx="2" ry="2" />
<text  x="676.64" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="675.3" y="645" width="0.1" height="15.0" fill="rgb(215,92,53)" rx="2" ry="2" />
<text  x="678.26" y="655.5" ></text>
</g>
<g >
<title>muduo::net::sockets::write (1 samples, 0.01%)</title><rect x="244.1" y="693" width="0.2" height="15.0" fill="rgb(222,84,19)" rx="2" ry="2" />
<text  x="247.09" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="1189.2" y="917" width="0.3" height="15.0" fill="rgb(241,133,37)" rx="2" ry="2" />
<text  x="1192.19" y="927.5" ></text>
</g>
<g >
<title>skb_clone (1 samples, 0.01%)</title><rect x="581.5" y="741" width="0.2" height="15.0" fill="rgb(226,94,4)" rx="2" ry="2" />
<text  x="584.49" y="751.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="385.2" y="581" width="0.2" height="15.0" fill="rgb(246,27,34)" rx="2" ry="2" />
<text  x="388.23" y="591.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="129.5" y="757" width="0.1" height="15.0" fill="rgb(247,188,52)" rx="2" ry="2" />
<text  x="132.47" y="767.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="672.2" y="629" width="0.1" height="15.0" fill="rgb(218,175,9)" rx="2" ry="2" />
<text  x="675.18" y="639.5" ></text>
</g>
<g >
<title>kfree_skbmem (3 samples, 0.04%)</title><rect x="909.8" y="357" width="0.5" height="15.0" fill="rgb(238,135,3)" rx="2" ry="2" />
<text  x="912.83" y="367.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (1 samples, 0.01%)</title><rect x="872.2" y="725" width="0.1" height="15.0" fill="rgb(251,28,10)" rx="2" ry="2" />
<text  x="875.16" y="735.5" ></text>
</g>
<g >
<title>copyin (1 samples, 0.01%)</title><rect x="894.5" y="789" width="0.1" height="15.0" fill="rgb(232,21,41)" rx="2" ry="2" />
<text  x="897.47" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.08%)</title><rect x="1124.4" y="645" width="0.9" height="15.0" fill="rgb(250,190,33)" rx="2" ry="2" />
<text  x="1127.36" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.03%)</title><rect x="808.8" y="709" width="0.3" height="15.0" fill="rgb(241,17,37)" rx="2" ry="2" />
<text  x="811.79" y="719.5" ></text>
</g>
<g >
<title>std::swap&lt;void  (1 samples, 0.01%)</title><rect x="658.0" y="789" width="0.1" height="15.0" fill="rgb(244,147,12)" rx="2" ry="2" />
<text  x="660.96" y="799.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.01%)</title><rect x="271.3" y="981" width="0.1" height="15.0" fill="rgb(211,51,42)" rx="2" ry="2" />
<text  x="274.25" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::EventLoop*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="111.7" y="693" width="0.1" height="15.0" fill="rgb(222,12,4)" rx="2" ry="2" />
<text  x="114.69" y="703.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (3 samples, 0.04%)</title><rect x="45.7" y="709" width="0.5" height="15.0" fill="rgb(220,68,36)" rx="2" ry="2" />
<text  x="48.73" y="719.5" ></text>
</g>
<g >
<title>tcp_ack (19 samples, 0.26%)</title><rect x="562.4" y="405" width="3.1" height="15.0" fill="rgb(205,56,33)" rx="2" ry="2" />
<text  x="565.41" y="415.5" ></text>
</g>
<g >
<title>vfs_statx (82 samples, 1.12%)</title><rect x="822.7" y="645" width="13.3" height="15.0" fill="rgb(252,217,42)" rx="2" ry="2" />
<text  x="825.69" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (32 samples, 0.44%)</title><rect x="375.4" y="773" width="5.1" height="15.0" fill="rgb(241,42,53)" rx="2" ry="2" />
<text  x="378.37" y="783.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="493.9" y="773" width="0.1" height="15.0" fill="rgb(233,226,54)" rx="2" ry="2" />
<text  x="496.87" y="783.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3 samples, 0.04%)</title><rect x="414.2" y="69" width="0.4" height="15.0" fill="rgb(241,152,51)" rx="2" ry="2" />
<text  x="417.16" y="79.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="990.8" y="949" width="0.2" height="15.0" fill="rgb(206,39,7)" rx="2" ry="2" />
<text  x="993.83" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="805.6" y="597" width="0.1" height="15.0" fill="rgb(205,123,19)" rx="2" ry="2" />
<text  x="808.56" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::_Iter_equals_val (1 samples, 0.01%)</title><rect x="813.3" y="677" width="0.2" height="15.0" fill="rgb(210,225,33)" rx="2" ry="2" />
<text  x="816.32" y="687.5" ></text>
</g>
<g >
<title>import_iovec (4 samples, 0.05%)</title><rect x="335.4" y="565" width="0.7" height="15.0" fill="rgb(234,85,19)" rx="2" ry="2" />
<text  x="338.43" y="575.5" ></text>
</g>
<g >
<title>__check_heap_object (2 samples, 0.03%)</title><rect x="529.9" y="789" width="0.3" height="15.0" fill="rgb(248,188,48)" rx="2" ry="2" />
<text  x="532.92" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="360.7" y="725" width="0.1" height="15.0" fill="rgb(235,129,44)" rx="2" ry="2" />
<text  x="363.65" y="735.5" ></text>
</g>
<g >
<title>muduo::MutexLock::lock (1 samples, 0.01%)</title><rect x="370.0" y="757" width="0.2" height="15.0" fill="rgb(226,107,25)" rx="2" ry="2" />
<text  x="373.03" y="767.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::setCookie (1 samples, 0.01%)</title><rect x="120.6" y="741" width="0.1" height="15.0" fill="rgb(242,74,38)" rx="2" ry="2" />
<text  x="123.58" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="1001.5" y="613" width="0.3" height="15.0" fill="rgb(239,50,12)" rx="2" ry="2" />
<text  x="1004.50" y="623.5" ></text>
</g>
<g >
<title>tcp_send_fin (1 samples, 0.01%)</title><rect x="337.4" y="405" width="0.1" height="15.0" fill="rgb(243,119,42)" rx="2" ry="2" />
<text  x="340.37" y="415.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="82.7" y="453" width="0.2" height="15.0" fill="rgb(240,43,29)" rx="2" ry="2" />
<text  x="85.75" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (9 samples, 0.12%)</title><rect x="1019.0" y="613" width="1.4" height="15.0" fill="rgb(228,198,48)" rx="2" ry="2" />
<text  x="1021.96" y="623.5" ></text>
</g>
<g >
<title>mutex_unlock (1 samples, 0.01%)</title><rect x="295.5" y="741" width="0.2" height="15.0" fill="rgb(224,65,45)" rx="2" ry="2" />
<text  x="298.50" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;void  (11 samples, 0.15%)</title><rect x="771.9" y="677" width="1.8" height="15.0" fill="rgb(234,189,28)" rx="2" ry="2" />
<text  x="774.93" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (1 samples, 0.01%)</title><rect x="102.1" y="501" width="0.2" height="15.0" fill="rgb(254,86,35)" rx="2" ry="2" />
<text  x="105.15" y="511.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1016.9" y="597" width="0.1" height="15.0" fill="rgb(216,193,16)" rx="2" ry="2" />
<text  x="1019.86" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1183.0" y="693" width="0.2" height="15.0" fill="rgb(233,190,32)" rx="2" ry="2" />
<text  x="1186.05" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (2 samples, 0.03%)</title><rect x="963.3" y="997" width="0.4" height="15.0" fill="rgb(218,59,25)" rx="2" ry="2" />
<text  x="966.34" y="1007.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::append (1 samples, 0.01%)</title><rect x="497.1" y="757" width="0.2" height="15.0" fill="rgb(216,174,17)" rx="2" ry="2" />
<text  x="500.10" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (2 samples, 0.03%)</title><rect x="1128.6" y="677" width="0.3" height="15.0" fill="rgb(232,42,13)" rx="2" ry="2" />
<text  x="1131.57" y="687.5" ></text>
</g>
<g >
<title>tcp_wfree (1 samples, 0.01%)</title><rect x="236.8" y="277" width="0.2" height="15.0" fill="rgb(246,72,41)" rx="2" ry="2" />
<text  x="239.82" y="287.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="778.9" y="661" width="0.3" height="15.0" fill="rgb(232,68,33)" rx="2" ry="2" />
<text  x="781.88" y="671.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="1117.3" y="453" width="0.1" height="15.0" fill="rgb(250,91,48)" rx="2" ry="2" />
<text  x="1120.25" y="463.5" ></text>
</g>
<g >
<title>redisReaderGetReply (6 samples, 0.08%)</title><rect x="600.6" y="965" width="0.9" height="15.0" fill="rgb(212,25,27)" rx="2" ry="2" />
<text  x="603.57" y="975.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (1 samples, 0.01%)</title><rect x="82.6" y="309" width="0.1" height="15.0" fill="rgb(235,16,22)" rx="2" ry="2" />
<text  x="85.59" y="319.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="281.4" y="949" width="0.2" height="15.0" fill="rgb(230,122,1)" rx="2" ry="2" />
<text  x="284.44" y="959.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (16 samples, 0.22%)</title><rect x="494.0" y="789" width="2.6" height="15.0" fill="rgb(249,6,36)" rx="2" ry="2" />
<text  x="497.03" y="799.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (1 samples, 0.01%)</title><rect x="1121.1" y="661" width="0.2" height="15.0" fill="rgb(221,11,51)" rx="2" ry="2" />
<text  x="1124.13" y="671.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 0.01%)</title><rect x="484.0" y="469" width="0.2" height="15.0" fill="rgb(214,113,31)" rx="2" ry="2" />
<text  x="487.00" y="479.5" ></text>
</g>
<g >
<title>vmware_sched_clock (2 samples, 0.03%)</title><rect x="239.6" y="421" width="0.3" height="15.0" fill="rgb(254,54,29)" rx="2" ry="2" />
<text  x="242.57" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2 (3 samples, 0.04%)</title><rect x="1163.3" y="725" width="0.5" height="15.0" fill="rgb(222,184,42)" rx="2" ry="2" />
<text  x="1166.33" y="735.5" ></text>
</g>
<g >
<title>path_lookupat (33 samples, 0.45%)</title><rect x="1168.7" y="597" width="5.3" height="15.0" fill="rgb(219,36,11)" rx="2" ry="2" />
<text  x="1171.66" y="607.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (2 samples, 0.03%)</title><rect x="282.4" y="997" width="0.3" height="15.0" fill="rgb(245,81,11)" rx="2" ry="2" />
<text  x="285.41" y="1007.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="778.9" y="645" width="0.3" height="15.0" fill="rgb(210,44,33)" rx="2" ry="2" />
<text  x="781.88" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="1144.2" y="709" width="0.2" height="15.0" fill="rgb(208,30,49)" rx="2" ry="2" />
<text  x="1147.25" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="992.0" y="789" width="0.1" height="15.0" fill="rgb(229,158,0)" rx="2" ry="2" />
<text  x="994.96" y="799.5" ></text>
</g>
<g >
<title>bictcp_cwnd_event (1 samples, 0.01%)</title><rect x="401.6" y="469" width="0.1" height="15.0" fill="rgb(248,147,22)" rx="2" ry="2" />
<text  x="404.56" y="479.5" ></text>
</g>
<g >
<title>inet_recvmsg (165 samples, 2.26%)</title><rect x="846.8" y="853" width="26.7" height="15.0" fill="rgb(216,33,50)" rx="2" ry="2" />
<text  x="849.78" y="863.5" >i..</text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.01%)</title><rect x="118.0" y="741" width="0.2" height="15.0" fill="rgb(246,193,26)" rx="2" ry="2" />
<text  x="120.99" y="751.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::lock (2 samples, 0.03%)</title><rect x="107.8" y="565" width="0.3" height="15.0" fill="rgb(240,189,4)" rx="2" ry="2" />
<text  x="110.81" y="575.5" ></text>
</g>
<g >
<title>redisBufferRead (2 samples, 0.03%)</title><rect x="942.8" y="965" width="0.3" height="15.0" fill="rgb(232,32,2)" rx="2" ry="2" />
<text  x="945.81" y="975.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.01%)</title><rect x="29.6" y="981" width="0.1" height="15.0" fill="rgb(253,111,38)" rx="2" ry="2" />
<text  x="32.56" y="991.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::Buffer*&amp;&gt; (1 samples, 0.01%)</title><rect x="842.1" y="773" width="0.2" height="15.0" fill="rgb(243,137,47)" rx="2" ry="2" />
<text  x="845.09" y="783.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="94.9" y="517" width="0.1" height="15.0" fill="rgb(246,184,34)" rx="2" ry="2" />
<text  x="97.87" y="527.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="110.2" y="565" width="0.2" height="15.0" fill="rgb(250,109,54)" rx="2" ry="2" />
<text  x="113.23" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="992.0" y="773" width="0.1" height="15.0" fill="rgb(241,121,28)" rx="2" ry="2" />
<text  x="994.96" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="368.7" y="693" width="0.2" height="15.0" fill="rgb(243,36,5)" rx="2" ry="2" />
<text  x="371.74" y="703.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="374.9" y="789" width="0.1" height="15.0" fill="rgb(215,150,49)" rx="2" ry="2" />
<text  x="377.88" y="799.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (1 samples, 0.01%)</title><rect x="927.5" y="725" width="0.1" height="15.0" fill="rgb(246,46,36)" rx="2" ry="2" />
<text  x="930.45" y="735.5" ></text>
</g>
<g >
<title>std::move&lt;char&amp;&gt; (1 samples, 0.01%)</title><rect x="372.5" y="677" width="0.1" height="15.0" fill="rgb(241,123,31)" rx="2" ry="2" />
<text  x="375.46" y="687.5" ></text>
</g>
<g >
<title>tcp_ack (2 samples, 0.03%)</title><rect x="414.6" y="101" width="0.4" height="15.0" fill="rgb(236,86,50)" rx="2" ry="2" />
<text  x="417.65" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;muduo::net::Channel* const*, std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="493.4" y="805" width="0.1" height="15.0" fill="rgb(237,12,41)" rx="2" ry="2" />
<text  x="496.38" y="815.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (110 samples, 1.51%)</title><rect x="91.2" y="597" width="17.7" height="15.0" fill="rgb(229,68,41)" rx="2" ry="2" />
<text  x="94.16" y="607.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="252.0" y="741" width="0.2" height="15.0" fill="rgb(240,129,18)" rx="2" ry="2" />
<text  x="255.01" y="751.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="1148.3" y="677" width="0.2" height="15.0" fill="rgb(244,46,28)" rx="2" ry="2" />
<text  x="1151.29" y="687.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (1 samples, 0.01%)</title><rect x="333.2" y="469" width="0.1" height="15.0" fill="rgb(223,50,12)" rx="2" ry="2" />
<text  x="336.17" y="479.5" ></text>
</g>
<g >
<title>ip_rcv_finish (123 samples, 1.69%)</title><rect x="902.9" y="501" width="19.9" height="15.0" fill="rgb(244,158,9)" rx="2" ry="2" />
<text  x="905.88" y="511.5" ></text>
</g>
<g >
<title>strlen@plt (1 samples, 0.01%)</title><rect x="602.3" y="965" width="0.2" height="15.0" fill="rgb(253,8,43)" rx="2" ry="2" />
<text  x="605.34" y="975.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (19 samples, 0.26%)</title><rect x="766.3" y="613" width="3.0" height="15.0" fill="rgb(230,194,48)" rx="2" ry="2" />
<text  x="769.27" y="623.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="872.6" y="805" width="0.2" height="15.0" fill="rgb(246,79,17)" rx="2" ry="2" />
<text  x="875.65" y="815.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="28.8" y="885" width="0.1" height="15.0" fill="rgb(235,42,25)" rx="2" ry="2" />
<text  x="31.75" y="895.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="850.3" y="629" width="0.2" height="15.0" fill="rgb(229,142,47)" rx="2" ry="2" />
<text  x="853.34" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (1 samples, 0.01%)</title><rect x="137.6" y="645" width="0.1" height="15.0" fill="rgb(249,63,31)" rx="2" ry="2" />
<text  x="140.55" y="655.5" ></text>
</g>
<g >
<title>_IO_no_init (2 samples, 0.03%)</title><rect x="943.9" y="981" width="0.4" height="15.0" fill="rgb(246,207,45)" rx="2" ry="2" />
<text  x="946.94" y="991.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="766.9" y="581" width="0.2" height="15.0" fill="rgb(219,170,46)" rx="2" ry="2" />
<text  x="769.92" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt;::_M_next (1 samples, 0.01%)</title><rect x="353.7" y="469" width="0.2" height="15.0" fill="rgb(206,79,36)" rx="2" ry="2" />
<text  x="356.70" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=@plt (1 samples, 0.01%)</title><rect x="1156.5" y="709" width="0.2" height="15.0" fill="rgb(242,169,18)" rx="2" ry="2" />
<text  x="1159.54" y="719.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.01%)</title><rect x="28.9" y="901" width="0.2" height="15.0" fill="rgb(245,121,49)" rx="2" ry="2" />
<text  x="31.91" y="911.5" ></text>
</g>
<g >
<title>tcp_established_options (1 samples, 0.01%)</title><rect x="928.4" y="757" width="0.2" height="15.0" fill="rgb(244,156,8)" rx="2" ry="2" />
<text  x="931.42" y="767.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (6 samples, 0.08%)</title><rect x="337.1" y="645" width="0.9" height="15.0" fill="rgb(250,13,41)" rx="2" ry="2" />
<text  x="340.05" y="655.5" ></text>
</g>
<g >
<title>std::swap&lt;bool  (2 samples, 0.03%)</title><rect x="345.1" y="517" width="0.4" height="15.0" fill="rgb(244,205,50)" rx="2" ry="2" />
<text  x="348.13" y="527.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="849.9" y="789" width="0.1" height="15.0" fill="rgb(249,116,32)" rx="2" ry="2" />
<text  x="852.85" y="799.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="840.8" y="725" width="0.3" height="15.0" fill="rgb(206,0,18)" rx="2" ry="2" />
<text  x="843.80" y="735.5" ></text>
</g>
<g >
<title>freeReplyObject (1 samples, 0.01%)</title><rect x="668.5" y="693" width="0.1" height="15.0" fill="rgb(218,148,1)" rx="2" ry="2" />
<text  x="671.47" y="703.5" ></text>
</g>
<g >
<title>StaticServer::onConnection (1 samples, 0.01%)</title><rect x="337.7" y="405" width="0.2" height="15.0" fill="rgb(221,132,53)" rx="2" ry="2" />
<text  x="340.70" y="415.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (1 samples, 0.01%)</title><rect x="484.8" y="501" width="0.2" height="15.0" fill="rgb(205,199,20)" rx="2" ry="2" />
<text  x="487.81" y="511.5" ></text>
</g>
<g >
<title>tcp_established_options (1 samples, 0.01%)</title><rect x="581.8" y="741" width="0.2" height="15.0" fill="rgb(237,67,36)" rx="2" ry="2" />
<text  x="584.81" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::_M_ptr (2 samples, 0.03%)</title><rect x="779.4" y="693" width="0.3" height="15.0" fill="rgb(207,193,42)" rx="2" ry="2" />
<text  x="782.37" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (5 samples, 0.07%)</title><rect x="781.3" y="629" width="0.8" height="15.0" fill="rgb(218,60,43)" rx="2" ry="2" />
<text  x="784.31" y="639.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="682.9" y="629" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="685.85" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10 samples, 0.14%)</title><rect x="1122.4" y="677" width="1.6" height="15.0" fill="rgb(216,203,54)" rx="2" ry="2" />
<text  x="1125.42" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="110.1" y="565" width="0.1" height="15.0" fill="rgb(219,139,9)" rx="2" ry="2" />
<text  x="113.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, unsigned long, false&gt;::_S_equals (2 samples, 0.03%)</title><rect x="103.6" y="485" width="0.3" height="15.0" fill="rgb(219,46,26)" rx="2" ry="2" />
<text  x="106.60" y="495.5" ></text>
</g>
<g >
<title>security_file_permission (8 samples, 0.11%)</title><rect x="84.4" y="533" width="1.3" height="15.0" fill="rgb(247,48,3)" rx="2" ry="2" />
<text  x="87.37" y="543.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="65.5" y="709" width="0.1" height="15.0" fill="rgb(206,111,53)" rx="2" ry="2" />
<text  x="68.45" y="719.5" ></text>
</g>
<g >
<title>__strchrnul (3 samples, 0.04%)</title><rect x="272.1" y="965" width="0.4" height="15.0" fill="rgb(252,184,50)" rx="2" ry="2" />
<text  x="275.06" y="975.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (1 samples, 0.01%)</title><rect x="106.4" y="421" width="0.1" height="15.0" fill="rgb(229,23,48)" rx="2" ry="2" />
<text  x="109.35" y="431.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="1027.2" y="629" width="0.2" height="15.0" fill="rgb(233,147,35)" rx="2" ry="2" />
<text  x="1030.20" y="639.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.01%)</title><rect x="337.4" y="197" width="0.1" height="15.0" fill="rgb(234,193,8)" rx="2" ry="2" />
<text  x="340.37" y="207.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="821.4" y="661" width="0.2" height="15.0" fill="rgb(244,30,24)" rx="2" ry="2" />
<text  x="824.40" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="500.7" y="773" width="0.3" height="15.0" fill="rgb(218,30,53)" rx="2" ry="2" />
<text  x="503.66" y="783.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (2 samples, 0.03%)</title><rect x="550.9" y="741" width="0.4" height="15.0" fill="rgb(208,116,32)" rx="2" ry="2" />
<text  x="553.93" y="751.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8 samples, 0.11%)</title><rect x="490.1" y="661" width="1.3" height="15.0" fill="rgb(248,57,19)" rx="2" ry="2" />
<text  x="493.15" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1152.3" y="661" width="0.2" height="15.0" fill="rgb(221,22,52)" rx="2" ry="2" />
<text  x="1155.33" y="671.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;unsigned long&gt; (6 samples, 0.08%)</title><rect x="117.3" y="789" width="1.0" height="15.0" fill="rgb(241,137,14)" rx="2" ry="2" />
<text  x="120.35" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="500.7" y="757" width="0.3" height="15.0" fill="rgb(229,155,31)" rx="2" ry="2" />
<text  x="503.66" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1011.0" y="629" width="0.2" height="15.0" fill="rgb(223,125,37)" rx="2" ry="2" />
<text  x="1014.04" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt;,  (1 samples, 0.01%)</title><rect x="345.5" y="565" width="0.1" height="15.0" fill="rgb(247,67,42)" rx="2" ry="2" />
<text  x="348.46" y="575.5" ></text>
</g>
<g >
<title>set_normalized_timespec64 (1 samples, 0.01%)</title><rect x="308.3" y="709" width="0.1" height="15.0" fill="rgb(230,141,31)" rx="2" ry="2" />
<text  x="311.27" y="719.5" ></text>
</g>
<g >
<title>futex_wake (11 samples, 0.15%)</title><rect x="683.7" y="549" width="1.7" height="15.0" fill="rgb(208,63,8)" rx="2" ry="2" />
<text  x="686.66" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="946.5" y="949" width="0.2" height="15.0" fill="rgb(214,144,28)" rx="2" ry="2" />
<text  x="949.53" y="959.5" ></text>
</g>
<g >
<title>redisReaderFeed (3 samples, 0.04%)</title><rect x="990.3" y="997" width="0.5" height="15.0" fill="rgb(220,104,14)" rx="2" ry="2" />
<text  x="993.34" y="1007.5" ></text>
</g>
<g >
<title>cmpxchg_double_slab.isra.33 (1 samples, 0.01%)</title><rect x="910.6" y="293" width="0.2" height="15.0" fill="rgb(234,43,26)" rx="2" ry="2" />
<text  x="913.64" y="303.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::peek (1 samples, 0.01%)</title><rect x="1024.1" y="645" width="0.2" height="15.0" fill="rgb(223,69,17)" rx="2" ry="2" />
<text  x="1027.13" y="655.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::removeChannel (1 samples, 0.01%)</title><rect x="137.6" y="677" width="0.1" height="15.0" fill="rgb(234,3,5)" rx="2" ry="2" />
<text  x="140.55" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (6 samples, 0.08%)</title><rect x="781.1" y="645" width="1.0" height="15.0" fill="rgb(250,69,0)" rx="2" ry="2" />
<text  x="784.15" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (122 samples, 1.67%)</title><rect x="90.2" y="629" width="19.7" height="15.0" fill="rgb(225,44,1)" rx="2" ry="2" />
<text  x="93.19" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1161.7" y="597" width="0.2" height="15.0" fill="rgb(234,124,27)" rx="2" ry="2" />
<text  x="1164.71" y="607.5" ></text>
</g>
<g >
<title>import_iovec (5 samples, 0.07%)</title><rect x="85.7" y="565" width="0.8" height="15.0" fill="rgb(253,176,34)" rx="2" ry="2" />
<text  x="88.66" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="244.4" y="709" width="0.2" height="15.0" fill="rgb(215,20,22)" rx="2" ry="2" />
<text  x="247.42" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="98.6" y="501" width="0.2" height="15.0" fill="rgb(206,207,10)" rx="2" ry="2" />
<text  x="101.59" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="818.3" y="693" width="0.2" height="15.0" fill="rgb(209,97,13)" rx="2" ry="2" />
<text  x="821.33" y="703.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (1 samples, 0.01%)</title><rect x="1013.1" y="645" width="0.2" height="15.0" fill="rgb(247,88,36)" rx="2" ry="2" />
<text  x="1016.14" y="655.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::weak_ptr (2 samples, 0.03%)</title><rect x="92.0" y="549" width="0.3" height="15.0" fill="rgb(218,146,9)" rx="2" ry="2" />
<text  x="94.96" y="559.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="513.8" y="789" width="0.1" height="15.0" fill="rgb(212,218,45)" rx="2" ry="2" />
<text  x="516.75" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1004.1" y="645" width="0.1" height="15.0" fill="rgb(254,160,18)" rx="2" ry="2" />
<text  x="1007.08" y="655.5" ></text>
</g>
<g >
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="513.4" y="805" width="0.4" height="15.0" fill="rgb(220,106,52)" rx="2" ry="2" />
<text  x="516.43" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (14 samples, 0.19%)</title><rect x="1118.9" y="629" width="2.2" height="15.0" fill="rgb(229,6,45)" rx="2" ry="2" />
<text  x="1121.87" y="639.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="800.1" y="661" width="0.1" height="15.0" fill="rgb(211,36,24)" rx="2" ry="2" />
<text  x="803.06" y="671.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::sendInLoop (633 samples, 8.67%)</title><rect x="385.9" y="709" width="102.3" height="15.0" fill="rgb(249,138,44)" rx="2" ry="2" />
<text  x="388.87" y="719.5" >muduo::net::..</text>
</g>
<g >
<title>isspace (3 samples, 0.04%)</title><rect x="1178.7" y="725" width="0.5" height="15.0" fill="rgb(212,46,50)" rx="2" ry="2" />
<text  x="1181.68" y="735.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="129.8" y="789" width="0.2" height="15.0" fill="rgb(221,207,9)" rx="2" ry="2" />
<text  x="132.79" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="943.1" y="917" width="0.4" height="15.0" fill="rgb(232,228,13)" rx="2" ry="2" />
<text  x="946.14" y="927.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.01%)</title><rect x="335.9" y="533" width="0.2" height="15.0" fill="rgb(205,7,37)" rx="2" ry="2" />
<text  x="338.92" y="543.5" ></text>
</g>
<g >
<title>wait_woken (140 samples, 1.92%)</title><rect x="849.7" y="805" width="22.6" height="15.0" fill="rgb(231,55,14)" rx="2" ry="2" />
<text  x="852.69" y="815.5" >w..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1158.6" y="661" width="0.2" height="15.0" fill="rgb(251,114,24)" rx="2" ry="2" />
<text  x="1161.64" y="671.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (3 samples, 0.04%)</title><rect x="87.3" y="661" width="0.5" height="15.0" fill="rgb(240,139,51)" rx="2" ry="2" />
<text  x="90.28" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.01%)</title><rect x="601.5" y="965" width="0.2" height="15.0" fill="rgb(205,144,29)" rx="2" ry="2" />
<text  x="604.54" y="975.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (1 samples, 0.01%)</title><rect x="873.6" y="837" width="0.2" height="15.0" fill="rgb(219,120,10)" rx="2" ry="2" />
<text  x="876.62" y="847.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="362.1" y="757" width="0.2" height="15.0" fill="rgb(240,202,42)" rx="2" ry="2" />
<text  x="365.11" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="970.8" y="965" width="0.6" height="15.0" fill="rgb(234,153,12)" rx="2" ry="2" />
<text  x="973.78" y="975.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.01%)</title><rect x="29.7" y="933" width="0.2" height="15.0" fill="rgb(251,191,43)" rx="2" ry="2" />
<text  x="32.72" y="943.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="783.1" y="581" width="0.1" height="15.0" fill="rgb(228,69,20)" rx="2" ry="2" />
<text  x="786.09" y="591.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (3 samples, 0.04%)</title><rect x="681.4" y="677" width="0.5" height="15.0" fill="rgb(244,142,54)" rx="2" ry="2" />
<text  x="684.40" y="687.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::lock (1 samples, 0.01%)</title><rect x="108.8" y="581" width="0.1" height="15.0" fill="rgb(227,22,52)" rx="2" ry="2" />
<text  x="111.78" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (3 samples, 0.04%)</title><rect x="949.0" y="981" width="0.4" height="15.0" fill="rgb(228,209,27)" rx="2" ry="2" />
<text  x="951.96" y="991.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="1113.9" y="405" width="0.1" height="15.0" fill="rgb(241,82,15)" rx="2" ry="2" />
<text  x="1116.86" y="415.5" ></text>
</g>
<g >
<title>muduo::Logger::SourceFile::SourceFile&lt;56&gt; (1 samples, 0.01%)</title><rect x="369.4" y="805" width="0.1" height="15.0" fill="rgb(248,90,34)" rx="2" ry="2" />
<text  x="372.38" y="815.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (5 samples, 0.07%)</title><rect x="1012.3" y="645" width="0.8" height="15.0" fill="rgb(241,147,7)" rx="2" ry="2" />
<text  x="1015.33" y="655.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="671.2" y="645" width="0.2" height="15.0" fill="rgb(236,45,48)" rx="2" ry="2" />
<text  x="674.21" y="655.5" ></text>
</g>
<g >
<title>__inet_lookup_established (4 samples, 0.05%)</title><rect x="904.8" y="437" width="0.7" height="15.0" fill="rgb(206,165,43)" rx="2" ry="2" />
<text  x="907.82" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.03%)</title><rect x="33.3" y="997" width="0.3" height="15.0" fill="rgb(234,32,47)" rx="2" ry="2" />
<text  x="36.28" y="1007.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tid (1 samples, 0.01%)</title><rect x="671.1" y="661" width="0.1" height="15.0" fill="rgb(207,213,9)" rx="2" ry="2" />
<text  x="674.05" y="671.5" ></text>
</g>
<g >
<title>muduo::T::T (2 samples, 0.03%)</title><rect x="314.1" y="741" width="0.3" height="15.0" fill="rgb(212,105,10)" rx="2" ry="2" />
<text  x="317.09" y="751.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Poller*, std::default_delete&lt;muduo::net::Poller&gt; &gt; (1 samples, 0.01%)</title><rect x="258.3" y="789" width="0.2" height="15.0" fill="rgb(239,65,10)" rx="2" ry="2" />
<text  x="261.32" y="799.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="32.1" y="933" width="0.2" height="15.0" fill="rgb(209,60,0)" rx="2" ry="2" />
<text  x="35.15" y="943.5" ></text>
</g>
<g >
<title>finish_task_switch (74 samples, 1.01%)</title><rect x="46.4" y="677" width="11.9" height="15.0" fill="rgb(219,109,8)" rx="2" ry="2" />
<text  x="49.37" y="687.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (8 samples, 0.11%)</title><rect x="1147.2" y="693" width="1.3" height="15.0" fill="rgb(253,75,16)" rx="2" ry="2" />
<text  x="1150.16" y="703.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (560 samples, 7.67%)</title><rect x="152.3" y="501" width="90.5" height="15.0" fill="rgb(229,120,6)" rx="2" ry="2" />
<text  x="155.27" y="511.5" >tcp_sendms..</text>
</g>
<g >
<title>std::search&lt;char*, char const*&gt; (1 samples, 0.01%)</title><rect x="814.4" y="709" width="0.2" height="15.0" fill="rgb(252,80,38)" rx="2" ry="2" />
<text  x="817.45" y="719.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="1016.7" y="661" width="0.2" height="15.0" fill="rgb(211,141,9)" rx="2" ry="2" />
<text  x="1019.69" y="671.5" ></text>
</g>
<g >
<title>std::move&lt;std::_Any_data&amp;&gt; (1 samples, 0.01%)</title><rect x="773.1" y="629" width="0.1" height="15.0" fill="rgb(241,95,28)" rx="2" ry="2" />
<text  x="776.06" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.01%)</title><rect x="807.7" y="709" width="0.1" height="15.0" fill="rgb(214,63,16)" rx="2" ry="2" />
<text  x="810.66" y="719.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1113.9" y="485" width="0.1" height="15.0" fill="rgb(250,76,47)" rx="2" ry="2" />
<text  x="1116.86" y="495.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="22.4" y="949" width="0.2" height="15.0" fill="rgb(250,93,42)" rx="2" ry="2" />
<text  x="25.45" y="959.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="1016.9" y="629" width="0.1" height="15.0" fill="rgb(247,67,30)" rx="2" ry="2" />
<text  x="1019.86" y="639.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10 samples, 0.14%)</title><rect x="831.3" y="597" width="1.6" height="15.0" fill="rgb(234,61,0)" rx="2" ry="2" />
<text  x="834.26" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="248.1" y="757" width="0.4" height="15.0" fill="rgb(211,107,32)" rx="2" ry="2" />
<text  x="251.13" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="674.0" y="613" width="0.3" height="15.0" fill="rgb(230,185,25)" rx="2" ry="2" />
<text  x="676.96" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="654.2" y="789" width="0.2" height="15.0" fill="rgb(205,65,9)" rx="2" ry="2" />
<text  x="657.24" y="799.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="1189.2" y="901" width="0.3" height="15.0" fill="rgb(228,9,35)" rx="2" ry="2" />
<text  x="1192.19" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (6 samples, 0.08%)</title><rect x="806.7" y="677" width="1.0" height="15.0" fill="rgb(220,10,54)" rx="2" ry="2" />
<text  x="809.69" y="687.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="671.9" y="661" width="0.1" height="15.0" fill="rgb(210,205,30)" rx="2" ry="2" />
<text  x="674.86" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="612.5" y="949" width="0.5" height="15.0" fill="rgb(209,41,20)" rx="2" ry="2" />
<text  x="615.53" y="959.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (2 samples, 0.03%)</title><rect x="657.1" y="725" width="0.4" height="15.0" fill="rgb(247,184,49)" rx="2" ry="2" />
<text  x="660.15" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="95.2" y="485" width="0.2" height="15.0" fill="rgb(211,185,1)" rx="2" ry="2" />
<text  x="98.20" y="495.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.05%)</title><rect x="281.4" y="965" width="0.7" height="15.0" fill="rgb(214,123,46)" rx="2" ry="2" />
<text  x="284.44" y="975.5" ></text>
</g>
<g >
<title>try_to_wake_up (11 samples, 0.15%)</title><rect x="1025.4" y="517" width="1.8" height="15.0" fill="rgb(241,53,48)" rx="2" ry="2" />
<text  x="1028.42" y="527.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1 samples, 0.01%)</title><rect x="113.1" y="741" width="0.2" height="15.0" fill="rgb(246,38,8)" rx="2" ry="2" />
<text  x="116.14" y="751.5" ></text>
</g>
<g >
<title>__lookup_mnt (5 samples, 0.07%)</title><rect x="1172.2" y="517" width="0.8" height="15.0" fill="rgb(247,75,18)" rx="2" ry="2" />
<text  x="1175.22" y="527.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.01%)</title><rect x="408.8" y="197" width="0.2" height="15.0" fill="rgb(229,12,50)" rx="2" ry="2" />
<text  x="411.83" y="207.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (1 samples, 0.01%)</title><rect x="872.2" y="709" width="0.1" height="15.0" fill="rgb(252,205,9)" rx="2" ry="2" />
<text  x="875.16" y="719.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (1 samples, 0.01%)</title><rect x="654.2" y="821" width="0.2" height="15.0" fill="rgb(231,3,1)" rx="2" ry="2" />
<text  x="657.24" y="831.5" ></text>
</g>
<g >
<title>muduo::ThreadLocalSingleton&lt;Parser&gt;::instance (1 samples, 0.01%)</title><rect x="1179.2" y="725" width="0.1" height="15.0" fill="rgb(247,216,32)" rx="2" ry="2" />
<text  x="1182.17" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,174 samples, 16.08%)</title><rect x="652.9" y="949" width="189.8" height="15.0" fill="rgb(209,185,1)" rx="2" ry="2" />
<text  x="655.95" y="959.5" >std::function&lt;void </text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="88.1" y="597" width="0.5" height="15.0" fill="rgb(205,49,33)" rx="2" ry="2" />
<text  x="91.08" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="658.1" y="805" width="1.0" height="15.0" fill="rgb(242,182,40)" rx="2" ry="2" />
<text  x="661.12" y="815.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.01%)</title><rect x="658.8" y="453" width="0.1" height="15.0" fill="rgb(254,172,11)" rx="2" ry="2" />
<text  x="661.77" y="463.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="1013.0" y="629" width="0.1" height="15.0" fill="rgb(222,107,29)" rx="2" ry="2" />
<text  x="1015.98" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="842.4" y="741" width="0.2" height="15.0" fill="rgb(217,1,15)" rx="2" ry="2" />
<text  x="845.42" y="751.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (9 samples, 0.12%)</title><rect x="1170.8" y="533" width="1.4" height="15.0" fill="rgb(211,56,22)" rx="2" ry="2" />
<text  x="1173.76" y="543.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (234 samples, 3.21%)</title><rect x="320.6" y="725" width="37.8" height="15.0" fill="rgb(221,184,26)" rx="2" ry="2" />
<text  x="323.56" y="735.5" >std..</text>
</g>
<g >
<title>__vfs_write (232 samples, 3.18%)</title><rect x="547.4" y="901" width="37.5" height="15.0" fill="rgb(214,121,1)" rx="2" ry="2" />
<text  x="550.38" y="911.5" >__v..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1134.4" y="581" width="0.1" height="15.0" fill="rgb(236,50,50)" rx="2" ry="2" />
<text  x="1137.39" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (4 samples, 0.05%)</title><rect x="796.0" y="629" width="0.7" height="15.0" fill="rgb(207,72,45)" rx="2" ry="2" />
<text  x="799.02" y="639.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="1014.6" y="597" width="0.2" height="15.0" fill="rgb(243,210,53)" rx="2" ry="2" />
<text  x="1017.59" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,174 samples, 16.08%)</title><rect x="652.9" y="917" width="189.8" height="15.0" fill="rgb(245,151,16)" rx="2" ry="2" />
<text  x="655.95" y="927.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>std::__relocate_a&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="565" width="0.2" height="15.0" fill="rgb(209,158,8)" rx="2" ry="2" />
<text  x="1123.81" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="793.9" y="597" width="0.2" height="15.0" fill="rgb(252,27,28)" rx="2" ry="2" />
<text  x="796.92" y="607.5" ></text>
</g>
<g >
<title>finish_task_switch (6 samples, 0.08%)</title><rect x="688.2" y="533" width="1.0" height="15.0" fill="rgb(250,35,32)" rx="2" ry="2" />
<text  x="691.19" y="543.5" ></text>
</g>
<g >
<title>tcp_push (199 samples, 2.73%)</title><rect x="895.9" y="789" width="32.2" height="15.0" fill="rgb(229,23,22)" rx="2" ry="2" />
<text  x="898.93" y="799.5" >tc..</text>
</g>
<g >
<title>sys_futex (10 samples, 0.14%)</title><rect x="992.4" y="757" width="1.7" height="15.0" fill="rgb(218,60,10)" rx="2" ry="2" />
<text  x="995.44" y="767.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="768.7" y="581" width="0.2" height="15.0" fill="rgb(240,3,50)" rx="2" ry="2" />
<text  x="771.70" y="591.5" ></text>
</g>
<g >
<title>eventfd_ctx_read (5 samples, 0.07%)</title><rect x="72.6" y="565" width="0.8" height="15.0" fill="rgb(205,226,29)" rx="2" ry="2" />
<text  x="75.56" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="505.8" y="949" width="0.2" height="15.0" fill="rgb(239,129,10)" rx="2" ry="2" />
<text  x="508.83" y="959.5" ></text>
</g>
<g >
<title>muduo::detail::ThreadData::runInThread (1,372 samples, 18.80%)</title><rect x="37.5" y="965" width="221.8" height="15.0" fill="rgb(207,180,15)" rx="2" ry="2" />
<text  x="40.48" y="975.5" >muduo::detail::ThreadData::ru..</text>
</g>
<g >
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="563.5" y="357" width="0.4" height="15.0" fill="rgb(220,94,22)" rx="2" ry="2" />
<text  x="566.54" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.03%)</title><rect x="500.2" y="789" width="0.3" height="15.0" fill="rgb(214,86,13)" rx="2" ry="2" />
<text  x="503.17" y="799.5" ></text>
</g>
<g >
<title>__fget_light (5 samples, 0.07%)</title><rect x="689.6" y="549" width="0.9" height="15.0" fill="rgb(221,73,0)" rx="2" ry="2" />
<text  x="692.64" y="559.5" ></text>
</g>
<g >
<title>std::locale::operator= (2 samples, 0.03%)</title><rect x="20.3" y="965" width="0.4" height="15.0" fill="rgb(212,186,26)" rx="2" ry="2" />
<text  x="23.35" y="975.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1134.2" y="565" width="0.2" height="15.0" fill="rgb(206,48,49)" rx="2" ry="2" />
<text  x="1137.23" y="575.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="28.8" y="933" width="0.1" height="15.0" fill="rgb(233,173,46)" rx="2" ry="2" />
<text  x="31.75" y="943.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="112.7" y="709" width="0.1" height="15.0" fill="rgb(236,99,4)" rx="2" ry="2" />
<text  x="115.66" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="350.3" y="501" width="0.2" height="15.0" fill="rgb(226,71,20)" rx="2" ry="2" />
<text  x="353.31" y="511.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (2 samples, 0.03%)</title><rect x="1146.5" y="661" width="0.3" height="15.0" fill="rgb(246,104,12)" rx="2" ry="2" />
<text  x="1149.51" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="1165.3" y="709" width="0.3" height="15.0" fill="rgb(207,164,47)" rx="2" ry="2" />
<text  x="1168.27" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="357.9" y="645" width="0.2" height="15.0" fill="rgb(207,4,43)" rx="2" ry="2" />
<text  x="360.91" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;2ul, muduo::Timestamp&amp;&amp;, false&gt;::_Head_base&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="110.1" y="549" width="0.1" height="15.0" fill="rgb(238,116,24)" rx="2" ry="2" />
<text  x="113.07" y="559.5" ></text>
</g>
<g >
<title>apparmor_file_permission (3 samples, 0.04%)</title><rect x="874.3" y="901" width="0.5" height="15.0" fill="rgb(223,211,42)" rx="2" ry="2" />
<text  x="877.27" y="911.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1151.5" y="581" width="0.2" height="15.0" fill="rgb(211,115,2)" rx="2" ry="2" />
<text  x="1154.52" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="315.2" y="661" width="0.2" height="15.0" fill="rgb(210,2,22)" rx="2" ry="2" />
<text  x="318.23" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="276.6" y="949" width="0.1" height="15.0" fill="rgb(207,140,48)" rx="2" ry="2" />
<text  x="279.59" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="273.0" y="933" width="0.2" height="15.0" fill="rgb(239,135,29)" rx="2" ry="2" />
<text  x="276.03" y="943.5" ></text>
</g>
<g >
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="167.6" y="101" width="0.5" height="15.0" fill="rgb(244,39,22)" rx="2" ry="2" />
<text  x="170.62" y="111.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="617.2" y="901" width="0.2" height="15.0" fill="rgb(224,167,51)" rx="2" ry="2" />
<text  x="620.22" y="911.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.01%)</title><rect x="658.8" y="485" width="0.1" height="15.0" fill="rgb(228,114,17)" rx="2" ry="2" />
<text  x="661.77" y="495.5" ></text>
</g>
<g >
<title>vfs_write (466 samples, 6.38%)</title><rect x="690.5" y="565" width="75.3" height="15.0" fill="rgb(233,150,42)" rx="2" ry="2" />
<text  x="693.45" y="575.5" >vfs_write</text>
</g>
<g >
<title>muduo::net::Buffer::beginWrite (1 samples, 0.01%)</title><rect x="676.5" y="661" width="0.2" height="15.0" fill="rgb(248,228,53)" rx="2" ry="2" />
<text  x="679.55" y="671.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.01%)</title><rect x="260.1" y="997" width="0.2" height="15.0" fill="rgb(215,131,19)" rx="2" ry="2" />
<text  x="263.10" y="1007.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="373.1" y="741" width="0.2" height="15.0" fill="rgb(229,177,54)" rx="2" ry="2" />
<text  x="376.10" y="751.5" ></text>
</g>
<g >
<title>apparmor_file_permission (4 samples, 0.05%)</title><rect x="334.1" y="517" width="0.7" height="15.0" fill="rgb(222,185,7)" rx="2" ry="2" />
<text  x="337.14" y="527.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.01%)</title><rect x="276.7" y="901" width="0.2" height="15.0" fill="rgb(206,67,31)" rx="2" ry="2" />
<text  x="279.75" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.03%)</title><rect x="1005.7" y="677" width="0.3" height="15.0" fill="rgb(238,182,53)" rx="2" ry="2" />
<text  x="1008.70" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="112.2" y="693" width="0.1" height="15.0" fill="rgb(236,19,10)" rx="2" ry="2" />
<text  x="115.17" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="344.8" y="517" width="0.2" height="15.0" fill="rgb(225,40,20)" rx="2" ry="2" />
<text  x="347.81" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (2 samples, 0.03%)</title><rect x="261.1" y="917" width="0.3" height="15.0" fill="rgb(222,86,2)" rx="2" ry="2" />
<text  x="264.07" y="927.5" ></text>
</g>
<g >
<title>muduo::Logger::logLevel (1 samples, 0.01%)</title><rect x="65.9" y="789" width="0.2" height="15.0" fill="rgb(248,21,37)" rx="2" ry="2" />
<text  x="68.94" y="799.5" ></text>
</g>
<g >
<title>__vfs_read (4 samples, 0.05%)</title><rect x="323.1" y="597" width="0.7" height="15.0" fill="rgb(253,71,41)" rx="2" ry="2" />
<text  x="326.15" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.01%)</title><rect x="337.7" y="485" width="0.2" height="15.0" fill="rgb(244,171,21)" rx="2" ry="2" />
<text  x="340.70" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="1013.6" y="645" width="0.2" height="15.0" fill="rgb(206,170,50)" rx="2" ry="2" />
<text  x="1016.62" y="655.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.43 (3 samples, 0.04%)</title><rect x="550.9" y="757" width="0.5" height="15.0" fill="rgb(212,147,28)" rx="2" ry="2" />
<text  x="553.93" y="767.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="349.2" y="517" width="0.3" height="15.0" fill="rgb(226,185,16)" rx="2" ry="2" />
<text  x="352.18" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="1133.1" y="677" width="0.2" height="15.0" fill="rgb(209,179,37)" rx="2" ry="2" />
<text  x="1136.09" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="994.5" y="725" width="0.2" height="15.0" fill="rgb(236,184,21)" rx="2" ry="2" />
<text  x="997.55" y="735.5" ></text>
</g>
<g >
<title>ext4_getattr (3 samples, 0.04%)</title><rect x="835.5" y="581" width="0.5" height="15.0" fill="rgb(243,17,34)" rx="2" ry="2" />
<text  x="838.47" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="544.1" y="949" width="0.7" height="15.0" fill="rgb(207,101,22)" rx="2" ry="2" />
<text  x="547.14" y="959.5" ></text>
</g>
<g >
<title>check_stack_object (1 samples, 0.01%)</title><rect x="86.1" y="533" width="0.2" height="15.0" fill="rgb(228,186,6)" rx="2" ry="2" />
<text  x="89.14" y="543.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::operator=&lt;muduo::net::TcpConnection&gt; (1 samples, 0.01%)</title><rect x="819.0" y="709" width="0.1" height="15.0" fill="rgb(226,72,44)" rx="2" ry="2" />
<text  x="821.98" y="719.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.01%)</title><rect x="82.6" y="261" width="0.1" height="15.0" fill="rgb(223,115,9)" rx="2" ry="2" />
<text  x="85.59" y="271.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="995.5" y="565" width="0.3" height="15.0" fill="rgb(238,217,28)" rx="2" ry="2" />
<text  x="998.52" y="575.5" ></text>
</g>
<g >
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="577.8" y="581" width="0.5" height="15.0" fill="rgb(250,162,34)" rx="2" ry="2" />
<text  x="580.77" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="345.9" y="469" width="0.2" height="15.0" fill="rgb(240,96,26)" rx="2" ry="2" />
<text  x="348.94" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="32.1" y="901" width="0.2" height="15.0" fill="rgb(242,141,22)" rx="2" ry="2" />
<text  x="35.15" y="911.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;long&gt; (9 samples, 0.12%)</title><rect x="269.0" y="965" width="1.4" height="15.0" fill="rgb(222,205,2)" rx="2" ry="2" />
<text  x="271.99" y="975.5" ></text>
</g>
<g >
<title>mutex_lock (2 samples, 0.03%)</title><rect x="294.7" y="725" width="0.3" height="15.0" fill="rgb(216,6,21)" rx="2" ry="2" />
<text  x="297.69" y="735.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="504.7" y="693" width="0.2" height="15.0" fill="rgb(229,89,20)" rx="2" ry="2" />
<text  x="507.70" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_write (29 samples, 0.40%)</title><rect x="10.0" y="981" width="4.7" height="15.0" fill="rgb(250,154,1)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="1123.1" y="645" width="0.1" height="15.0" fill="rgb(207,198,37)" rx="2" ry="2" />
<text  x="1126.07" y="655.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="28.9" y="917" width="0.2" height="15.0" fill="rgb(228,2,33)" rx="2" ry="2" />
<text  x="31.91" y="927.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.9 (1 samples, 0.01%)</title><rect x="673.5" y="517" width="0.1" height="15.0" fill="rgb(215,65,18)" rx="2" ry="2" />
<text  x="676.48" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="997.1" y="821" width="0.2" height="15.0" fill="rgb(249,13,12)" rx="2" ry="2" />
<text  x="1000.13" y="831.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="682.9" y="517" width="0.1" height="15.0" fill="rgb(226,189,51)" rx="2" ry="2" />
<text  x="685.85" y="527.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (1 samples, 0.01%)</title><rect x="926.3" y="629" width="0.2" height="15.0" fill="rgb(209,225,21)" rx="2" ry="2" />
<text  x="929.32" y="639.5" ></text>
</g>
<g >
<title>path_put (2 samples, 0.03%)</title><rect x="1167.7" y="629" width="0.3" height="15.0" fill="rgb(221,49,42)" rx="2" ry="2" />
<text  x="1170.69" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="948.8" y="965" width="0.2" height="15.0" fill="rgb(213,73,21)" rx="2" ry="2" />
<text  x="951.79" y="975.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (1 samples, 0.01%)</title><rect x="480.8" y="261" width="0.1" height="15.0" fill="rgb(249,136,54)" rx="2" ry="2" />
<text  x="483.77" y="271.5" ></text>
</g>
<g >
<title>eventfd_poll (2 samples, 0.03%)</title><rect x="293.1" y="693" width="0.3" height="15.0" fill="rgb(248,36,27)" rx="2" ry="2" />
<text  x="296.08" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1187.3" y="613" width="0.1" height="15.0" fill="rgb(210,55,37)" rx="2" ry="2" />
<text  x="1190.25" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (4 samples, 0.05%)</title><rect x="1120.5" y="581" width="0.6" height="15.0" fill="rgb(214,15,3)" rx="2" ry="2" />
<text  x="1123.48" y="591.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.01%)</title><rect x="1015.1" y="533" width="0.1" height="15.0" fill="rgb(219,36,41)" rx="2" ry="2" />
<text  x="1018.08" y="543.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="39.4" y="741" width="0.3" height="15.0" fill="rgb(206,169,36)" rx="2" ry="2" />
<text  x="42.42" y="751.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (2 samples, 0.03%)</title><rect x="803.1" y="661" width="0.4" height="15.0" fill="rgb(252,129,32)" rx="2" ry="2" />
<text  x="806.13" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="379.7" y="709" width="0.2" height="15.0" fill="rgb(252,34,24)" rx="2" ry="2" />
<text  x="382.73" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void  (249 samples, 3.41%)</title><rect x="319.4" y="789" width="40.3" height="15.0" fill="rgb(236,216,22)" rx="2" ry="2" />
<text  x="322.43" y="799.5" >std..</text>
</g>
<g >
<title>__pthread_disable_asynccancel (3 samples, 0.04%)</title><rect x="625.5" y="997" width="0.4" height="15.0" fill="rgb(216,68,41)" rx="2" ry="2" />
<text  x="628.46" y="1007.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (130 samples, 1.78%)</title><rect x="901.9" y="533" width="21.0" height="15.0" fill="rgb(228,77,0)" rx="2" ry="2" />
<text  x="904.91" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.14%)</title><rect x="992.4" y="789" width="1.7" height="15.0" fill="rgb(240,19,43)" rx="2" ry="2" />
<text  x="995.44" y="799.5" ></text>
</g>
<g >
<title>skb_release_data (3 samples, 0.04%)</title><rect x="910.3" y="341" width="0.5" height="15.0" fill="rgb(246,92,40)" rx="2" ry="2" />
<text  x="913.32" y="351.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (4 samples, 0.05%)</title><rect x="830.3" y="549" width="0.6" height="15.0" fill="rgb(212,116,28)" rx="2" ry="2" />
<text  x="833.29" y="559.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAsString[abi:cxx11] (1 samples, 0.01%)</title><rect x="804.6" y="693" width="0.1" height="15.0" fill="rgb(230,57,32)" rx="2" ry="2" />
<text  x="807.59" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1187.3" y="629" width="0.1" height="15.0" fill="rgb(225,128,41)" rx="2" ry="2" />
<text  x="1190.25" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (4 samples, 0.05%)</title><rect x="1140.9" y="677" width="0.6" height="15.0" fill="rgb(205,69,30)" rx="2" ry="2" />
<text  x="1143.85" y="687.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (15 samples, 0.21%)</title><rect x="130.6" y="789" width="2.4" height="15.0" fill="rgb(249,13,28)" rx="2" ry="2" />
<text  x="133.60" y="799.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (251 samples, 3.44%)</title><rect x="545.8" y="965" width="40.5" height="15.0" fill="rgb(235,138,54)" rx="2" ry="2" />
<text  x="548.76" y="975.5" >ent..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="248.0" y="725" width="0.1" height="15.0" fill="rgb(223,28,9)" rx="2" ry="2" />
<text  x="250.97" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (3 samples, 0.04%)</title><rect x="1147.3" y="645" width="0.5" height="15.0" fill="rgb(228,4,39)" rx="2" ry="2" />
<text  x="1150.32" y="655.5" ></text>
</g>
<g >
<title>mod_timer (3 samples, 0.04%)</title><rect x="561.4" y="357" width="0.5" height="15.0" fill="rgb(234,42,2)" rx="2" ry="2" />
<text  x="564.44" y="367.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="373.9" y="789" width="0.2" height="15.0" fill="rgb(210,217,54)" rx="2" ry="2" />
<text  x="376.91" y="799.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.01%)</title><rect x="337.4" y="357" width="0.1" height="15.0" fill="rgb(254,145,17)" rx="2" ry="2" />
<text  x="340.37" y="367.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="578.3" y="549" width="0.4" height="15.0" fill="rgb(212,127,13)" rx="2" ry="2" />
<text  x="581.26" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1156.1" y="661" width="0.1" height="15.0" fill="rgb(249,62,12)" rx="2" ry="2" />
<text  x="1159.05" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="94.7" y="485" width="0.2" height="15.0" fill="rgb(248,44,6)" rx="2" ry="2" />
<text  x="97.71" y="495.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (11 samples, 0.15%)</title><rect x="577.4" y="613" width="1.8" height="15.0" fill="rgb(243,100,12)" rx="2" ry="2" />
<text  x="580.45" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="351.0" y="485" width="0.1" height="15.0" fill="rgb(205,82,25)" rx="2" ry="2" />
<text  x="353.95" y="495.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="121.4" y="757" width="0.1" height="15.0" fill="rgb(226,170,43)" rx="2" ry="2" />
<text  x="124.39" y="767.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="675.4" y="629" width="0.2" height="15.0" fill="rgb(215,58,28)" rx="2" ry="2" />
<text  x="678.42" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="314.7" y="661" width="0.2" height="15.0" fill="rgb(240,44,17)" rx="2" ry="2" />
<text  x="317.74" y="671.5" ></text>
</g>
<g >
<title>sock_def_readable (1 samples, 0.01%)</title><rect x="562.3" y="405" width="0.1" height="15.0" fill="rgb(216,127,2)" rx="2" ry="2" />
<text  x="565.25" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::EventLoop*&amp;&gt; (1 samples, 0.01%)</title><rect x="358.4" y="725" width="0.2" height="15.0" fill="rgb(241,211,36)" rx="2" ry="2" />
<text  x="361.39" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1183.0" y="677" width="0.2" height="15.0" fill="rgb(250,202,41)" rx="2" ry="2" />
<text  x="1186.05" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void  (277 samples, 3.80%)</title><rect x="68.8" y="789" width="44.8" height="15.0" fill="rgb(254,218,10)" rx="2" ry="2" />
<text  x="71.85" y="799.5" >std:..</text>
</g>
<g >
<title>security_inode_getattr (5 samples, 0.07%)</title><rect x="1176.4" y="613" width="0.8" height="15.0" fill="rgb(234,70,18)" rx="2" ry="2" />
<text  x="1179.42" y="623.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (4 samples, 0.05%)</title><rect x="671.2" y="661" width="0.7" height="15.0" fill="rgb(253,187,36)" rx="2" ry="2" />
<text  x="674.21" y="671.5" ></text>
</g>
<g >
<title>__schedule (75 samples, 1.03%)</title><rect x="46.2" y="693" width="12.1" height="15.0" fill="rgb(251,171,22)" rx="2" ry="2" />
<text  x="49.21" y="703.5" ></text>
</g>
<g >
<title>ep_poll (116 samples, 1.59%)</title><rect x="39.9" y="757" width="18.8" height="15.0" fill="rgb(225,34,50)" rx="2" ry="2" />
<text  x="42.91" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (10 samples, 0.14%)</title><rect x="1150.7" y="693" width="1.6" height="15.0" fill="rgb(240,222,4)" rx="2" ry="2" />
<text  x="1153.72" y="703.5" ></text>
</g>
<g >
<title>sk_wait_data (148 samples, 2.03%)</title><rect x="848.4" y="821" width="23.9" height="15.0" fill="rgb(254,24,11)" rx="2" ry="2" />
<text  x="851.40" y="831.5" >s..</text>
</g>
<g >
<title>sk_free (1 samples, 0.01%)</title><rect x="658.8" y="373" width="0.1" height="15.0" fill="rgb(253,149,22)" rx="2" ry="2" />
<text  x="661.77" y="383.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="98.4" y="517" width="0.2" height="15.0" fill="rgb(234,97,1)" rx="2" ry="2" />
<text  x="101.43" y="527.5" ></text>
</g>
<g >
<title>ksize (1 samples, 0.01%)</title><rect x="401.4" y="453" width="0.2" height="15.0" fill="rgb(232,227,18)" rx="2" ry="2" />
<text  x="404.39" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="318.8" y="773" width="0.1" height="15.0" fill="rgb(211,105,0)" rx="2" ry="2" />
<text  x="321.78" y="783.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (1 samples, 0.01%)</title><rect x="1119.2" y="549" width="0.2" height="15.0" fill="rgb(209,196,52)" rx="2" ry="2" />
<text  x="1122.19" y="559.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="1014.4" y="517" width="0.2" height="15.0" fill="rgb(251,170,52)" rx="2" ry="2" />
<text  x="1017.43" y="527.5" ></text>
</g>
<g >
<title>__lll_lock_wait (2 samples, 0.03%)</title><rect x="1014.4" y="629" width="0.4" height="15.0" fill="rgb(228,153,39)" rx="2" ry="2" />
<text  x="1017.43" y="639.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (10 samples, 0.14%)</title><rect x="1186.8" y="853" width="1.6" height="15.0" fill="rgb(224,145,30)" rx="2" ry="2" />
<text  x="1189.77" y="863.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="314.7" y="629" width="0.2" height="15.0" fill="rgb(252,207,45)" rx="2" ry="2" />
<text  x="317.74" y="639.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (6 samples, 0.08%)</title><rect x="19.1" y="965" width="0.9" height="15.0" fill="rgb(217,23,27)" rx="2" ry="2" />
<text  x="22.05" y="975.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="848.4" y="789" width="0.2" height="15.0" fill="rgb(237,27,45)" rx="2" ry="2" />
<text  x="851.40" y="799.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="22.0" y="933" width="0.1" height="15.0" fill="rgb(233,113,52)" rx="2" ry="2" />
<text  x="24.96" y="943.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (11 samples, 0.15%)</title><rect x="654.4" y="805" width="1.8" height="15.0" fill="rgb(241,192,6)" rx="2" ry="2" />
<text  x="657.40" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="112.2" y="677" width="0.1" height="15.0" fill="rgb(225,180,29)" rx="2" ry="2" />
<text  x="115.17" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="107.2" y="517" width="0.1" height="15.0" fill="rgb(205,55,49)" rx="2" ry="2" />
<text  x="110.16" y="527.5" ></text>
</g>
<g >
<title>__lll_lock_wait (2 samples, 0.03%)</title><rect x="1024.9" y="629" width="0.4" height="15.0" fill="rgb(208,44,28)" rx="2" ry="2" />
<text  x="1027.94" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="371.8" y="725" width="0.2" height="15.0" fill="rgb(232,64,43)" rx="2" ry="2" />
<text  x="374.81" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="133.7" y="773" width="0.1" height="15.0" fill="rgb(246,21,36)" rx="2" ry="2" />
<text  x="136.67" y="783.5" ></text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.01%)</title><rect x="560.1" y="437" width="0.2" height="15.0" fill="rgb(232,12,7)" rx="2" ry="2" />
<text  x="563.15" y="447.5" ></text>
</g>
<g >
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="404.3" y="389" width="0.3" height="15.0" fill="rgb(232,85,7)" rx="2" ry="2" />
<text  x="407.30" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[]@plt (1 samples, 0.01%)</title><rect x="1181.8" y="725" width="0.1" height="15.0" fill="rgb(224,12,9)" rx="2" ry="2" />
<text  x="1184.76" y="735.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (1 samples, 0.01%)</title><rect x="83.1" y="485" width="0.1" height="15.0" fill="rgb(233,170,36)" rx="2" ry="2" />
<text  x="86.07" y="495.5" ></text>
</g>
<g >
<title>Parser::findCRLF (12 samples, 0.16%)</title><rect x="999.9" y="709" width="1.9" height="15.0" fill="rgb(236,192,18)" rx="2" ry="2" />
<text  x="1002.88" y="719.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (2 samples, 0.03%)</title><rect x="236.5" y="245" width="0.3" height="15.0" fill="rgb(238,2,38)" rx="2" ry="2" />
<text  x="239.49" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.10%)</title><rect x="1151.0" y="645" width="1.2" height="15.0" fill="rgb(219,92,25)" rx="2" ry="2" />
<text  x="1154.04" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="1133.6" y="661" width="0.3" height="15.0" fill="rgb(245,224,10)" rx="2" ry="2" />
<text  x="1136.58" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="337.7" y="453" width="0.2" height="15.0" fill="rgb(214,227,4)" rx="2" ry="2" />
<text  x="340.70" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="137.9" y="661" width="0.3" height="15.0" fill="rgb(242,206,46)" rx="2" ry="2" />
<text  x="140.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.07%)</title><rect x="350.3" y="549" width="0.8" height="15.0" fill="rgb(210,167,34)" rx="2" ry="2" />
<text  x="353.31" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="357.3" y="613" width="0.1" height="15.0" fill="rgb(221,95,6)" rx="2" ry="2" />
<text  x="360.26" y="623.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="872.2" y="677" width="0.1" height="15.0" fill="rgb(228,31,9)" rx="2" ry="2" />
<text  x="875.16" y="687.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="253.5" y="741" width="0.1" height="15.0" fill="rgb(208,228,39)" rx="2" ry="2" />
<text  x="256.47" y="751.5" ></text>
</g>
<g >
<title>__strcmp_sse2_unaligned (3 samples, 0.04%)</title><rect x="37.0" y="981" width="0.5" height="15.0" fill="rgb(217,26,40)" rx="2" ry="2" />
<text  x="40.00" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="254.0" y="741" width="0.1" height="15.0" fill="rgb(221,3,24)" rx="2" ry="2" />
<text  x="256.95" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (3 samples, 0.04%)</title><rect x="353.5" y="485" width="0.5" height="15.0" fill="rgb(224,92,26)" rx="2" ry="2" />
<text  x="356.54" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~tuple (1 samples, 0.01%)</title><rect x="491.4" y="661" width="0.2" height="15.0" fill="rgb(207,120,11)" rx="2" ry="2" />
<text  x="494.44" y="671.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (3 samples, 0.04%)</title><rect x="367.0" y="741" width="0.4" height="15.0" fill="rgb(232,29,41)" rx="2" ry="2" />
<text  x="369.96" y="751.5" ></text>
</g>
<g >
<title>__netif_receive_skb (120 samples, 1.64%)</title><rect x="557.1" y="549" width="19.4" height="15.0" fill="rgb(230,57,7)" rx="2" ry="2" />
<text  x="560.08" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="776.5" y="645" width="0.1" height="15.0" fill="rgb(237,13,43)" rx="2" ry="2" />
<text  x="779.46" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.01%)</title><rect x="1161.1" y="645" width="0.1" height="15.0" fill="rgb(247,76,5)" rx="2" ry="2" />
<text  x="1164.06" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="351.3" y="517" width="0.1" height="15.0" fill="rgb(221,192,10)" rx="2" ry="2" />
<text  x="354.28" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="59.8" y="821" width="0.3" height="15.0" fill="rgb(212,24,24)" rx="2" ry="2" />
<text  x="62.79" y="831.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (1 samples, 0.01%)</title><rect x="368.4" y="757" width="0.2" height="15.0" fill="rgb(253,98,54)" rx="2" ry="2" />
<text  x="371.41" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="92.4" y="517" width="0.2" height="15.0" fill="rgb(244,84,39)" rx="2" ry="2" />
<text  x="95.45" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="272.4" y="933" width="0.1" height="15.0" fill="rgb(215,129,9)" rx="2" ry="2" />
<text  x="275.38" y="943.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="367.3" y="709" width="0.1" height="15.0" fill="rgb(215,141,33)" rx="2" ry="2" />
<text  x="370.28" y="719.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="40.7" y="709" width="0.2" height="15.0" fill="rgb(208,122,34)" rx="2" ry="2" />
<text  x="43.72" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="363.2" y="757" width="0.2" height="15.0" fill="rgb(228,137,40)" rx="2" ry="2" />
<text  x="366.24" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="777.9" y="677" width="0.2" height="15.0" fill="rgb(247,118,0)" rx="2" ry="2" />
<text  x="780.91" y="687.5" ></text>
</g>
<g >
<title>__sock_release (1 samples, 0.01%)</title><rect x="997.8" y="421" width="0.1" height="15.0" fill="rgb(214,209,9)" rx="2" ry="2" />
<text  x="1000.78" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="69.5" y="709" width="0.2" height="15.0" fill="rgb(252,148,33)" rx="2" ry="2" />
<text  x="72.49" y="719.5" ></text>
</g>
<g >
<title>[unknown] (111 samples, 1.52%)</title><rect x="14.7" y="997" width="17.9" height="15.0" fill="rgb(223,96,43)" rx="2" ry="2" />
<text  x="17.69" y="1007.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="68.4" y="725" width="0.1" height="15.0" fill="rgb(205,72,7)" rx="2" ry="2" />
<text  x="71.36" y="735.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::_Placeholder&lt;1&gt; &gt;::tuple (2 samples, 0.03%)</title><rect x="100.2" y="501" width="0.3" height="15.0" fill="rgb(238,4,25)" rx="2" ry="2" />
<text  x="103.21" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1149.7" y="645" width="0.2" height="15.0" fill="rgb(251,170,19)" rx="2" ry="2" />
<text  x="1152.75" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (2 samples, 0.03%)</title><rect x="354.2" y="501" width="0.3" height="15.0" fill="rgb(245,36,28)" rx="2" ry="2" />
<text  x="357.19" y="511.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (3 samples, 0.04%)</title><rect x="120.3" y="773" width="0.4" height="15.0" fill="rgb(214,87,15)" rx="2" ry="2" />
<text  x="123.26" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="489.5" y="789" width="0.2" height="15.0" fill="rgb(245,164,29)" rx="2" ry="2" />
<text  x="492.50" y="799.5" ></text>
</g>
<g >
<title>rcu_bh_qs (1 samples, 0.01%)</title><rect x="235.0" y="277" width="0.2" height="15.0" fill="rgb(250,150,0)" rx="2" ry="2" />
<text  x="238.04" y="287.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="1162.4" y="661" width="0.1" height="15.0" fill="rgb(213,149,13)" rx="2" ry="2" />
<text  x="1165.36" y="671.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="495.2" y="757" width="0.3" height="15.0" fill="rgb(238,126,30)" rx="2" ry="2" />
<text  x="498.16" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="35.4" y="981" width="0.3" height="15.0" fill="rgb(206,24,32)" rx="2" ry="2" />
<text  x="38.38" y="991.5" ></text>
</g>
<g >
<title>validate_xmit_skb (1 samples, 0.01%)</title><rect x="926.0" y="613" width="0.2" height="15.0" fill="rgb(226,35,33)" rx="2" ry="2" />
<text  x="929.00" y="623.5" ></text>
</g>
<g >
<title>std::move&lt;char&amp;&gt; (1 samples, 0.01%)</title><rect x="118.2" y="709" width="0.1" height="15.0" fill="rgb(207,209,51)" rx="2" ry="2" />
<text  x="121.15" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1187.3" y="645" width="0.1" height="15.0" fill="rgb(254,81,2)" rx="2" ry="2" />
<text  x="1190.25" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="798.9" y="693" width="0.2" height="15.0" fill="rgb(211,89,18)" rx="2" ry="2" />
<text  x="801.93" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="496.3" y="741" width="0.3" height="15.0" fill="rgb(225,153,51)" rx="2" ry="2" />
<text  x="499.29" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="803.5" y="661" width="0.3" height="15.0" fill="rgb(212,30,27)" rx="2" ry="2" />
<text  x="806.46" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="65.5" y="725" width="0.1" height="15.0" fill="rgb(246,167,52)" rx="2" ry="2" />
<text  x="68.45" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="92.4" y="501" width="0.2" height="15.0" fill="rgb(251,70,27)" rx="2" ry="2" />
<text  x="95.45" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.01%)</title><rect x="1153.6" y="709" width="0.2" height="15.0" fill="rgb(215,195,48)" rx="2" ry="2" />
<text  x="1156.63" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="601.4" y="917" width="0.1" height="15.0" fill="rgb(221,202,7)" rx="2" ry="2" />
<text  x="604.37" y="927.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="22.4" y="917" width="0.2" height="15.0" fill="rgb(250,70,37)" rx="2" ry="2" />
<text  x="25.45" y="927.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="794.2" y="629" width="0.2" height="15.0" fill="rgb(233,92,45)" rx="2" ry="2" />
<text  x="797.24" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="339.0" y="549" width="0.2" height="15.0" fill="rgb(221,111,22)" rx="2" ry="2" />
<text  x="341.99" y="559.5" ></text>
</g>
<g >
<title>sock_write_iter (2 samples, 0.03%)</title><rect x="485.5" y="581" width="0.3" height="15.0" fill="rgb(227,96,0)" rx="2" ry="2" />
<text  x="488.46" y="591.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="254.1" y="789" width="0.2" height="15.0" fill="rgb(246,145,43)" rx="2" ry="2" />
<text  x="257.12" y="799.5" ></text>
</g>
<g >
<title>asyncOutput (3 samples, 0.04%)</title><rect x="66.3" y="773" width="0.4" height="15.0" fill="rgb(206,52,9)" rx="2" ry="2" />
<text  x="69.26" y="783.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (3 samples, 0.04%)</title><rect x="800.9" y="677" width="0.5" height="15.0" fill="rgb(223,177,39)" rx="2" ry="2" />
<text  x="803.87" y="687.5" ></text>
</g>
<g >
<title>sock_read_iter (37 samples, 0.51%)</title><rect x="77.7" y="533" width="6.0" height="15.0" fill="rgb(251,111,9)" rx="2" ry="2" />
<text  x="80.74" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (156 samples, 2.14%)</title><rect x="507.8" y="965" width="25.2" height="15.0" fill="rgb(214,155,25)" rx="2" ry="2" />
<text  x="510.77" y="975.5" >d..</text>
</g>
<g >
<title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="776.1" y="645" width="0.4" height="15.0" fill="rgb(234,1,43)" rx="2" ry="2" />
<text  x="779.14" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (3 samples, 0.04%)</title><rect x="1150.1" y="613" width="0.5" height="15.0" fill="rgb(227,60,46)" rx="2" ry="2" />
<text  x="1153.07" y="623.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="250.9" y="725" width="0.3" height="15.0" fill="rgb(250,163,29)" rx="2" ry="2" />
<text  x="253.88" y="735.5" ></text>
</g>
<g >
<title>ext4_getattr (1 samples, 0.01%)</title><rect x="1177.4" y="581" width="0.2" height="15.0" fill="rgb(212,97,41)" rx="2" ry="2" />
<text  x="1180.39" y="591.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="872.8" y="789" width="0.3" height="15.0" fill="rgb(208,115,3)" rx="2" ry="2" />
<text  x="875.81" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (5 samples, 0.07%)</title><rect x="809.6" y="693" width="0.8" height="15.0" fill="rgb(246,223,32)" rx="2" ry="2" />
<text  x="812.60" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (1 samples, 0.01%)</title><rect x="351.3" y="485" width="0.1" height="15.0" fill="rgb(247,157,28)" rx="2" ry="2" />
<text  x="354.28" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (45 samples, 0.62%)</title><rect x="140.0" y="629" width="7.3" height="15.0" fill="rgb(214,14,29)" rx="2" ry="2" />
<text  x="142.98" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="679.9" y="565" width="0.2" height="15.0" fill="rgb(225,183,19)" rx="2" ry="2" />
<text  x="682.94" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (3 samples, 0.04%)</title><rect x="997.6" y="741" width="0.5" height="15.0" fill="rgb(235,180,18)" rx="2" ry="2" />
<text  x="1000.62" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1123.9" y="629" width="0.1" height="15.0" fill="rgb(241,115,1)" rx="2" ry="2" />
<text  x="1126.88" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (118 samples, 1.62%)</title><rect x="338.8" y="661" width="19.1" height="15.0" fill="rgb(231,45,44)" rx="2" ry="2" />
<text  x="341.83" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="344.2" y="517" width="0.3" height="15.0" fill="rgb(229,73,16)" rx="2" ry="2" />
<text  x="347.16" y="527.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setContextkv (10 samples, 0.14%)</title><rect x="1150.7" y="709" width="1.6" height="15.0" fill="rgb(210,40,8)" rx="2" ry="2" />
<text  x="1153.72" y="719.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (492 samples, 6.74%)</title><rect x="402.7" y="437" width="79.5" height="15.0" fill="rgb(220,89,48)" rx="2" ry="2" />
<text  x="405.69" y="447.5" >__tcp_tra..</text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::TcpConnection*, std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="358.6" y="725" width="0.1" height="15.0" fill="rgb(250,81,29)" rx="2" ry="2" />
<text  x="361.55" y="735.5" ></text>
</g>
<g >
<title>std::locale::operator=@plt (1 samples, 0.01%)</title><rect x="268.3" y="965" width="0.2" height="15.0" fill="rgb(210,92,9)" rx="2" ry="2" />
<text  x="271.34" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.01%)</title><rect x="102.5" y="501" width="0.1" height="15.0" fill="rgb(246,55,52)" rx="2" ry="2" />
<text  x="105.47" y="511.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1 samples, 0.01%)</title><rect x="547.9" y="853" width="0.1" height="15.0" fill="rgb(254,128,15)" rx="2" ry="2" />
<text  x="550.86" y="863.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (4 samples, 0.05%)</title><rect x="14.8" y="933" width="0.7" height="15.0" fill="rgb(251,145,29)" rx="2" ry="2" />
<text  x="17.85" y="943.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="633.4" y="949" width="0.1" height="15.0" fill="rgb(248,1,7)" rx="2" ry="2" />
<text  x="636.38" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (4 samples, 0.05%)</title><rect x="959.1" y="981" width="0.7" height="15.0" fill="rgb(210,144,28)" rx="2" ry="2" />
<text  x="962.14" y="991.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.01%)</title><rect x="848.2" y="805" width="0.2" height="15.0" fill="rgb(248,220,2)" rx="2" ry="2" />
<text  x="851.24" y="815.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="135.6" y="741" width="0.2" height="15.0" fill="rgb(206,167,45)" rx="2" ry="2" />
<text  x="138.61" y="751.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="497.3" y="725" width="0.1" height="15.0" fill="rgb(251,138,36)" rx="2" ry="2" />
<text  x="500.26" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::setCookie (1 samples, 0.01%)</title><rect x="254.1" y="741" width="0.2" height="15.0" fill="rgb(253,208,33)" rx="2" ry="2" />
<text  x="257.12" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="1125.0" y="613" width="0.3" height="15.0" fill="rgb(244,37,4)" rx="2" ry="2" />
<text  x="1128.01" y="623.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (1 samples, 0.01%)</title><rect x="237.3" y="341" width="0.2" height="15.0" fill="rgb(240,33,13)" rx="2" ry="2" />
<text  x="240.30" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="996.6" y="837" width="0.2" height="15.0" fill="rgb(233,0,37)" rx="2" ry="2" />
<text  x="999.65" y="847.5" ></text>
</g>
<g >
<title>__follow_mount_rcu.isra.27 (2 samples, 0.03%)</title><rect x="829.0" y="533" width="0.3" height="15.0" fill="rgb(206,133,7)" rx="2" ry="2" />
<text  x="832.00" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="244.9" y="741" width="0.2" height="15.0" fill="rgb(213,150,39)" rx="2" ry="2" />
<text  x="247.90" y="751.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="64.2" y="757" width="0.1" height="15.0" fill="rgb(218,130,32)" rx="2" ry="2" />
<text  x="67.16" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.14%)</title><rect x="34.1" y="997" width="1.6" height="15.0" fill="rgb(215,65,18)" rx="2" ry="2" />
<text  x="37.09" y="1007.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="1121.6" y="661" width="0.5" height="15.0" fill="rgb(208,157,50)" rx="2" ry="2" />
<text  x="1124.62" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="98.6" y="517" width="0.2" height="15.0" fill="rgb(218,170,20)" rx="2" ry="2" />
<text  x="101.59" y="527.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (8 samples, 0.11%)</title><rect x="122.4" y="741" width="1.3" height="15.0" fill="rgb(226,117,4)" rx="2" ry="2" />
<text  x="125.36" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="315.2" y="677" width="0.2" height="15.0" fill="rgb(231,2,27)" rx="2" ry="2" />
<text  x="318.23" y="687.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="122.2" y="757" width="0.2" height="15.0" fill="rgb(226,163,8)" rx="2" ry="2" />
<text  x="125.20" y="767.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (1 samples, 0.01%)</title><rect x="333.0" y="469" width="0.2" height="15.0" fill="rgb(236,61,9)" rx="2" ry="2" />
<text  x="336.01" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5 samples, 0.07%)</title><rect x="1126.8" y="693" width="0.8" height="15.0" fill="rgb(249,168,33)" rx="2" ry="2" />
<text  x="1129.79" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="838.1" y="725" width="0.1" height="15.0" fill="rgb(214,79,16)" rx="2" ry="2" />
<text  x="841.05" y="735.5" ></text>
</g>
<g >
<title>muduo::net::Timer::run (1 samples, 0.01%)</title><rect x="1188.2" y="789" width="0.2" height="15.0" fill="rgb(250,1,51)" rx="2" ry="2" />
<text  x="1191.22" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2 samples, 0.03%)</title><rect x="666.0" y="677" width="0.4" height="15.0" fill="rgb(216,214,28)" rx="2" ry="2" />
<text  x="669.04" y="687.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="151.3" y="357" width="0.2" height="15.0" fill="rgb(243,168,48)" rx="2" ry="2" />
<text  x="154.30" y="367.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (1 samples, 0.01%)</title><rect x="239.1" y="421" width="0.1" height="15.0" fill="rgb(210,166,12)" rx="2" ry="2" />
<text  x="242.08" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, true&gt; (1 samples, 0.01%)</title><rect x="346.1" y="533" width="0.2" height="15.0" fill="rgb(215,63,12)" rx="2" ry="2" />
<text  x="349.10" y="543.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="1011.5" y="629" width="0.2" height="15.0" fill="rgb(242,42,50)" rx="2" ry="2" />
<text  x="1014.52" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="489.0" y="741" width="0.2" height="15.0" fill="rgb(205,9,32)" rx="2" ry="2" />
<text  x="492.02" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (1 samples, 0.01%)</title><rect x="353.2" y="469" width="0.2" height="15.0" fill="rgb(246,107,42)" rx="2" ry="2" />
<text  x="356.22" y="479.5" ></text>
</g>
<g >
<title>_IO_old_init (1 samples, 0.01%)</title><rect x="271.4" y="981" width="0.2" height="15.0" fill="rgb(213,72,39)" rx="2" ry="2" />
<text  x="274.41" y="991.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="320.2" y="709" width="0.2" height="15.0" fill="rgb(228,66,41)" rx="2" ry="2" />
<text  x="323.24" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1123.7" y="517" width="0.2" height="15.0" fill="rgb(210,221,52)" rx="2" ry="2" />
<text  x="1126.72" y="527.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="806.0" y="565" width="0.2" height="15.0" fill="rgb(212,42,49)" rx="2" ry="2" />
<text  x="809.04" y="575.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (7 samples, 0.10%)</title><rect x="331.9" y="469" width="1.1" height="15.0" fill="rgb(251,205,34)" rx="2" ry="2" />
<text  x="334.88" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="354.5" y="485" width="0.2" height="15.0" fill="rgb(235,103,19)" rx="2" ry="2" />
<text  x="357.51" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.01%)</title><rect x="279.2" y="981" width="0.1" height="15.0" fill="rgb(251,218,47)" rx="2" ry="2" />
<text  x="282.17" y="991.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="565" width="0.2" height="15.0" fill="rgb(242,169,50)" rx="2" ry="2" />
<text  x="1190.41" y="575.5" ></text>
</g>
<g >
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.01%)</title><rect x="410.6" y="117" width="0.2" height="15.0" fill="rgb(242,49,13)" rx="2" ry="2" />
<text  x="413.61" y="127.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="842.4" y="757" width="0.2" height="15.0" fill="rgb(227,174,25)" rx="2" ry="2" />
<text  x="845.42" y="767.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1 samples, 0.01%)</title><rect x="575.7" y="405" width="0.1" height="15.0" fill="rgb(219,195,16)" rx="2" ry="2" />
<text  x="578.67" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="353.4" y="485" width="0.1" height="15.0" fill="rgb(239,21,37)" rx="2" ry="2" />
<text  x="356.38" y="495.5" ></text>
</g>
<g >
<title>tcp_md5_do_lookup (1 samples, 0.01%)</title><rect x="165.7" y="133" width="0.1" height="15.0" fill="rgb(234,147,28)" rx="2" ry="2" />
<text  x="168.68" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="786.6" y="581" width="0.2" height="15.0" fill="rgb(234,50,34)" rx="2" ry="2" />
<text  x="789.64" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="1153.0" y="709" width="0.5" height="15.0" fill="rgb(211,84,31)" rx="2" ry="2" />
<text  x="1155.98" y="719.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="45.7" y="693" width="0.5" height="15.0" fill="rgb(245,60,33)" rx="2" ry="2" />
<text  x="48.73" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="345.9" y="485" width="0.2" height="15.0" fill="rgb(232,14,43)" rx="2" ry="2" />
<text  x="348.94" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="88.7" y="677" width="0.2" height="15.0" fill="rgb(232,223,41)" rx="2" ry="2" />
<text  x="91.73" y="687.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.01%)</title><rect x="247.3" y="357" width="0.2" height="15.0" fill="rgb(219,92,45)" rx="2" ry="2" />
<text  x="250.33" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="1138.9" y="581" width="0.2" height="15.0" fill="rgb(235,82,10)" rx="2" ry="2" />
<text  x="1141.91" y="591.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (37 samples, 0.51%)</title><rect x="1008.0" y="693" width="5.9" height="15.0" fill="rgb(252,78,46)" rx="2" ry="2" />
<text  x="1010.96" y="703.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (2 samples, 0.03%)</title><rect x="873.5" y="853" width="0.3" height="15.0" fill="rgb(225,116,15)" rx="2" ry="2" />
<text  x="876.46" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (1 samples, 0.01%)</title><rect x="351.0" y="517" width="0.1" height="15.0" fill="rgb(213,138,9)" rx="2" ry="2" />
<text  x="353.95" y="527.5" ></text>
</g>
<g >
<title>alloc_buffer_head (2 samples, 0.03%)</title><rect x="10.2" y="757" width="0.3" height="15.0" fill="rgb(252,125,41)" rx="2" ry="2" />
<text  x="13.16" y="767.5" ></text>
</g>
<g >
<title>__lock_text_start (6 samples, 0.08%)</title><rect x="39.9" y="741" width="1.0" height="15.0" fill="rgb(240,1,35)" rx="2" ry="2" />
<text  x="42.91" y="751.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="64.5" y="741" width="0.1" height="15.0" fill="rgb(253,123,47)" rx="2" ry="2" />
<text  x="67.48" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,164 samples, 15.95%)</title><rect x="996.8" y="837" width="188.2" height="15.0" fill="rgb(236,169,2)" rx="2" ry="2" />
<text  x="999.81" y="847.5" >std::function&lt;void </text>
</g>
<g >
<title>tcp_v4_do_rcv (97 samples, 1.33%)</title><rect x="560.3" y="437" width="15.7" height="15.0" fill="rgb(254,190,38)" rx="2" ry="2" />
<text  x="563.31" y="447.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.01%)</title><rect x="268.2" y="965" width="0.1" height="15.0" fill="rgb(215,210,0)" rx="2" ry="2" />
<text  x="271.18" y="975.5" ></text>
</g>
<g >
<title>tcp_rearm_rto.part.60 (3 samples, 0.04%)</title><rect x="240.2" y="405" width="0.5" height="15.0" fill="rgb(235,141,43)" rx="2" ry="2" />
<text  x="243.21" y="415.5" ></text>
</g>
<g >
<title>__check_object_size (7 samples, 0.10%)</title><rect x="833.2" y="581" width="1.1" height="15.0" fill="rgb(239,198,31)" rx="2" ry="2" />
<text  x="836.20" y="591.5" ></text>
</g>
<g >
<title>[libz.so.1.2.8] (76 samples, 1.04%)</title><rect x="930.5" y="981" width="12.3" height="15.0" fill="rgb(213,203,47)" rx="2" ry="2" />
<text  x="933.53" y="991.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (18 samples, 0.25%)</title><rect x="1145.7" y="709" width="2.9" height="15.0" fill="rgb(222,75,29)" rx="2" ry="2" />
<text  x="1148.70" y="719.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (118 samples, 1.62%)</title><rect x="903.0" y="469" width="19.1" height="15.0" fill="rgb(228,27,2)" rx="2" ry="2" />
<text  x="906.04" y="479.5" ></text>
</g>
<g >
<title>vfprintf (3 samples, 0.04%)</title><rect x="281.0" y="981" width="0.4" height="15.0" fill="rgb(225,103,20)" rx="2" ry="2" />
<text  x="283.95" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (3 samples, 0.04%)</title><rect x="778.4" y="661" width="0.5" height="15.0" fill="rgb(229,169,22)" rx="2" ry="2" />
<text  x="781.40" y="671.5" ></text>
</g>
<g >
<title>__fget (4 samples, 0.05%)</title><rect x="147.6" y="581" width="0.6" height="15.0" fill="rgb(207,34,39)" rx="2" ry="2" />
<text  x="150.58" y="591.5" ></text>
</g>
<g >
<title>tcp_chrono_stop (1 samples, 0.01%)</title><rect x="565.2" y="373" width="0.1" height="15.0" fill="rgb(244,54,49)" rx="2" ry="2" />
<text  x="568.16" y="383.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (60 samples, 0.82%)</title><rect x="565.8" y="373" width="9.7" height="15.0" fill="rgb(246,125,22)" rx="2" ry="2" />
<text  x="568.81" y="383.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (4 samples, 0.05%)</title><rect x="32.0" y="981" width="0.6" height="15.0" fill="rgb(243,53,19)" rx="2" ry="2" />
<text  x="34.99" y="991.5" ></text>
</g>
<g >
<title>vfs_write (2 samples, 0.03%)</title><rect x="1117.1" y="581" width="0.3" height="15.0" fill="rgb(212,57,48)" rx="2" ry="2" />
<text  x="1120.09" y="591.5" ></text>
</g>
<g >
<title>__sock_release (1 samples, 0.01%)</title><rect x="658.8" y="421" width="0.1" height="15.0" fill="rgb(233,60,15)" rx="2" ry="2" />
<text  x="661.77" y="431.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="504.4" y="789" width="0.1" height="15.0" fill="rgb(230,69,49)" rx="2" ry="2" />
<text  x="507.37" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="620.9" y="981" width="0.2" height="15.0" fill="rgb(239,79,35)" rx="2" ry="2" />
<text  x="623.94" y="991.5" ></text>
</g>
<g >
<title>ip_send_check (1 samples, 0.01%)</title><rect x="580.2" y="693" width="0.2" height="15.0" fill="rgb(214,56,23)" rx="2" ry="2" />
<text  x="583.20" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (2 samples, 0.03%)</title><rect x="499.7" y="789" width="0.3" height="15.0" fill="rgb(210,149,12)" rx="2" ry="2" />
<text  x="502.69" y="799.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tid (1 samples, 0.01%)</title><rect x="682.7" y="645" width="0.2" height="15.0" fill="rgb(208,176,4)" rx="2" ry="2" />
<text  x="685.69" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="625.0" y="981" width="0.1" height="15.0" fill="rgb(211,169,42)" rx="2" ry="2" />
<text  x="627.98" y="991.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="1013.6" y="613" width="0.2" height="15.0" fill="rgb(211,130,53)" rx="2" ry="2" />
<text  x="1016.62" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="310.9" y="805" width="0.3" height="15.0" fill="rgb(212,116,2)" rx="2" ry="2" />
<text  x="313.86" y="815.5" ></text>
</g>
<g >
<title>sys_write (566 samples, 7.75%)</title><rect x="395.3" y="629" width="91.5" height="15.0" fill="rgb(210,228,52)" rx="2" ry="2" />
<text  x="398.25" y="639.5" >sys_write</text>
</g>
<g >
<title>eventfd_ctx_read (4 samples, 0.05%)</title><rect x="323.1" y="565" width="0.7" height="15.0" fill="rgb(241,56,34)" rx="2" ry="2" />
<text  x="326.15" y="575.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="805.7" y="517" width="0.2" height="15.0" fill="rgb(241,63,19)" rx="2" ry="2" />
<text  x="808.72" y="527.5" ></text>
</g>
<g >
<title>sk_destruct (1 samples, 0.01%)</title><rect x="658.8" y="341" width="0.1" height="15.0" fill="rgb(245,200,22)" rx="2" ry="2" />
<text  x="661.77" y="351.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::fillActiveChannels (22 samples, 0.30%)</title><rect x="130.3" y="805" width="3.5" height="15.0" fill="rgb(238,202,17)" rx="2" ry="2" />
<text  x="133.28" y="815.5" ></text>
</g>
<g >
<title>new_sync_write (28 samples, 0.38%)</title><rect x="10.2" y="885" width="4.5" height="15.0" fill="rgb(253,212,25)" rx="2" ry="2" />
<text  x="13.16" y="895.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::printActiveChannels (1 samples, 0.01%)</title><rect x="1189.5" y="933" width="0.2" height="15.0" fill="rgb(242,184,3)" rx="2" ry="2" />
<text  x="1192.52" y="943.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::runInThread (1,174 samples, 16.08%)</title><rect x="652.9" y="853" width="189.8" height="15.0" fill="rgb(223,82,16)" rx="2" ry="2" />
<text  x="655.95" y="863.5" >muduo::ThreadPl&lt;Parser&gt;:..</text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="1011.8" y="645" width="0.2" height="15.0" fill="rgb(221,115,34)" rx="2" ry="2" />
<text  x="1014.84" y="655.5" ></text>
</g>
<g >
<title>schedule (7 samples, 0.10%)</title><rect x="1029.5" y="565" width="1.1" height="15.0" fill="rgb(209,83,53)" rx="2" ry="2" />
<text  x="1032.47" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1157.2" y="693" width="0.1" height="15.0" fill="rgb(248,220,33)" rx="2" ry="2" />
<text  x="1160.18" y="703.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.01%)</title><rect x="337.4" y="149" width="0.1" height="15.0" fill="rgb(212,23,13)" rx="2" ry="2" />
<text  x="340.37" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6 samples, 0.08%)</title><rect x="1134.2" y="613" width="1.0" height="15.0" fill="rgb(240,185,20)" rx="2" ry="2" />
<text  x="1137.23" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="318.8" y="741" width="0.1" height="15.0" fill="rgb(206,157,38)" rx="2" ry="2" />
<text  x="321.78" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="1124.4" y="629" width="0.9" height="15.0" fill="rgb(224,27,33)" rx="2" ry="2" />
<text  x="1127.36" y="639.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="312.6" y="773" width="0.2" height="15.0" fill="rgb(238,71,9)" rx="2" ry="2" />
<text  x="315.64" y="783.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="368.3" y="709" width="0.1" height="15.0" fill="rgb(254,18,34)" rx="2" ry="2" />
<text  x="371.25" y="719.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="1015.2" y="629" width="0.2" height="15.0" fill="rgb(250,223,46)" rx="2" ry="2" />
<text  x="1018.24" y="639.5" ></text>
</g>
<g >
<title>__set_page_dirty (1 samples, 0.01%)</title><rect x="13.7" y="741" width="0.2" height="15.0" fill="rgb(215,205,46)" rx="2" ry="2" />
<text  x="16.72" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (5 samples, 0.07%)</title><rect x="1161.2" y="629" width="0.8" height="15.0" fill="rgb(237,27,52)" rx="2" ry="2" />
<text  x="1164.22" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_bytes@plt (1 samples, 0.01%)</title><rect x="789.2" y="629" width="0.2" height="15.0" fill="rgb(210,223,38)" rx="2" ry="2" />
<text  x="792.23" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="994.2" y="805" width="0.2" height="15.0" fill="rgb(205,77,30)" rx="2" ry="2" />
<text  x="997.22" y="815.5" ></text>
</g>
<g >
<title>tcp_rcv_established (95 samples, 1.30%)</title><rect x="906.3" y="421" width="15.3" height="15.0" fill="rgb(211,144,43)" rx="2" ry="2" />
<text  x="909.28" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt; &gt; &gt;::empty (2 samples, 0.03%)</title><rect x="95.4" y="549" width="0.3" height="15.0" fill="rgb(240,212,37)" rx="2" ry="2" />
<text  x="98.36" y="559.5" ></text>
</g>
<g >
<title>__alloc_skb (10 samples, 0.14%)</title><rect x="550.4" y="773" width="1.7" height="15.0" fill="rgb(221,116,53)" rx="2" ry="2" />
<text  x="553.45" y="783.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="1159.1" y="709" width="0.2" height="15.0" fill="rgb(219,2,44)" rx="2" ry="2" />
<text  x="1162.12" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1141.5" y="677" width="0.2" height="15.0" fill="rgb(242,22,8)" rx="2" ry="2" />
<text  x="1144.50" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="351.0" y="533" width="0.1" height="15.0" fill="rgb(227,163,43)" rx="2" ry="2" />
<text  x="353.95" y="543.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="28.9" y="853" width="0.2" height="15.0" fill="rgb(249,67,13)" rx="2" ry="2" />
<text  x="31.91" y="863.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="948.3" y="949" width="0.2" height="15.0" fill="rgb(243,162,33)" rx="2" ry="2" />
<text  x="951.31" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="128.0" y="773" width="0.2" height="15.0" fill="rgb(232,108,54)" rx="2" ry="2" />
<text  x="131.02" y="783.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (1 samples, 0.01%)</title><rect x="673.8" y="629" width="0.2" height="15.0" fill="rgb(249,156,10)" rx="2" ry="2" />
<text  x="676.80" y="639.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="489.8" y="677" width="0.2" height="15.0" fill="rgb(212,124,33)" rx="2" ry="2" />
<text  x="492.82" y="687.5" ></text>
</g>
<g >
<title>redisReaderGetReply (3 samples, 0.04%)</title><rect x="958.2" y="981" width="0.5" height="15.0" fill="rgb(245,208,33)" rx="2" ry="2" />
<text  x="961.17" y="991.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry@plt (1 samples, 0.01%)</title><rect x="270.4" y="965" width="0.2" height="15.0" fill="rgb(227,105,54)" rx="2" ry="2" />
<text  x="273.44" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="1155.7" y="709" width="0.2" height="15.0" fill="rgb(217,97,2)" rx="2" ry="2" />
<text  x="1158.73" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="133.7" y="789" width="0.1" height="15.0" fill="rgb(254,82,31)" rx="2" ry="2" />
<text  x="136.67" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.03%)</title><rect x="1128.1" y="645" width="0.3" height="15.0" fill="rgb(232,181,27)" rx="2" ry="2" />
<text  x="1131.08" y="655.5" ></text>
</g>
<g >
<title>netdev_pick_tx (1 samples, 0.01%)</title><rect x="925.8" y="613" width="0.2" height="15.0" fill="rgb(213,180,23)" rx="2" ry="2" />
<text  x="928.84" y="623.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.01%)</title><rect x="82.6" y="373" width="0.1" height="15.0" fill="rgb(221,227,7)" rx="2" ry="2" />
<text  x="85.59" y="383.5" ></text>
</g>
<g >
<title>tcp_current_mss (5 samples, 0.07%)</title><rect x="583.3" y="773" width="0.8" height="15.0" fill="rgb(230,122,30)" rx="2" ry="2" />
<text  x="586.27" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="336.9" y="645" width="0.2" height="15.0" fill="rgb(242,63,51)" rx="2" ry="2" />
<text  x="339.89" y="655.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="35.2" y="949" width="0.2" height="15.0" fill="rgb(211,144,33)" rx="2" ry="2" />
<text  x="38.22" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="1149.7" y="677" width="0.2" height="15.0" fill="rgb(233,97,41)" rx="2" ry="2" />
<text  x="1152.75" y="687.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp&gt; (2 samples, 0.03%)</title><rect x="109.9" y="629" width="0.3" height="15.0" fill="rgb(217,96,43)" rx="2" ry="2" />
<text  x="112.91" y="639.5" ></text>
</g>
<g >
<title>sock_rfree (2 samples, 0.03%)</title><rect x="847.4" y="789" width="0.4" height="15.0" fill="rgb(220,122,18)" rx="2" ry="2" />
<text  x="850.43" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3 samples, 0.04%)</title><rect x="101.2" y="549" width="0.5" height="15.0" fill="rgb(216,76,16)" rx="2" ry="2" />
<text  x="104.18" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="617.1" y="949" width="0.3" height="15.0" fill="rgb(206,103,5)" rx="2" ry="2" />
<text  x="620.06" y="959.5" ></text>
</g>
<g >
<title>rb_erase (1 samples, 0.01%)</title><rect x="563.2" y="389" width="0.2" height="15.0" fill="rgb(246,89,49)" rx="2" ry="2" />
<text  x="566.22" y="399.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (2 samples, 0.03%)</title><rect x="1162.4" y="693" width="0.3" height="15.0" fill="rgb(222,90,47)" rx="2" ry="2" />
<text  x="1165.36" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="990.8" y="965" width="0.2" height="15.0" fill="rgb(235,215,0)" rx="2" ry="2" />
<text  x="993.83" y="975.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 0.67%)</title><rect x="14.8" y="981" width="8.0" height="15.0" fill="rgb(214,63,39)" rx="2" ry="2" />
<text  x="17.85" y="991.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1186.8" y="597" width="0.5" height="15.0" fill="rgb(252,8,25)" rx="2" ry="2" />
<text  x="1189.77" y="607.5" ></text>
</g>
<g >
<title>main (19 samples, 0.26%)</title><rect x="1186.6" y="965" width="3.1" height="15.0" fill="rgb(247,103,5)" rx="2" ry="2" />
<text  x="1189.61" y="975.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.03%)</title><rect x="795.2" y="629" width="0.3" height="15.0" fill="rgb(224,178,33)" rx="2" ry="2" />
<text  x="798.21" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::__uniq_ptr_impl (4 samples, 0.05%)</title><rect x="783.4" y="677" width="0.7" height="15.0" fill="rgb(230,221,45)" rx="2" ry="2" />
<text  x="786.41" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="1122.9" y="661" width="1.0" height="15.0" fill="rgb(244,145,24)" rx="2" ry="2" />
<text  x="1125.91" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (1 samples, 0.01%)</title><rect x="1183.2" y="725" width="0.2" height="15.0" fill="rgb(230,202,44)" rx="2" ry="2" />
<text  x="1186.21" y="735.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="1119.7" y="565" width="0.1" height="15.0" fill="rgb(210,198,47)" rx="2" ry="2" />
<text  x="1122.68" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1013.6" y="597" width="0.2" height="15.0" fill="rgb(230,205,20)" rx="2" ry="2" />
<text  x="1016.62" y="607.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="907.1" y="341" width="0.1" height="15.0" fill="rgb(206,83,25)" rx="2" ry="2" />
<text  x="910.08" y="351.5" ></text>
</g>
<g >
<title>sock_write_iter (2 samples, 0.03%)</title><rect x="929.2" y="885" width="0.4" height="15.0" fill="rgb(219,30,3)" rx="2" ry="2" />
<text  x="932.23" y="895.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="789.9" y="645" width="0.1" height="15.0" fill="rgb(207,50,42)" rx="2" ry="2" />
<text  x="792.88" y="655.5" ></text>
</g>
<g >
<title>getname_flags (21 samples, 0.29%)</title><rect x="830.9" y="613" width="3.4" height="15.0" fill="rgb(245,3,37)" rx="2" ry="2" />
<text  x="833.94" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (2 samples, 0.03%)</title><rect x="103.9" y="485" width="0.4" height="15.0" fill="rgb(226,75,35)" rx="2" ry="2" />
<text  x="106.93" y="495.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="664.7" y="677" width="0.2" height="15.0" fill="rgb(252,223,18)" rx="2" ry="2" />
<text  x="667.75" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (2 samples, 0.03%)</title><rect x="657.1" y="677" width="0.4" height="15.0" fill="rgb(249,214,23)" rx="2" ry="2" />
<text  x="660.15" y="687.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setContext (1 samples, 0.01%)</title><rect x="385.6" y="581" width="0.1" height="15.0" fill="rgb(209,211,52)" rx="2" ry="2" />
<text  x="388.55" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="652.5" y="949" width="0.1" height="15.0" fill="rgb(212,38,37)" rx="2" ry="2" />
<text  x="655.46" y="959.5" ></text>
</g>
<g >
<title>tcp_send_mss (3 samples, 0.04%)</title><rect x="484.2" y="485" width="0.5" height="15.0" fill="rgb(239,79,46)" rx="2" ry="2" />
<text  x="487.17" y="495.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (458 samples, 6.27%)</title><rect x="405.9" y="341" width="74.1" height="15.0" fill="rgb(208,24,46)" rx="2" ry="2" />
<text  x="408.92" y="351.5" >__local_..</text>
</g>
<g >
<title>sdsMakeRoomFor (1 samples, 0.01%)</title><rect x="990.8" y="997" width="0.2" height="15.0" fill="rgb(249,212,15)" rx="2" ry="2" />
<text  x="993.83" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.01%)</title><rect x="1188.2" y="565" width="0.2" height="15.0" fill="rgb(218,187,16)" rx="2" ry="2" />
<text  x="1191.22" y="575.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::writableBytes (1 samples, 0.01%)</title><rect x="677.0" y="645" width="0.2" height="15.0" fill="rgb(213,188,46)" rx="2" ry="2" />
<text  x="680.03" y="655.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.05%)</title><rect x="32.0" y="965" width="0.6" height="15.0" fill="rgb(205,6,23)" rx="2" ry="2" />
<text  x="34.99" y="975.5" ></text>
</g>
<g >
<title>inet_release (1 samples, 0.01%)</title><rect x="658.8" y="405" width="0.1" height="15.0" fill="rgb(232,44,36)" rx="2" ry="2" />
<text  x="661.77" y="415.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="803.6" y="645" width="0.2" height="15.0" fill="rgb(226,68,28)" rx="2" ry="2" />
<text  x="806.62" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;unsigned long&gt; (5 samples, 0.07%)</title><rect x="286.0" y="997" width="0.8" height="15.0" fill="rgb(248,45,41)" rx="2" ry="2" />
<text  x="288.96" y="1007.5" ></text>
</g>
<g >
<title>sys_newstat (67 samples, 0.92%)</title><rect x="1166.7" y="677" width="10.9" height="15.0" fill="rgb(215,109,12)" rx="2" ry="2" />
<text  x="1169.72" y="687.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (13 samples, 0.18%)</title><rect x="480.0" y="325" width="2.1" height="15.0" fill="rgb(230,96,36)" rx="2" ry="2" />
<text  x="482.96" y="335.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.04%)</title><rect x="283.2" y="997" width="0.5" height="15.0" fill="rgb(215,212,50)" rx="2" ry="2" />
<text  x="286.22" y="1007.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (4 samples, 0.05%)</title><rect x="260.9" y="949" width="0.7" height="15.0" fill="rgb(216,124,20)" rx="2" ry="2" />
<text  x="263.91" y="959.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="90.2" y="549" width="0.1" height="15.0" fill="rgb(234,153,10)" rx="2" ry="2" />
<text  x="93.19" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_comp_iter&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1000.5" y="661" width="0.2" height="15.0" fill="rgb(237,190,51)" rx="2" ry="2" />
<text  x="1003.53" y="671.5" ></text>
</g>
<g >
<title>sock_recvmsg (136 samples, 1.86%)</title><rect x="510.0" y="869" width="22.0" height="15.0" fill="rgb(208,52,22)" rx="2" ry="2" />
<text  x="513.03" y="879.5" >s..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="35.2" y="965" width="0.2" height="15.0" fill="rgb(248,207,50)" rx="2" ry="2" />
<text  x="38.22" y="975.5" ></text>
</g>
<g >
<title>muduo::StringPiece::size (1 samples, 0.01%)</title><rect x="676.4" y="677" width="0.1" height="15.0" fill="rgb(238,8,10)" rx="2" ry="2" />
<text  x="679.39" y="687.5" ></text>
</g>
<g >
<title>std::move&lt;std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="109.7" y="613" width="0.2" height="15.0" fill="rgb(220,89,11)" rx="2" ry="2" />
<text  x="112.75" y="623.5" ></text>
</g>
<g >
<title>sock_def_readable (57 samples, 0.78%)</title><rect x="911.6" y="389" width="9.2" height="15.0" fill="rgb(217,53,13)" rx="2" ry="2" />
<text  x="914.61" y="399.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (1 samples, 0.01%)</title><rect x="14.5" y="821" width="0.2" height="15.0" fill="rgb(234,54,13)" rx="2" ry="2" />
<text  x="17.53" y="831.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (4 samples, 0.05%)</title><rect x="906.8" y="389" width="0.6" height="15.0" fill="rgb(247,228,16)" rx="2" ry="2" />
<text  x="909.76" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str@plt (1 samples, 0.01%)</title><rect x="319.1" y="789" width="0.2" height="15.0" fill="rgb(211,179,51)" rx="2" ry="2" />
<text  x="322.11" y="799.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::TcpConnection*, std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="112.8" y="741" width="0.2" height="15.0" fill="rgb(210,132,24)" rx="2" ry="2" />
<text  x="115.82" y="751.5" ></text>
</g>
<g >
<title>ThreadPool2 (2,114 samples, 28.96%)</title><rect x="844.2" y="1013" width="341.8" height="15.0" fill="rgb(237,222,26)" rx="2" ry="2" />
<text  x="847.20" y="1023.5" >ThreadPool2</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="112.2" y="645" width="0.1" height="15.0" fill="rgb(238,198,46)" rx="2" ry="2" />
<text  x="115.17" y="655.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="1167.7" y="581" width="0.2" height="15.0" fill="rgb(236,25,43)" rx="2" ry="2" />
<text  x="1170.69" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1157.2" y="661" width="0.1" height="15.0" fill="rgb(209,67,20)" rx="2" ry="2" />
<text  x="1160.18" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (8 samples, 0.11%)</title><rect x="788.3" y="661" width="1.3" height="15.0" fill="rgb(228,16,6)" rx="2" ry="2" />
<text  x="791.26" y="671.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (445 samples, 6.10%)</title><rect x="407.5" y="229" width="72.0" height="15.0" fill="rgb(236,23,3)" rx="2" ry="2" />
<text  x="410.54" y="239.5" >__netif_..</text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.01%)</title><rect x="331.6" y="453" width="0.1" height="15.0" fill="rgb(216,162,10)" rx="2" ry="2" />
<text  x="334.55" y="463.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.01%)</title><rect x="91.8" y="469" width="0.2" height="15.0" fill="rgb(245,15,32)" rx="2" ry="2" />
<text  x="94.80" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="612.5" y="933" width="0.5" height="15.0" fill="rgb(253,225,6)" rx="2" ry="2" />
<text  x="615.53" y="943.5" ></text>
</g>
<g >
<title>kmalloc_slab (1 samples, 0.01%)</title><rect x="551.3" y="741" width="0.1" height="15.0" fill="rgb(247,203,38)" rx="2" ry="2" />
<text  x="554.26" y="751.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="291.3" y="725" width="0.5" height="15.0" fill="rgb(243,165,27)" rx="2" ry="2" />
<text  x="294.30" y="735.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="850.3" y="773" width="0.2" height="15.0" fill="rgb(215,88,2)" rx="2" ry="2" />
<text  x="853.34" y="783.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="669.4" y="693" width="0.2" height="15.0" fill="rgb(213,65,8)" rx="2" ry="2" />
<text  x="672.44" y="703.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="1001.7" y="565" width="0.1" height="15.0" fill="rgb(242,143,17)" rx="2" ry="2" />
<text  x="1004.66" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.08%)</title><rect x="953.3" y="965" width="1.0" height="15.0" fill="rgb(213,2,31)" rx="2" ry="2" />
<text  x="956.32" y="975.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.01%)</title><rect x="608.2" y="981" width="0.1" height="15.0" fill="rgb(214,120,8)" rx="2" ry="2" />
<text  x="611.16" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.03%)</title><rect x="247.0" y="597" width="0.3" height="15.0" fill="rgb(236,10,39)" rx="2" ry="2" />
<text  x="250.00" y="607.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="671.5" y="629" width="0.2" height="15.0" fill="rgb(233,39,42)" rx="2" ry="2" />
<text  x="674.54" y="639.5" ></text>
</g>
<g >
<title>vfs_statx (61 samples, 0.84%)</title><rect x="1167.7" y="645" width="9.9" height="15.0" fill="rgb(223,8,38)" rx="2" ry="2" />
<text  x="1170.69" y="655.5" ></text>
</g>
<g >
<title>new_sync_read (139 samples, 1.90%)</title><rect x="509.5" y="901" width="22.5" height="15.0" fill="rgb(228,82,13)" rx="2" ry="2" />
<text  x="512.55" y="911.5" >n..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8 samples, 0.11%)</title><rect x="246.2" y="677" width="1.3" height="15.0" fill="rgb(208,56,23)" rx="2" ry="2" />
<text  x="249.19" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="488.0" y="693" width="0.2" height="15.0" fill="rgb(250,143,43)" rx="2" ry="2" />
<text  x="491.05" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.01%)</title><rect x="30.5" y="949" width="0.2" height="15.0" fill="rgb(213,225,37)" rx="2" ry="2" />
<text  x="33.53" y="959.5" ></text>
</g>
<g >
<title>net_rx_action (451 samples, 6.18%)</title><rect x="406.9" y="277" width="72.9" height="15.0" fill="rgb(242,97,27)" rx="2" ry="2" />
<text  x="409.89" y="287.5" >net_rx_a..</text>
</g>
<g >
<title>tcp_poll (4 samples, 0.05%)</title><rect x="43.0" y="677" width="0.6" height="15.0" fill="rgb(207,149,38)" rx="2" ry="2" />
<text  x="45.98" y="687.5" ></text>
</g>
<g >
<title>tcp_push (1 samples, 0.01%)</title><rect x="549.0" y="805" width="0.2" height="15.0" fill="rgb(237,78,11)" rx="2" ry="2" />
<text  x="551.99" y="815.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="495.2" y="741" width="0.3" height="15.0" fill="rgb(223,78,18)" rx="2" ry="2" />
<text  x="498.16" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (3 samples, 0.04%)</title><rect x="802.2" y="661" width="0.4" height="15.0" fill="rgb(228,117,14)" rx="2" ry="2" />
<text  x="805.16" y="671.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="333.3" y="469" width="0.2" height="15.0" fill="rgb(237,47,48)" rx="2" ry="2" />
<text  x="336.33" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1022.8" y="565" width="0.2" height="15.0" fill="rgb(218,60,36)" rx="2" ry="2" />
<text  x="1025.84" y="575.5" ></text>
</g>
<g >
<title>__vfs_write (555 samples, 7.60%)</title><rect x="396.1" y="597" width="89.7" height="15.0" fill="rgb(250,206,6)" rx="2" ry="2" />
<text  x="399.06" y="607.5" >__vfs_write</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="309.9" y="805" width="0.2" height="15.0" fill="rgb(217,161,0)" rx="2" ry="2" />
<text  x="312.89" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string@plt (1 samples, 0.01%)</title><rect x="1180.5" y="725" width="0.1" height="15.0" fill="rgb(206,4,16)" rx="2" ry="2" />
<text  x="1183.46" y="735.5" ></text>
</g>
<g >
<title>tcp_init_cwnd (1 samples, 0.01%)</title><rect x="156.6" y="453" width="0.2" height="15.0" fill="rgb(220,114,21)" rx="2" ry="2" />
<text  x="159.63" y="463.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="658.8" y="501" width="0.1" height="15.0" fill="rgb(245,205,51)" rx="2" ry="2" />
<text  x="661.77" y="511.5" ></text>
</g>
<g >
<title>StaticServer::onMessage (100 samples, 1.37%)</title><rect x="339.8" y="581" width="16.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="342.80" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="787.8" y="565" width="0.1" height="15.0" fill="rgb(214,164,49)" rx="2" ry="2" />
<text  x="790.78" y="575.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1152.7" y="645" width="0.1" height="15.0" fill="rgb(221,15,21)" rx="2" ry="2" />
<text  x="1155.66" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,174 samples, 16.08%)</title><rect x="652.9" y="901" width="189.8" height="15.0" fill="rgb(238,223,17)" rx="2" ry="2" />
<text  x="655.95" y="911.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="818.3" y="677" width="0.2" height="15.0" fill="rgb(243,205,50)" rx="2" ry="2" />
<text  x="821.33" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="1131.0" y="693" width="0.2" height="15.0" fill="rgb(239,55,50)" rx="2" ry="2" />
<text  x="1133.99" y="703.5" ></text>
</g>
<g >
<title>muduo::net::Channel::update (1 samples, 0.01%)</title><rect x="88.1" y="485" width="0.1" height="15.0" fill="rgb(244,161,18)" rx="2" ry="2" />
<text  x="91.08" y="495.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="342.9" y="453" width="0.3" height="15.0" fill="rgb(207,89,5)" rx="2" ry="2" />
<text  x="345.87" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.01%)</title><rect x="1153.5" y="709" width="0.1" height="15.0" fill="rgb(240,153,18)" rx="2" ry="2" />
<text  x="1156.46" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="792.9" y="565" width="0.2" height="15.0" fill="rgb(206,186,28)" rx="2" ry="2" />
<text  x="795.95" y="575.5" ></text>
</g>
<g >
<title>read_int (2 samples, 0.03%)</title><rect x="273.2" y="965" width="0.3" height="15.0" fill="rgb(206,58,6)" rx="2" ry="2" />
<text  x="276.19" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="96.3" y="517" width="0.2" height="15.0" fill="rgb(227,193,13)" rx="2" ry="2" />
<text  x="99.33" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="815.1" y="645" width="0.2" height="15.0" fill="rgb(239,135,42)" rx="2" ry="2" />
<text  x="818.10" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="680.8" y="629" width="0.1" height="15.0" fill="rgb(233,25,25)" rx="2" ry="2" />
<text  x="683.75" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1151.5" y="597" width="0.2" height="15.0" fill="rgb(229,28,16)" rx="2" ry="2" />
<text  x="1154.52" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (8 samples, 0.11%)</title><rect x="490.1" y="613" width="1.3" height="15.0" fill="rgb(241,188,52)" rx="2" ry="2" />
<text  x="493.15" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="663.9" y="645" width="0.2" height="15.0" fill="rgb(240,178,45)" rx="2" ry="2" />
<text  x="666.94" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="985.7" y="965" width="0.1" height="15.0" fill="rgb(211,218,48)" rx="2" ry="2" />
<text  x="988.65" y="975.5" ></text>
</g>
<g >
<title>ip_copy_addrs (1 samples, 0.01%)</title><rect x="554.2" y="725" width="0.1" height="15.0" fill="rgb(219,3,45)" rx="2" ry="2" />
<text  x="557.17" y="735.5" ></text>
</g>
<g >
<title>[libhiredis.so.0.13] (1 samples, 0.01%)</title><rect x="886.4" y="981" width="0.2" height="15.0" fill="rgb(249,57,22)" rx="2" ry="2" />
<text  x="889.39" y="991.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7 samples, 0.10%)</title><rect x="1186.8" y="789" width="1.1" height="15.0" fill="rgb(212,89,34)" rx="2" ry="2" />
<text  x="1189.77" y="799.5" ></text>
</g>
<g >
<title>finish_task_switch (132 samples, 1.81%)</title><rect x="851.0" y="741" width="21.3" height="15.0" fill="rgb(224,86,41)" rx="2" ry="2" />
<text  x="853.99" y="751.5" >f..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="245.5" y="789" width="0.2" height="15.0" fill="rgb(234,213,0)" rx="2" ry="2" />
<text  x="248.55" y="799.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (22 samples, 0.30%)</title><rect x="1013.9" y="693" width="3.6" height="15.0" fill="rgb(208,104,40)" rx="2" ry="2" />
<text  x="1016.95" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::current (1 samples, 0.01%)</title><rect x="1188.9" y="741" width="0.1" height="15.0" fill="rgb(242,30,41)" rx="2" ry="2" />
<text  x="1191.87" y="751.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.01%)</title><rect x="404.1" y="405" width="0.2" height="15.0" fill="rgb(217,219,0)" rx="2" ry="2" />
<text  x="407.14" y="415.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setWriteCompleteCallback (1 samples, 0.01%)</title><rect x="108.1" y="581" width="0.2" height="15.0" fill="rgb(213,139,13)" rx="2" ry="2" />
<text  x="111.13" y="591.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.01%)</title><rect x="1139.2" y="565" width="0.2" height="15.0" fill="rgb(225,114,33)" rx="2" ry="2" />
<text  x="1142.24" y="575.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="110.2" y="501" width="0.2" height="15.0" fill="rgb(205,212,13)" rx="2" ry="2" />
<text  x="113.23" y="511.5" ></text>
</g>
<g >
<title>std::forward&lt;std::_Placeholder&lt;1&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="345.9" y="517" width="0.2" height="15.0" fill="rgb(253,20,14)" rx="2" ry="2" />
<text  x="348.94" y="527.5" ></text>
</g>
<g >
<title>boost::any::empty (1 samples, 0.01%)</title><rect x="339.8" y="565" width="0.2" height="15.0" fill="rgb(218,31,16)" rx="2" ry="2" />
<text  x="342.80" y="575.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1152.3" y="677" width="0.2" height="15.0" fill="rgb(226,178,29)" rx="2" ry="2" />
<text  x="1155.33" y="687.5" ></text>
</g>
<g >
<title>muduo::CurrentThread::tid (1 samples, 0.01%)</title><rect x="341.9" y="501" width="0.2" height="15.0" fill="rgb(248,154,23)" rx="2" ry="2" />
<text  x="344.90" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1188.1" y="773" width="0.1" height="15.0" fill="rgb(212,191,20)" rx="2" ry="2" />
<text  x="1191.06" y="783.5" ></text>
</g>
<g >
<title>sdscatlen (3 samples, 0.04%)</title><rect x="991.0" y="997" width="0.5" height="15.0" fill="rgb(206,147,47)" rx="2" ry="2" />
<text  x="993.99" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="836.8" y="693" width="0.3" height="15.0" fill="rgb(216,192,17)" rx="2" ry="2" />
<text  x="839.76" y="703.5" ></text>
</g>
<g >
<title>ccx::Redis::exeGET[abi:cxx11] (23 samples, 0.32%)</title><rect x="664.1" y="693" width="3.7" height="15.0" fill="rgb(215,126,37)" rx="2" ry="2" />
<text  x="667.10" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="498.6" y="725" width="0.1" height="15.0" fill="rgb(213,225,24)" rx="2" ry="2" />
<text  x="501.55" y="735.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (11 samples, 0.15%)</title><rect x="489.8" y="709" width="1.8" height="15.0" fill="rgb(225,217,47)" rx="2" ry="2" />
<text  x="492.82" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1133.7" y="645" width="0.2" height="15.0" fill="rgb(248,134,29)" rx="2" ry="2" />
<text  x="1136.74" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="361.0" y="805" width="0.1" height="15.0" fill="rgb(223,29,52)" rx="2" ry="2" />
<text  x="363.98" y="815.5" ></text>
</g>
<g >
<title>muduo::net::sockets::toIp (1 samples, 0.01%)</title><rect x="1189.8" y="997" width="0.2" height="15.0" fill="rgb(228,197,43)" rx="2" ry="2" />
<text  x="1192.84" y="1007.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="239.6" y="437" width="0.3" height="15.0" fill="rgb(229,29,27)" rx="2" ry="2" />
<text  x="242.57" y="447.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="87.9" y="645" width="0.2" height="15.0" fill="rgb(218,22,24)" rx="2" ry="2" />
<text  x="90.92" y="655.5" ></text>
</g>
<g >
<title>__tcp_v4_send_check (1 samples, 0.01%)</title><rect x="926.6" y="709" width="0.2" height="15.0" fill="rgb(242,73,16)" rx="2" ry="2" />
<text  x="929.65" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="385.7" y="533" width="0.2" height="15.0" fill="rgb(215,48,5)" rx="2" ry="2" />
<text  x="388.71" y="543.5" ></text>
</g>
<g >
<title>free (3 samples, 0.04%)</title><rect x="668.0" y="693" width="0.5" height="15.0" fill="rgb(224,58,1)" rx="2" ry="2" />
<text  x="670.98" y="703.5" ></text>
</g>
<g >
<title>tcp_ack (1 samples, 0.01%)</title><rect x="82.6" y="85" width="0.1" height="15.0" fill="rgb(243,94,12)" rx="2" ry="2" />
<text  x="85.59" y="95.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="132.5" y="709" width="0.2" height="15.0" fill="rgb(237,137,33)" rx="2" ry="2" />
<text  x="135.54" y="719.5" ></text>
</g>
<g >
<title>netif_rx_internal (4 samples, 0.05%)</title><rect x="480.9" y="261" width="0.7" height="15.0" fill="rgb(205,99,14)" rx="2" ry="2" />
<text  x="483.93" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::_Iter_equals_val (1 samples, 0.01%)</title><rect x="813.2" y="693" width="0.1" height="15.0" fill="rgb(251,128,28)" rx="2" ry="2" />
<text  x="816.16" y="703.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="324.1" y="565" width="0.2" height="15.0" fill="rgb(222,63,5)" rx="2" ry="2" />
<text  x="327.12" y="575.5" ></text>
</g>
<g >
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="907.1" y="373" width="0.3" height="15.0" fill="rgb(250,154,14)" rx="2" ry="2" />
<text  x="910.08" y="383.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.01%)</title><rect x="155.0" y="437" width="0.2" height="15.0" fill="rgb(254,127,31)" rx="2" ry="2" />
<text  x="158.01" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="954.5" y="965" width="0.1" height="15.0" fill="rgb(233,149,11)" rx="2" ry="2" />
<text  x="957.45" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (28 samples, 0.38%)</title><rect x="1136.3" y="677" width="4.6" height="15.0" fill="rgb(240,162,32)" rx="2" ry="2" />
<text  x="1139.33" y="687.5" ></text>
</g>
<g >
<title>__GI___mempcpy (1 samples, 0.01%)</title><rect x="961.6" y="997" width="0.1" height="15.0" fill="rgb(245,13,21)" rx="2" ry="2" />
<text  x="964.57" y="1007.5" ></text>
</g>
<g >
<title>muduo::net::sockets::write (2 samples, 0.03%)</title><rect x="1118.4" y="645" width="0.3" height="15.0" fill="rgb(207,57,18)" rx="2" ry="2" />
<text  x="1121.38" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="105.1" y="485" width="0.3" height="15.0" fill="rgb(230,154,6)" rx="2" ry="2" />
<text  x="108.06" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1113.9" y="517" width="0.1" height="15.0" fill="rgb(232,184,6)" rx="2" ry="2" />
<text  x="1116.86" y="527.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="831.1" y="597" width="0.2" height="15.0" fill="rgb(249,177,12)" rx="2" ry="2" />
<text  x="834.10" y="607.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (126 samples, 1.73%)</title><rect x="556.4" y="597" width="20.4" height="15.0" fill="rgb(243,212,14)" rx="2" ry="2" />
<text  x="559.43" y="607.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (1 samples, 0.01%)</title><rect x="769.3" y="661" width="0.2" height="15.0" fill="rgb(232,111,46)" rx="2" ry="2" />
<text  x="772.35" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="949.4" y="933" width="0.2" height="15.0" fill="rgb(236,48,43)" rx="2" ry="2" />
<text  x="952.44" y="943.5" ></text>
</g>
<g >
<title>tcp_v4_fill_cb (1 samples, 0.01%)</title><rect x="576.0" y="437" width="0.2" height="15.0" fill="rgb(220,72,28)" rx="2" ry="2" />
<text  x="578.99" y="447.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="74.2" y="677" width="0.1" height="15.0" fill="rgb(212,147,3)" rx="2" ry="2" />
<text  x="77.18" y="687.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="160.5" y="277" width="0.3" height="15.0" fill="rgb(206,98,53)" rx="2" ry="2" />
<text  x="163.51" y="287.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="151.3" y="453" width="0.2" height="15.0" fill="rgb(217,170,40)" rx="2" ry="2" />
<text  x="154.30" y="463.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (456 samples, 6.25%)</title><rect x="406.2" y="309" width="73.8" height="15.0" fill="rgb(213,28,37)" rx="2" ry="2" />
<text  x="409.24" y="319.5" >do_softi..</text>
</g>
<g >
<title>std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="1186.8" y="741" width="1.1" height="15.0" fill="rgb(219,37,37)" rx="2" ry="2" />
<text  x="1189.77" y="751.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="330.3" y="341" width="0.1" height="15.0" fill="rgb(250,102,25)" rx="2" ry="2" />
<text  x="333.26" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="244.6" y="741" width="0.3" height="15.0" fill="rgb(214,11,20)" rx="2" ry="2" />
<text  x="247.58" y="751.5" ></text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 0.01%)</title><rect x="929.1" y="837" width="0.1" height="15.0" fill="rgb(239,155,6)" rx="2" ry="2" />
<text  x="932.07" y="847.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="678.7" y="629" width="0.1" height="15.0" fill="rgb(245,168,15)" rx="2" ry="2" />
<text  x="681.65" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (3 samples, 0.04%)</title><rect x="352.9" y="485" width="0.5" height="15.0" fill="rgb(217,76,5)" rx="2" ry="2" />
<text  x="355.89" y="495.5" ></text>
</g>
<g >
<title>tcp_ack (22 samples, 0.30%)</title><rect x="907.9" y="405" width="3.5" height="15.0" fill="rgb(246,216,29)" rx="2" ry="2" />
<text  x="910.89" y="415.5" ></text>
</g>
<g >
<title>muduo::Timestamp::microSecondsSinceEpoch (1 samples, 0.01%)</title><rect x="124.1" y="773" width="0.2" height="15.0" fill="rgb(211,51,42)" rx="2" ry="2" />
<text  x="127.14" y="783.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (3 samples, 0.04%)</title><rect x="296.0" y="709" width="0.5" height="15.0" fill="rgb(239,134,50)" rx="2" ry="2" />
<text  x="298.99" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;muduo::net::Channel**, std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="310.2" y="821" width="0.3" height="15.0" fill="rgb(243,123,18)" rx="2" ry="2" />
<text  x="313.21" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char&gt; (2 samples, 0.03%)</title><rect x="1127.6" y="645" width="0.3" height="15.0" fill="rgb(210,29,17)" rx="2" ry="2" />
<text  x="1130.60" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="780.3" y="581" width="0.2" height="15.0" fill="rgb(225,161,34)" rx="2" ry="2" />
<text  x="783.34" y="591.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="994.7" y="757" width="0.2" height="15.0" fill="rgb(221,140,21)" rx="2" ry="2" />
<text  x="997.71" y="767.5" ></text>
</g>
<g >
<title>free (3 samples, 0.04%)</title><rect x="1124.5" y="613" width="0.5" height="15.0" fill="rgb(209,56,27)" rx="2" ry="2" />
<text  x="1127.53" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="500.5" y="757" width="0.2" height="15.0" fill="rgb(223,158,36)" rx="2" ry="2" />
<text  x="503.49" y="767.5" ></text>
</g>
<g >
<title>wait_woken (96 samples, 1.32%)</title><rect x="513.9" y="805" width="15.5" height="15.0" fill="rgb(244,72,18)" rx="2" ry="2" />
<text  x="516.91" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="780.8" y="677" width="0.2" height="15.0" fill="rgb(243,209,1)" rx="2" ry="2" />
<text  x="783.82" y="687.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="106.4" y="453" width="0.1" height="15.0" fill="rgb(239,79,24)" rx="2" ry="2" />
<text  x="109.35" y="463.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="1013.6" y="549" width="0.2" height="15.0" fill="rgb(225,79,15)" rx="2" ry="2" />
<text  x="1016.62" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="667.7" y="677" width="0.1" height="15.0" fill="rgb(247,212,38)" rx="2" ry="2" />
<text  x="670.66" y="687.5" ></text>
</g>
<g >
<title>kmem_cache_free (2 samples, 0.03%)</title><rect x="563.5" y="341" width="0.4" height="15.0" fill="rgb(206,200,54)" rx="2" ry="2" />
<text  x="566.54" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.01%)</title><rect x="1139.1" y="581" width="0.1" height="15.0" fill="rgb(208,153,37)" rx="2" ry="2" />
<text  x="1142.08" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="792.9" y="581" width="0.2" height="15.0" fill="rgb(214,50,40)" rx="2" ry="2" />
<text  x="795.95" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="347.7" y="469" width="0.2" height="15.0" fill="rgb(227,68,18)" rx="2" ry="2" />
<text  x="350.72" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="783.2" y="677" width="0.2" height="15.0" fill="rgb(223,102,34)" rx="2" ry="2" />
<text  x="786.25" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (44 samples, 0.60%)</title><rect x="388.1" y="629" width="7.2" height="15.0" fill="rgb(229,44,24)" rx="2" ry="2" />
<text  x="391.14" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="340.6" y="501" width="0.3" height="15.0" fill="rgb(242,28,6)" rx="2" ry="2" />
<text  x="343.61" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_M_head (1 samples, 0.01%)</title><rect x="348.2" y="469" width="0.2" height="15.0" fill="rgb(235,38,41)" rx="2" ry="2" />
<text  x="351.21" y="479.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::erase (1 samples, 0.01%)</title><rect x="385.1" y="645" width="0.1" height="15.0" fill="rgb(215,42,41)" rx="2" ry="2" />
<text  x="388.07" y="655.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (541 samples, 7.41%)</title><rect x="397.4" y="501" width="87.4" height="15.0" fill="rgb(245,142,39)" rx="2" ry="2" />
<text  x="400.35" y="511.5" >tcp_sendms..</text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="992.0" y="693" width="0.1" height="15.0" fill="rgb(239,162,22)" rx="2" ry="2" />
<text  x="994.96" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;, void&gt; (2 samples, 0.03%)</title><rect x="97.8" y="517" width="0.3" height="15.0" fill="rgb(244,143,51)" rx="2" ry="2" />
<text  x="100.78" y="527.5" ></text>
</g>
<g >
<title>tcp_current_mss (2 samples, 0.03%)</title><rect x="484.3" y="469" width="0.4" height="15.0" fill="rgb(216,202,40)" rx="2" ry="2" />
<text  x="487.33" y="479.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt.isra.41 (1 samples, 0.01%)</title><rect x="911.3" y="373" width="0.1" height="15.0" fill="rgb(227,215,29)" rx="2" ry="2" />
<text  x="914.29" y="383.5" ></text>
</g>
<g >
<title>new_sync_write (246 samples, 3.37%)</title><rect x="889.5" y="885" width="39.7" height="15.0" fill="rgb(234,188,1)" rx="2" ry="2" />
<text  x="892.46" y="895.5" >new..</text>
</g>
<g >
<title>__check_object_size (1 samples, 0.01%)</title><rect x="893.5" y="789" width="0.2" height="15.0" fill="rgb(250,85,6)" rx="2" ry="2" />
<text  x="896.50" y="799.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (1 samples, 0.01%)</title><rect x="1120.8" y="453" width="0.2" height="15.0" fill="rgb(218,181,45)" rx="2" ry="2" />
<text  x="1123.81" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (95 samples, 1.30%)</title><rect x="820.8" y="709" width="15.3" height="15.0" fill="rgb(238,83,10)" rx="2" ry="2" />
<text  x="823.75" y="719.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="362.8" y="757" width="0.3" height="15.0" fill="rgb(232,58,3)" rx="2" ry="2" />
<text  x="365.76" y="767.5" ></text>
</g>
<g >
<title>isspace (4 samples, 0.05%)</title><rect x="837.1" y="725" width="0.6" height="15.0" fill="rgb(240,194,13)" rx="2" ry="2" />
<text  x="840.08" y="735.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.01%)</title><rect x="110.2" y="517" width="0.2" height="15.0" fill="rgb(220,143,19)" rx="2" ry="2" />
<text  x="113.23" y="527.5" ></text>
</g>
<g >
<title>muduo::detail::convertHex (1 samples, 0.01%)</title><rect x="658.6" y="581" width="0.2" height="15.0" fill="rgb(253,3,53)" rx="2" ry="2" />
<text  x="661.60" y="591.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="328.8" y="581" width="0.3" height="15.0" fill="rgb(248,41,6)" rx="2" ry="2" />
<text  x="331.81" y="591.5" ></text>
</g>
<g >
<title>rw_verify_area (9 samples, 0.12%)</title><rect x="1115.6" y="549" width="1.5" height="15.0" fill="rgb(234,37,51)" rx="2" ry="2" />
<text  x="1118.63" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1 samples, 0.01%)</title><rect x="819.0" y="629" width="0.1" height="15.0" fill="rgb(226,170,8)" rx="2" ry="2" />
<text  x="821.98" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (1 samples, 0.01%)</title><rect x="1152.5" y="709" width="0.2" height="15.0" fill="rgb(234,103,27)" rx="2" ry="2" />
<text  x="1155.49" y="719.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="169.6" y="53" width="0.1" height="15.0" fill="rgb(211,138,30)" rx="2" ry="2" />
<text  x="172.56" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (2 samples, 0.03%)</title><rect x="106.8" y="469" width="0.4" height="15.0" fill="rgb(252,218,10)" rx="2" ry="2" />
<text  x="109.84" y="479.5" ></text>
</g>
<g >
<title>__strchrnul (3 samples, 0.04%)</title><rect x="945.7" y="965" width="0.5" height="15.0" fill="rgb(216,187,20)" rx="2" ry="2" />
<text  x="948.72" y="975.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="483.2" y="357" width="0.5" height="15.0" fill="rgb(244,174,54)" rx="2" ry="2" />
<text  x="486.20" y="367.5" ></text>
</g>
<g >
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="411.4" y="117" width="0.3" height="15.0" fill="rgb(226,62,51)" rx="2" ry="2" />
<text  x="414.42" y="127.5" ></text>
</g>
<g >
<title>sock_write_iter (553 samples, 7.58%)</title><rect x="396.1" y="565" width="89.4" height="15.0" fill="rgb(221,101,25)" rx="2" ry="2" />
<text  x="399.06" y="575.5" >sock_write..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="114.1" y="805" width="0.2" height="15.0" fill="rgb(251,99,9)" rx="2" ry="2" />
<text  x="117.11" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::get (2 samples, 0.03%)</title><rect x="1158.8" y="709" width="0.3" height="15.0" fill="rgb(252,208,9)" rx="2" ry="2" />
<text  x="1161.80" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="132.5" y="725" width="0.2" height="15.0" fill="rgb(207,228,4)" rx="2" ry="2" />
<text  x="135.54" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="680.9" y="645" width="0.2" height="15.0" fill="rgb(215,223,52)" rx="2" ry="2" />
<text  x="683.91" y="655.5" ></text>
</g>
<g >
<title>_copy_to_iter (1 samples, 0.01%)</title><rect x="847.9" y="821" width="0.2" height="15.0" fill="rgb(222,193,50)" rx="2" ry="2" />
<text  x="850.91" y="831.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="349.2" y="453" width="0.1" height="15.0" fill="rgb(223,12,10)" rx="2" ry="2" />
<text  x="352.18" y="463.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1183.2" y="677" width="0.2" height="15.0" fill="rgb(215,181,24)" rx="2" ry="2" />
<text  x="1186.21" y="687.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.01%)</title><rect x="95.0" y="501" width="0.2" height="15.0" fill="rgb(231,56,28)" rx="2" ry="2" />
<text  x="98.04" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="379.4" y="693" width="0.3" height="15.0" fill="rgb(238,32,2)" rx="2" ry="2" />
<text  x="382.41" y="703.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1143.6" y="709" width="0.2" height="15.0" fill="rgb(223,188,9)" rx="2" ry="2" />
<text  x="1146.60" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="789.9" y="629" width="0.1" height="15.0" fill="rgb(252,205,26)" rx="2" ry="2" />
<text  x="792.88" y="639.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="28.8" y="917" width="0.1" height="15.0" fill="rgb(243,171,47)" rx="2" ry="2" />
<text  x="31.75" y="927.5" ></text>
</g>
<g >
<title>tcp_write_timer_handler (1 samples, 0.01%)</title><rect x="35.2" y="869" width="0.2" height="15.0" fill="rgb(224,1,52)" rx="2" ry="2" />
<text  x="38.22" y="879.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (1 samples, 0.01%)</title><rect x="353.1" y="421" width="0.1" height="15.0" fill="rgb(237,195,31)" rx="2" ry="2" />
<text  x="356.06" y="431.5" ></text>
</g>
<g >
<title>skb_push (1 samples, 0.01%)</title><rect x="238.4" y="421" width="0.2" height="15.0" fill="rgb(214,167,5)" rx="2" ry="2" />
<text  x="241.43" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="363.7" y="757" width="0.2" height="15.0" fill="rgb(210,209,10)" rx="2" ry="2" />
<text  x="366.73" y="767.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;@plt (1 samples, 0.01%)</title><rect x="268.8" y="965" width="0.2" height="15.0" fill="rgb(220,157,18)" rx="2" ry="2" />
<text  x="271.83" y="975.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (3 samples, 0.04%)</title><rect x="82.3" y="469" width="0.4" height="15.0" fill="rgb(220,26,5)" rx="2" ry="2" />
<text  x="85.26" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~tuple (1 samples, 0.01%)</title><rect x="349.2" y="485" width="0.1" height="15.0" fill="rgb(233,201,43)" rx="2" ry="2" />
<text  x="352.18" y="495.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (2 samples, 0.03%)</title><rect x="582.1" y="741" width="0.4" height="15.0" fill="rgb(229,135,26)" rx="2" ry="2" />
<text  x="585.14" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="597" width="0.2" height="15.0" fill="rgb(251,32,47)" rx="2" ry="2" />
<text  x="1190.41" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, char*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="783.9" y="613" width="0.2" height="15.0" fill="rgb(247,122,31)" rx="2" ry="2" />
<text  x="786.90" y="623.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="802.0" y="661" width="0.2" height="15.0" fill="rgb(245,2,30)" rx="2" ry="2" />
<text  x="805.00" y="671.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (421 samples, 5.77%)</title><rect x="411.3" y="133" width="68.0" height="15.0" fill="rgb(209,41,9)" rx="2" ry="2" />
<text  x="414.25" y="143.5" >tcp_v4_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="276.7" y="965" width="0.2" height="15.0" fill="rgb(208,160,6)" rx="2" ry="2" />
<text  x="279.75" y="975.5" ></text>
</g>
<g >
<title>std::__alloc_on_swap&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="489.5" y="773" width="0.2" height="15.0" fill="rgb(234,216,41)" rx="2" ry="2" />
<text  x="492.50" y="783.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (1 samples, 0.01%)</title><rect x="481.9" y="309" width="0.2" height="15.0" fill="rgb(242,36,25)" rx="2" ry="2" />
<text  x="484.90" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (254 samples, 3.48%)</title><rect x="70.3" y="709" width="41.1" height="15.0" fill="rgb(207,157,46)" rx="2" ry="2" />
<text  x="73.30" y="719.5" >std..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="997.8" y="533" width="0.1" height="15.0" fill="rgb(215,28,36)" rx="2" ry="2" />
<text  x="1000.78" y="543.5" ></text>
</g>
<g >
<title>set_root (2 samples, 0.03%)</title><rect x="829.8" y="565" width="0.3" height="15.0" fill="rgb(207,128,30)" rx="2" ry="2" />
<text  x="832.81" y="575.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;::insert (25 samples, 0.34%)</title><rect x="351.1" y="565" width="4.1" height="15.0" fill="rgb(237,115,36)" rx="2" ry="2" />
<text  x="354.12" y="575.5" ></text>
</g>
<g >
<title>__vfs_write (3 samples, 0.04%)</title><rect x="1186.8" y="549" width="0.5" height="15.0" fill="rgb(246,78,15)" rx="2" ry="2" />
<text  x="1189.77" y="559.5" ></text>
</g>
<g >
<title>__fdget (6 samples, 0.08%)</title><rect x="289.4" y="757" width="0.9" height="15.0" fill="rgb(222,0,42)" rx="2" ry="2" />
<text  x="292.36" y="767.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1113.9" y="469" width="0.1" height="15.0" fill="rgb(253,153,1)" rx="2" ry="2" />
<text  x="1116.86" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;char&gt; (1 samples, 0.01%)</title><rect x="67.6" y="661" width="0.1" height="15.0" fill="rgb(245,192,48)" rx="2" ry="2" />
<text  x="70.55" y="671.5" ></text>
</g>
<g >
<title>tcp_push (1 samples, 0.01%)</title><rect x="892.4" y="805" width="0.1" height="15.0" fill="rgb(251,181,42)" rx="2" ry="2" />
<text  x="895.37" y="815.5" ></text>
</g>
<g >
<title>dev_queue_xmit (12 samples, 0.16%)</title><rect x="235.4" y="341" width="1.9" height="15.0" fill="rgb(232,201,25)" rx="2" ry="2" />
<text  x="238.36" y="351.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (1 samples, 0.01%)</title><rect x="779.7" y="693" width="0.2" height="15.0" fill="rgb(216,137,11)" rx="2" ry="2" />
<text  x="782.69" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1151.5" y="549" width="0.2" height="15.0" fill="rgb(254,119,1)" rx="2" ry="2" />
<text  x="1154.52" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.04%)</title><rect x="1185.3" y="997" width="0.5" height="15.0" fill="rgb(237,213,33)" rx="2" ry="2" />
<text  x="1188.31" y="1007.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.01%)</title><rect x="479.6" y="245" width="0.2" height="15.0" fill="rgb(205,86,18)" rx="2" ry="2" />
<text  x="482.64" y="255.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (4 samples, 0.05%)</title><rect x="114.9" y="789" width="0.7" height="15.0" fill="rgb(239,134,35)" rx="2" ry="2" />
<text  x="117.92" y="799.5" ></text>
</g>
<g >
<title>ccx::Redis::redisReplyToString[abi:cxx11] (3 samples, 0.04%)</title><rect x="664.9" y="677" width="0.5" height="15.0" fill="rgb(217,4,6)" rx="2" ry="2" />
<text  x="667.91" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;unsigned long&gt; (5 samples, 0.07%)</title><rect x="362.3" y="789" width="0.8" height="15.0" fill="rgb(241,72,30)" rx="2" ry="2" />
<text  x="365.27" y="799.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (2 samples, 0.03%)</title><rect x="625.1" y="997" width="0.4" height="15.0" fill="rgb(231,11,0)" rx="2" ry="2" />
<text  x="628.14" y="1007.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.01%)</title><rect x="805.9" y="565" width="0.1" height="15.0" fill="rgb(241,204,41)" rx="2" ry="2" />
<text  x="808.88" y="575.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.01%)</title><rect x="832.4" y="581" width="0.2" height="15.0" fill="rgb(223,148,21)" rx="2" ry="2" />
<text  x="835.39" y="591.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="650.5" y="933" width="0.2" height="15.0" fill="rgb(218,95,38)" rx="2" ry="2" />
<text  x="653.52" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_valptr (2 samples, 0.03%)</title><rect x="375.9" y="725" width="0.3" height="15.0" fill="rgb(225,66,2)" rx="2" ry="2" />
<text  x="378.85" y="735.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="118.6" y="805" width="0.2" height="15.0" fill="rgb(254,215,9)" rx="2" ry="2" />
<text  x="121.64" y="815.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (8 samples, 0.11%)</title><rect x="781.0" y="677" width="1.3" height="15.0" fill="rgb(232,110,4)" rx="2" ry="2" />
<text  x="783.99" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3 samples, 0.04%)</title><rect x="767.6" y="549" width="0.5" height="15.0" fill="rgb(236,111,29)" rx="2" ry="2" />
<text  x="770.57" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="372.3" y="757" width="0.2" height="15.0" fill="rgb(233,150,21)" rx="2" ry="2" />
<text  x="375.29" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1121.5" y="629" width="0.1" height="15.0" fill="rgb(219,144,1)" rx="2" ry="2" />
<text  x="1124.45" y="639.5" ></text>
</g>
<g >
<title>from_kuid_munged (2 samples, 0.03%)</title><rect x="822.2" y="629" width="0.3" height="15.0" fill="rgb(226,67,43)" rx="2" ry="2" />
<text  x="825.21" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="376.0" y="693" width="0.2" height="15.0" fill="rgb(226,149,52)" rx="2" ry="2" />
<text  x="379.01" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="1004.9" y="677" width="0.2" height="15.0" fill="rgb(209,149,10)" rx="2" ry="2" />
<text  x="1007.89" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (6 samples, 0.08%)</title><rect x="767.1" y="597" width="1.0" height="15.0" fill="rgb(208,59,39)" rx="2" ry="2" />
<text  x="770.08" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;void  (1 samples, 0.01%)</title><rect x="488.7" y="741" width="0.2" height="15.0" fill="rgb(213,149,20)" rx="2" ry="2" />
<text  x="491.69" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (1 samples, 0.01%)</title><rect x="360.2" y="789" width="0.1" height="15.0" fill="rgb(254,92,5)" rx="2" ry="2" />
<text  x="363.17" y="799.5" ></text>
</g>
<g >
<title>map_id_up (2 samples, 0.03%)</title><rect x="822.2" y="613" width="0.3" height="15.0" fill="rgb(237,205,1)" rx="2" ry="2" />
<text  x="825.21" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.03%)</title><rect x="88.2" y="485" width="0.4" height="15.0" fill="rgb(207,204,43)" rx="2" ry="2" />
<text  x="91.25" y="495.5" ></text>
</g>
<g >
<title>sk_reset_timer (1 samples, 0.01%)</title><rect x="927.8" y="725" width="0.1" height="15.0" fill="rgb(234,22,45)" rx="2" ry="2" />
<text  x="930.78" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="498.6" y="757" width="0.3" height="15.0" fill="rgb(247,83,54)" rx="2" ry="2" />
<text  x="501.55" y="767.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::begin (1 samples, 0.01%)</title><rect x="1017.8" y="645" width="0.2" height="15.0" fill="rgb(251,31,42)" rx="2" ry="2" />
<text  x="1020.83" y="655.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="873.1" y="805" width="0.2" height="15.0" fill="rgb(209,178,14)" rx="2" ry="2" />
<text  x="876.13" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (9 samples, 0.12%)</title><rect x="775.8" y="677" width="1.5" height="15.0" fill="rgb(222,0,8)" rx="2" ry="2" />
<text  x="778.81" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1131.3" y="597" width="0.2" height="15.0" fill="rgb(246,29,38)" rx="2" ry="2" />
<text  x="1134.32" y="607.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="1167.2" y="629" width="0.3" height="15.0" fill="rgb(239,12,4)" rx="2" ry="2" />
<text  x="1170.21" y="639.5" ></text>
</g>
<g >
<title>netif_rx (4 samples, 0.05%)</title><rect x="925.0" y="581" width="0.7" height="15.0" fill="rgb(233,159,53)" rx="2" ry="2" />
<text  x="928.03" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="789.9" y="677" width="0.1" height="15.0" fill="rgb(243,191,23)" rx="2" ry="2" />
<text  x="792.88" y="687.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="82.6" y="325" width="0.1" height="15.0" fill="rgb(244,212,24)" rx="2" ry="2" />
<text  x="85.59" y="335.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (2 samples, 0.03%)</title><rect x="33.0" y="997" width="0.3" height="15.0" fill="rgb(236,159,39)" rx="2" ry="2" />
<text  x="35.96" y="1007.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1133.1" y="629" width="0.2" height="15.0" fill="rgb(244,10,46)" rx="2" ry="2" />
<text  x="1136.09" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1178.5" y="709" width="0.2" height="15.0" fill="rgb(239,20,17)" rx="2" ry="2" />
<text  x="1181.52" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (6 samples, 0.08%)</title><rect x="994.9" y="709" width="0.9" height="15.0" fill="rgb(231,177,36)" rx="2" ry="2" />
<text  x="997.87" y="719.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="35.7" y="997" width="0.3" height="15.0" fill="rgb(213,157,45)" rx="2" ry="2" />
<text  x="38.70" y="1007.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="837.6" y="693" width="0.1" height="15.0" fill="rgb(251,218,12)" rx="2" ry="2" />
<text  x="840.57" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="791.3" y="629" width="0.2" height="15.0" fill="rgb(206,4,21)" rx="2" ry="2" />
<text  x="794.33" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="770.0" y="613" width="0.2" height="15.0" fill="rgb(250,221,42)" rx="2" ry="2" />
<text  x="772.99" y="623.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="64.0" y="725" width="0.2" height="15.0" fill="rgb(230,161,13)" rx="2" ry="2" />
<text  x="67.00" y="735.5" ></text>
</g>
<g >
<title>lookup_fast (2 samples, 0.03%)</title><rect x="1173.7" y="565" width="0.3" height="15.0" fill="rgb(250,26,39)" rx="2" ry="2" />
<text  x="1176.67" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1 samples, 0.01%)</title><rect x="340.8" y="469" width="0.1" height="15.0" fill="rgb(215,165,28)" rx="2" ry="2" />
<text  x="343.77" y="479.5" ></text>
</g>
<g >
<title>free (3 samples, 0.04%)</title><rect x="246.4" y="597" width="0.4" height="15.0" fill="rgb(206,111,46)" rx="2" ry="2" />
<text  x="249.36" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;&gt; (2 samples, 0.03%)</title><rect x="89.2" y="677" width="0.3" height="15.0" fill="rgb(205,64,50)" rx="2" ry="2" />
<text  x="92.22" y="687.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="1139.2" y="581" width="0.2" height="15.0" fill="rgb(226,34,12)" rx="2" ry="2" />
<text  x="1142.24" y="591.5" ></text>
</g>
<g >
<title>__fget_light (4 samples, 0.05%)</title><rect x="147.6" y="597" width="0.6" height="15.0" fill="rgb(247,18,3)" rx="2" ry="2" />
<text  x="150.58" y="607.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="929.6" y="901" width="0.1" height="15.0" fill="rgb(238,210,37)" rx="2" ry="2" />
<text  x="932.56" y="911.5" ></text>
</g>
<g >
<title>StaticServer::onConnection (2 samples, 0.03%)</title><rect x="137.9" y="597" width="0.3" height="15.0" fill="rgb(216,186,11)" rx="2" ry="2" />
<text  x="140.88" y="607.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.01%)</title><rect x="905.6" y="421" width="0.2" height="15.0" fill="rgb(237,224,29)" rx="2" ry="2" />
<text  x="908.63" y="431.5" ></text>
</g>
<g >
<title>check_stack_object (1 samples, 0.01%)</title><rect x="531.2" y="805" width="0.2" height="15.0" fill="rgb(225,174,34)" rx="2" ry="2" />
<text  x="534.21" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (4 samples, 0.05%)</title><rect x="259.5" y="997" width="0.6" height="15.0" fill="rgb(232,196,11)" rx="2" ry="2" />
<text  x="262.45" y="1007.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="1132.1" y="661" width="0.2" height="15.0" fill="rgb(206,133,30)" rx="2" ry="2" />
<text  x="1135.12" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (3 samples, 0.04%)</title><rect x="314.4" y="709" width="0.5" height="15.0" fill="rgb(253,228,1)" rx="2" ry="2" />
<text  x="317.42" y="719.5" ></text>
</g>
<g >
<title>futex_wake (11 samples, 0.15%)</title><rect x="1025.4" y="549" width="1.8" height="15.0" fill="rgb(225,35,9)" rx="2" ry="2" />
<text  x="1028.42" y="559.5" ></text>
</g>
<g >
<title>inet_recvmsg (24 samples, 0.33%)</title><rect x="329.6" y="501" width="3.9" height="15.0" fill="rgb(227,172,30)" rx="2" ry="2" />
<text  x="332.61" y="511.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1149.6" y="661" width="0.1" height="15.0" fill="rgb(211,175,33)" rx="2" ry="2" />
<text  x="1152.58" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="106.0" y="485" width="0.4" height="15.0" fill="rgb(233,97,39)" rx="2" ry="2" />
<text  x="109.03" y="495.5" ></text>
</g>
<g >
<title>tcp_current_mss (4 samples, 0.05%)</title><rect x="928.1" y="773" width="0.6" height="15.0" fill="rgb(231,70,51)" rx="2" ry="2" />
<text  x="931.10" y="783.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (1 samples, 0.01%)</title><rect x="481.6" y="293" width="0.1" height="15.0" fill="rgb(209,180,54)" rx="2" ry="2" />
<text  x="484.58" y="303.5" ></text>
</g>
<g >
<title>wake_up_q (10 samples, 0.14%)</title><rect x="654.6" y="709" width="1.6" height="15.0" fill="rgb(233,19,40)" rx="2" ry="2" />
<text  x="657.56" y="719.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="99.4" y="533" width="0.2" height="15.0" fill="rgb(229,120,22)" rx="2" ry="2" />
<text  x="102.40" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1186.6" y="917" width="0.2" height="15.0" fill="rgb(247,103,38)" rx="2" ry="2" />
<text  x="1189.61" y="927.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="285.5" y="997" width="0.3" height="15.0" fill="rgb(254,37,27)" rx="2" ry="2" />
<text  x="288.48" y="1007.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6 samples, 0.08%)</title><rect x="679.5" y="645" width="0.9" height="15.0" fill="rgb(215,87,22)" rx="2" ry="2" />
<text  x="682.46" y="655.5" ></text>
</g>
<g >
<title>read_int (1 samples, 0.01%)</title><rect x="24.9" y="965" width="0.1" height="15.0" fill="rgb(242,39,35)" rx="2" ry="2" />
<text  x="27.87" y="975.5" ></text>
</g>
<g >
<title>std::swap&lt;void  (1 samples, 0.01%)</title><rect x="996.5" y="789" width="0.1" height="15.0" fill="rgb(242,222,28)" rx="2" ry="2" />
<text  x="999.49" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,198 samples, 16.41%)</title><rect x="991.5" y="901" width="193.7" height="15.0" fill="rgb(242,62,28)" rx="2" ry="2" />
<text  x="994.47" y="911.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="803.5" y="645" width="0.1" height="15.0" fill="rgb(208,101,33)" rx="2" ry="2" />
<text  x="806.46" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="354.5" y="501" width="0.2" height="15.0" fill="rgb(240,196,18)" rx="2" ry="2" />
<text  x="357.51" y="511.5" ></text>
</g>
<g >
<title>select_estimate_accuracy.part.8 (1 samples, 0.01%)</title><rect x="58.5" y="725" width="0.2" height="15.0" fill="rgb(219,37,31)" rx="2" ry="2" />
<text  x="61.50" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1154.1" y="613" width="0.2" height="15.0" fill="rgb(232,105,7)" rx="2" ry="2" />
<text  x="1157.11" y="623.5" ></text>
</g>
<g >
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="512.1" y="821" width="0.4" height="15.0" fill="rgb(211,196,40)" rx="2" ry="2" />
<text  x="515.13" y="831.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="1011.4" y="645" width="0.4" height="15.0" fill="rgb(219,102,9)" rx="2" ry="2" />
<text  x="1014.36" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.12%)</title><rect x="941.4" y="965" width="1.4" height="15.0" fill="rgb(208,7,44)" rx="2" ry="2" />
<text  x="944.36" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="771.8" y="645" width="0.1" height="15.0" fill="rgb(219,154,26)" rx="2" ry="2" />
<text  x="774.77" y="655.5" ></text>
</g>
<g >
<title>try_to_wake_up (11 samples, 0.15%)</title><rect x="683.7" y="517" width="1.7" height="15.0" fill="rgb(232,144,22)" rx="2" ry="2" />
<text  x="686.66" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="680.3" y="517" width="0.1" height="15.0" fill="rgb(252,8,41)" rx="2" ry="2" />
<text  x="683.27" y="527.5" ></text>
</g>
<g >
<title>strrchr (2 samples, 0.03%)</title><rect x="113.6" y="789" width="0.4" height="15.0" fill="rgb(238,132,54)" rx="2" ry="2" />
<text  x="116.63" y="799.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (2 samples, 0.03%)</title><rect x="21.8" y="949" width="0.3" height="15.0" fill="rgb(241,38,25)" rx="2" ry="2" />
<text  x="24.80" y="959.5" ></text>
</g>
<g >
<title>ip_local_out (1 samples, 0.01%)</title><rect x="82.6" y="389" width="0.1" height="15.0" fill="rgb(249,141,32)" rx="2" ry="2" />
<text  x="85.59" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::get (1 samples, 0.01%)</title><rect x="372.3" y="741" width="0.2" height="15.0" fill="rgb(219,76,52)" rx="2" ry="2" />
<text  x="375.29" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="633.5" y="981" width="0.5" height="15.0" fill="rgb(212,75,18)" rx="2" ry="2" />
<text  x="636.55" y="991.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::~FixedBuffer (1 samples, 0.01%)</title><rect x="254.1" y="757" width="0.2" height="15.0" fill="rgb(237,30,10)" rx="2" ry="2" />
<text  x="257.12" y="767.5" ></text>
</g>
<g >
<title>_itoa_word (3 samples, 0.04%)</title><rect x="946.2" y="965" width="0.5" height="15.0" fill="rgb(215,33,44)" rx="2" ry="2" />
<text  x="949.21" y="975.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="351.1" y="453" width="0.2" height="15.0" fill="rgb(208,99,47)" rx="2" ry="2" />
<text  x="354.12" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="781.0" y="661" width="0.1" height="15.0" fill="rgb(232,65,37)" rx="2" ry="2" />
<text  x="783.99" y="671.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleRead (227 samples, 3.11%)</title><rect x="74.3" y="693" width="36.7" height="15.0" fill="rgb(252,189,33)" rx="2" ry="2" />
<text  x="77.34" y="703.5" >mud..</text>
</g>
<g >
<title>tcp_v4_do_rcv (98 samples, 1.34%)</title><rect x="906.1" y="437" width="15.9" height="15.0" fill="rgb(226,92,8)" rx="2" ry="2" />
<text  x="909.11" y="447.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1 samples, 0.01%)</title><rect x="604.6" y="965" width="0.2" height="15.0" fill="rgb(215,180,16)" rx="2" ry="2" />
<text  x="607.61" y="975.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;char const*&gt; (2 samples, 0.03%)</title><rect x="1018.6" y="661" width="0.4" height="15.0" fill="rgb(244,146,36)" rx="2" ry="2" />
<text  x="1021.63" y="671.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (2 samples, 0.03%)</title><rect x="88.9" y="677" width="0.3" height="15.0" fill="rgb(220,180,17)" rx="2" ry="2" />
<text  x="91.89" y="687.5" ></text>
</g>
<g >
<title>sys_write (3 samples, 0.04%)</title><rect x="1186.8" y="581" width="0.5" height="15.0" fill="rgb(232,25,18)" rx="2" ry="2" />
<text  x="1189.77" y="591.5" ></text>
</g>
<g >
<title>vfprintf (23 samples, 0.32%)</title><rect x="25.0" y="965" width="3.8" height="15.0" fill="rgb(228,129,46)" rx="2" ry="2" />
<text  x="28.03" y="975.5" ></text>
</g>
<g >
<title>release_sock (2 samples, 0.03%)</title><rect x="890.8" y="821" width="0.3" height="15.0" fill="rgb(236,169,52)" rx="2" ry="2" />
<text  x="893.76" y="831.5" ></text>
</g>
<g >
<title>muduo::StringPiece::StringPiece (1 samples, 0.01%)</title><rect x="804.3" y="709" width="0.1" height="15.0" fill="rgb(232,16,22)" rx="2" ry="2" />
<text  x="807.26" y="719.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="337.4" y="213" width="0.1" height="15.0" fill="rgb(254,217,5)" rx="2" ry="2" />
<text  x="340.37" y="223.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (2 samples, 0.03%)</title><rect x="372.5" y="757" width="0.3" height="15.0" fill="rgb(212,35,43)" rx="2" ry="2" />
<text  x="375.46" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="1161.1" y="661" width="0.1" height="15.0" fill="rgb(240,65,15)" rx="2" ry="2" />
<text  x="1164.06" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (187 samples, 2.56%)</title><rect x="845.0" y="965" width="30.2" height="15.0" fill="rgb(254,206,45)" rx="2" ry="2" />
<text  x="848.00" y="975.5" >do..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3 samples, 0.04%)</title><rect x="1134.5" y="581" width="0.5" height="15.0" fill="rgb(210,17,24)" rx="2" ry="2" />
<text  x="1137.55" y="591.5" ></text>
</g>
<g >
<title>sys_readv (1 samples, 0.01%)</title><rect x="336.1" y="629" width="0.1" height="15.0" fill="rgb(205,87,11)" rx="2" ry="2" />
<text  x="339.08" y="639.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (185 samples, 2.53%)</title><rect x="553.0" y="773" width="29.9" height="15.0" fill="rgb(245,185,12)" rx="2" ry="2" />
<text  x="556.04" y="783.5" >__..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="661.0" y="645" width="0.2" height="15.0" fill="rgb(232,58,24)" rx="2" ry="2" />
<text  x="664.03" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (1 samples, 0.01%)</title><rect x="1148.5" y="693" width="0.1" height="15.0" fill="rgb(215,63,40)" rx="2" ry="2" />
<text  x="1151.45" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1161.5" y="581" width="0.2" height="15.0" fill="rgb(236,52,22)" rx="2" ry="2" />
<text  x="1164.55" y="591.5" ></text>
</g>
<g >
<title>__tcp_v4_send_check (1 samples, 0.01%)</title><rect x="554.0" y="725" width="0.2" height="15.0" fill="rgb(251,156,12)" rx="2" ry="2" />
<text  x="557.01" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="1129.9" y="693" width="0.3" height="15.0" fill="rgb(206,224,40)" rx="2" ry="2" />
<text  x="1132.86" y="703.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1162.7" y="677" width="0.1" height="15.0" fill="rgb(244,65,2)" rx="2" ry="2" />
<text  x="1165.68" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="257.7" y="773" width="0.1" height="15.0" fill="rgb(206,184,46)" rx="2" ry="2" />
<text  x="260.67" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,156 samples, 15.84%)</title><rect x="998.1" y="805" width="186.9" height="15.0" fill="rgb(251,17,18)" rx="2" ry="2" />
<text  x="1001.10" y="815.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>muduo::net::TimerQueue::handleRead (1 samples, 0.01%)</title><rect x="1188.2" y="805" width="0.2" height="15.0" fill="rgb(236,227,23)" rx="2" ry="2" />
<text  x="1191.22" y="815.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt.isra.41 (3 samples, 0.04%)</title><rect x="564.7" y="373" width="0.5" height="15.0" fill="rgb(243,206,43)" rx="2" ry="2" />
<text  x="567.68" y="383.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="685.9" y="597" width="0.2" height="15.0" fill="rgb(208,178,47)" rx="2" ry="2" />
<text  x="688.93" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.03%)</title><rect x="1181.3" y="725" width="0.3" height="15.0" fill="rgb(247,62,46)" rx="2" ry="2" />
<text  x="1184.27" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="103.6" y="469" width="0.2" height="15.0" fill="rgb(231,226,44)" rx="2" ry="2" />
<text  x="106.60" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="794.2" y="597" width="0.2" height="15.0" fill="rgb(247,126,51)" rx="2" ry="2" />
<text  x="797.24" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="92.0" y="501" width="0.3" height="15.0" fill="rgb(216,79,46)" rx="2" ry="2" />
<text  x="94.96" y="511.5" ></text>
</g>
<g >
<title>tcp_push (1 samples, 0.01%)</title><rect x="151.5" y="501" width="0.1" height="15.0" fill="rgb(222,29,32)" rx="2" ry="2" />
<text  x="154.46" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="791.0" y="645" width="0.3" height="15.0" fill="rgb(229,9,25)" rx="2" ry="2" />
<text  x="794.01" y="655.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="831.1" y="581" width="0.2" height="15.0" fill="rgb(242,66,47)" rx="2" ry="2" />
<text  x="834.10" y="591.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::removeChannel (1 samples, 0.01%)</title><rect x="137.6" y="661" width="0.1" height="15.0" fill="rgb(221,195,54)" rx="2" ry="2" />
<text  x="140.55" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="1161.1" y="677" width="0.1" height="15.0" fill="rgb(225,90,52)" rx="2" ry="2" />
<text  x="1164.06" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="91.8" y="421" width="0.2" height="15.0" fill="rgb(219,84,53)" rx="2" ry="2" />
<text  x="94.80" y="431.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.01%)</title><rect x="482.2" y="437" width="0.2" height="15.0" fill="rgb(217,65,26)" rx="2" ry="2" />
<text  x="485.23" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (3 samples, 0.04%)</title><rect x="658.4" y="693" width="0.5" height="15.0" fill="rgb(243,218,52)" rx="2" ry="2" />
<text  x="661.44" y="703.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="81.3" y="437" width="0.2" height="15.0" fill="rgb(249,1,3)" rx="2" ry="2" />
<text  x="84.29" y="447.5" ></text>
</g>
<g >
<title>skb_put (1 samples, 0.01%)</title><rect x="892.2" y="805" width="0.2" height="15.0" fill="rgb(240,185,20)" rx="2" ry="2" />
<text  x="895.21" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.2" y="565" width="0.2" height="15.0" fill="rgb(235,144,48)" rx="2" ry="2" />
<text  x="1122.19" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="265.4" y="917" width="0.2" height="15.0" fill="rgb(247,100,16)" rx="2" ry="2" />
<text  x="268.43" y="927.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="68.4" y="757" width="0.1" height="15.0" fill="rgb(222,36,47)" rx="2" ry="2" />
<text  x="71.36" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="91.8" y="437" width="0.2" height="15.0" fill="rgb(219,103,26)" rx="2" ry="2" />
<text  x="94.80" y="447.5" ></text>
</g>
<g >
<title>__vfs_read (140 samples, 1.92%)</title><rect x="509.5" y="917" width="22.7" height="15.0" fill="rgb(212,32,9)" rx="2" ry="2" />
<text  x="512.55" y="927.5" >_..</text>
</g>
<g >
<title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="1017.0" y="629" width="0.3" height="15.0" fill="rgb(223,32,32)" rx="2" ry="2" />
<text  x="1020.02" y="639.5" ></text>
</g>
<g >
<title>asyncOutput (17 samples, 0.23%)</title><rect x="369.7" y="789" width="2.8" height="15.0" fill="rgb(238,104,53)" rx="2" ry="2" />
<text  x="372.71" y="799.5" ></text>
</g>
<g >
<title>__check_object_size (7 samples, 0.10%)</title><rect x="529.8" y="805" width="1.1" height="15.0" fill="rgb(213,13,36)" rx="2" ry="2" />
<text  x="532.76" y="815.5" ></text>
</g>
<g >
<title>skb_release_all (3 samples, 0.04%)</title><rect x="910.3" y="357" width="0.5" height="15.0" fill="rgb(221,95,28)" rx="2" ry="2" />
<text  x="913.32" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1 samples, 0.01%)</title><rect x="109.1" y="613" width="0.2" height="15.0" fill="rgb(239,76,18)" rx="2" ry="2" />
<text  x="112.10" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (4 samples, 0.05%)</title><rect x="796.0" y="645" width="0.7" height="15.0" fill="rgb(239,112,1)" rx="2" ry="2" />
<text  x="799.02" y="655.5" ></text>
</g>
<g >
<title>tcp_rcv_established (94 samples, 1.29%)</title><rect x="560.8" y="421" width="15.2" height="15.0" fill="rgb(228,197,44)" rx="2" ry="2" />
<text  x="563.80" y="431.5" ></text>
</g>
<g >
<title>tcp_v4_md5_lookup (1 samples, 0.01%)</title><rect x="928.6" y="757" width="0.1" height="15.0" fill="rgb(233,72,34)" rx="2" ry="2" />
<text  x="931.59" y="767.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="575.3" y="341" width="0.2" height="15.0" fill="rgb(216,46,8)" rx="2" ry="2" />
<text  x="578.35" y="351.5" ></text>
</g>
<g >
<title>sk_reset_timer (4 samples, 0.05%)</title><rect x="561.3" y="373" width="0.6" height="15.0" fill="rgb(236,120,19)" rx="2" ry="2" />
<text  x="564.28" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="497.3" y="757" width="0.1" height="15.0" fill="rgb(248,134,48)" rx="2" ry="2" />
<text  x="500.26" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="132.5" y="693" width="0.2" height="15.0" fill="rgb(251,138,51)" rx="2" ry="2" />
<text  x="135.54" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="489.2" y="757" width="0.1" height="15.0" fill="rgb(250,189,14)" rx="2" ry="2" />
<text  x="492.18" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="796.3" y="581" width="0.2" height="15.0" fill="rgb(248,1,29)" rx="2" ry="2" />
<text  x="799.34" y="591.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="798.9" y="709" width="0.2" height="15.0" fill="rgb(226,104,13)" rx="2" ry="2" />
<text  x="801.93" y="719.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (12 samples, 0.16%)</title><rect x="683.5" y="629" width="1.9" height="15.0" fill="rgb(251,52,40)" rx="2" ry="2" />
<text  x="686.50" y="639.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="68.5" y="757" width="0.2" height="15.0" fill="rgb(253,62,0)" rx="2" ry="2" />
<text  x="71.52" y="767.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1016.0" y="597" width="0.2" height="15.0" fill="rgb(218,89,51)" rx="2" ry="2" />
<text  x="1019.05" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3 samples, 0.04%)</title><rect x="789.1" y="645" width="0.5" height="15.0" fill="rgb(233,32,48)" rx="2" ry="2" />
<text  x="792.07" y="655.5" ></text>
</g>
<g >
<title>__fget (6 samples, 0.08%)</title><rect x="289.4" y="725" width="0.9" height="15.0" fill="rgb(223,194,20)" rx="2" ry="2" />
<text  x="292.36" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.01%)</title><rect x="383.6" y="805" width="0.2" height="15.0" fill="rgb(248,7,2)" rx="2" ry="2" />
<text  x="386.61" y="815.5" ></text>
</g>
<g >
<title>security_file_permission (4 samples, 0.05%)</title><rect x="486.1" y="581" width="0.7" height="15.0" fill="rgb(235,89,6)" rx="2" ry="2" />
<text  x="489.11" y="591.5" ></text>
</g>
<g >
<title>_IO_old_init (4 samples, 0.05%)</title><rect x="944.3" y="981" width="0.6" height="15.0" fill="rgb(244,167,48)" rx="2" ry="2" />
<text  x="947.27" y="991.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (2 samples, 0.03%)</title><rect x="1018.3" y="645" width="0.3" height="15.0" fill="rgb(241,27,16)" rx="2" ry="2" />
<text  x="1021.31" y="655.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1151.8" y="597" width="0.2" height="15.0" fill="rgb(228,189,20)" rx="2" ry="2" />
<text  x="1154.85" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (29 samples, 0.40%)</title><rect x="10.0" y="965" width="4.7" height="15.0" fill="rgb(235,49,32)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="352.1" y="469" width="0.5" height="15.0" fill="rgb(218,189,5)" rx="2" ry="2" />
<text  x="355.09" y="479.5" ></text>
</g>
<g >
<title>StaticServer::onMessage (1 samples, 0.01%)</title><rect x="339.5" y="597" width="0.1" height="15.0" fill="rgb(208,22,0)" rx="2" ry="2" />
<text  x="342.48" y="607.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, long&gt; (1 samples, 0.01%)</title><rect x="325.6" y="677" width="0.1" height="15.0" fill="rgb(252,196,45)" rx="2" ry="2" />
<text  x="328.57" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,372 samples, 18.80%)</title><rect x="37.5" y="933" width="221.8" height="15.0" fill="rgb(230,63,37)" rx="2" ry="2" />
<text  x="40.48" y="943.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool, true&gt; (1 samples, 0.01%)</title><rect x="355.0" y="501" width="0.2" height="15.0" fill="rgb(233,74,9)" rx="2" ry="2" />
<text  x="358.00" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="338.5" y="597" width="0.2" height="15.0" fill="rgb(219,42,49)" rx="2" ry="2" />
<text  x="341.51" y="607.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="68.0" y="725" width="0.2" height="15.0" fill="rgb(218,169,46)" rx="2" ry="2" />
<text  x="71.04" y="735.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="963.8" y="997" width="0.2" height="15.0" fill="rgb(242,224,41)" rx="2" ry="2" />
<text  x="966.83" y="1007.5" ></text>
</g>
<g >
<title>start_thread (1,354 samples, 18.55%)</title><rect x="286.8" y="997" width="218.9" height="15.0" fill="rgb(237,146,9)" rx="2" ry="2" />
<text  x="289.77" y="1007.5" >start_thread</text>
</g>
<g >
<title>do_syscall_64 (29 samples, 0.40%)</title><rect x="10.0" y="949" width="4.7" height="15.0" fill="rgb(206,28,32)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="103.1" y="485" width="0.3" height="15.0" fill="rgb(212,166,26)" rx="2" ry="2" />
<text  x="106.12" y="495.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (8 samples, 0.11%)</title><rect x="885.1" y="965" width="1.3" height="15.0" fill="rgb(242,183,27)" rx="2" ry="2" />
<text  x="888.10" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="114.0" y="757" width="0.1" height="15.0" fill="rgb(238,106,6)" rx="2" ry="2" />
<text  x="116.95" y="767.5" ></text>
</g>
<g >
<title>drop_futex_key_refs.isra.15 (1 samples, 0.01%)</title><rect x="1024.9" y="549" width="0.2" height="15.0" fill="rgb(245,77,22)" rx="2" ry="2" />
<text  x="1027.94" y="559.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="317.5" y="725" width="0.2" height="15.0" fill="rgb(215,142,3)" rx="2" ry="2" />
<text  x="320.49" y="735.5" ></text>
</g>
<g >
<title>inflateEnd (1 samples, 0.01%)</title><rect x="668.6" y="693" width="0.2" height="15.0" fill="rgb(233,56,33)" rx="2" ry="2" />
<text  x="671.63" y="703.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="650.5" y="965" width="0.2" height="15.0" fill="rgb(244,39,3)" rx="2" ry="2" />
<text  x="653.52" y="975.5" ></text>
</g>
<g >
<title>ip_finish_output2 (168 samples, 2.30%)</title><rect x="899.3" y="661" width="27.2" height="15.0" fill="rgb(219,92,12)" rx="2" ry="2" />
<text  x="902.32" y="671.5" >i..</text>
</g>
<g >
<title>muduo::net::Channel::update (1 samples, 0.01%)</title><rect x="137.7" y="677" width="0.2" height="15.0" fill="rgb(232,197,51)" rx="2" ry="2" />
<text  x="140.72" y="687.5" ></text>
</g>
<g >
<title>sock_put (1 samples, 0.01%)</title><rect x="558.5" y="453" width="0.2" height="15.0" fill="rgb(223,6,38)" rx="2" ry="2" />
<text  x="561.53" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp, void&gt; (2 samples, 0.03%)</title><rect x="109.9" y="597" width="0.3" height="15.0" fill="rgb(219,93,11)" rx="2" ry="2" />
<text  x="112.91" y="607.5" ></text>
</g>
<g >
<title>tcp_v4_md5_lookup (2 samples, 0.03%)</title><rect x="242.3" y="453" width="0.3" height="15.0" fill="rgb(219,222,48)" rx="2" ry="2" />
<text  x="245.31" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="492.4" y="757" width="0.2" height="15.0" fill="rgb(228,9,28)" rx="2" ry="2" />
<text  x="495.41" y="767.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (1 samples, 0.01%)</title><rect x="383.4" y="805" width="0.2" height="15.0" fill="rgb(211,206,18)" rx="2" ry="2" />
<text  x="386.45" y="815.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;&gt; (1 samples, 0.01%)</title><rect x="320.4" y="725" width="0.2" height="15.0" fill="rgb(230,177,9)" rx="2" ry="2" />
<text  x="323.40" y="735.5" ></text>
</g>
<g >
<title>std::move&lt;void  (1 samples, 0.01%)</title><rect x="767.7" y="533" width="0.2" height="15.0" fill="rgb(221,228,23)" rx="2" ry="2" />
<text  x="770.73" y="543.5" ></text>
</g>
<g >
<title>boost::any::~any (1 samples, 0.01%)</title><rect x="385.6" y="565" width="0.1" height="15.0" fill="rgb(213,6,42)" rx="2" ry="2" />
<text  x="388.55" y="575.5" ></text>
</g>
<g >
<title>ip_queue_xmit (1 samples, 0.01%)</title><rect x="337.4" y="341" width="0.1" height="15.0" fill="rgb(219,162,9)" rx="2" ry="2" />
<text  x="340.37" y="351.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="680.3" y="501" width="0.1" height="15.0" fill="rgb(230,222,48)" rx="2" ry="2" />
<text  x="683.27" y="511.5" ></text>
</g>
<g >
<title>ksize (1 samples, 0.01%)</title><rect x="551.9" y="757" width="0.2" height="15.0" fill="rgb(252,27,11)" rx="2" ry="2" />
<text  x="554.90" y="767.5" ></text>
</g>
<g >
<title>__xstat@plt (1 samples, 0.01%)</title><rect x="1177.6" y="725" width="0.1" height="15.0" fill="rgb(250,22,21)" rx="2" ry="2" />
<text  x="1180.55" y="735.5" ></text>
</g>
<g >
<title>tcp_chrono_start (2 samples, 0.03%)</title><rect x="156.8" y="485" width="0.3" height="15.0" fill="rgb(231,136,11)" rx="2" ry="2" />
<text  x="159.79" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (4 samples, 0.05%)</title><rect x="375.9" y="741" width="0.6" height="15.0" fill="rgb(247,102,7)" rx="2" ry="2" />
<text  x="378.85" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="667.8" y="645" width="0.2" height="15.0" fill="rgb(205,222,13)" rx="2" ry="2" />
<text  x="670.82" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (1 samples, 0.01%)</title><rect x="352.6" y="469" width="0.1" height="15.0" fill="rgb(208,96,32)" rx="2" ry="2" />
<text  x="355.57" y="479.5" ></text>
</g>
<g >
<title>__GI___getsockopt (1 samples, 0.01%)</title><rect x="324.8" y="677" width="0.1" height="15.0" fill="rgb(207,179,42)" rx="2" ry="2" />
<text  x="327.76" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1127.4" y="661" width="0.2" height="15.0" fill="rgb(251,9,49)" rx="2" ry="2" />
<text  x="1130.44" y="671.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.01%)</title><rect x="152.6" y="469" width="0.2" height="15.0" fill="rgb(217,39,34)" rx="2" ry="2" />
<text  x="155.59" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="368.7" y="725" width="0.2" height="15.0" fill="rgb(212,178,13)" rx="2" ry="2" />
<text  x="371.74" y="735.5" ></text>
</g>
<g >
<title>remove_wait_queue (3 samples, 0.04%)</title><rect x="848.7" y="805" width="0.5" height="15.0" fill="rgb(244,224,40)" rx="2" ry="2" />
<text  x="851.72" y="815.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="498.9" y="757" width="0.1" height="15.0" fill="rgb(239,185,44)" rx="2" ry="2" />
<text  x="501.88" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="309.9" y="773" width="0.2" height="15.0" fill="rgb(214,163,26)" rx="2" ry="2" />
<text  x="312.89" y="783.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="1184.3" y="757" width="0.2" height="15.0" fill="rgb(245,1,54)" rx="2" ry="2" />
<text  x="1187.34" y="767.5" ></text>
</g>
<g >
<title>vmware_sched_clock (2 samples, 0.03%)</title><rect x="927.0" y="709" width="0.3" height="15.0" fill="rgb(241,23,9)" rx="2" ry="2" />
<text  x="929.97" y="719.5" ></text>
</g>
<g >
<title>sock_close (1 samples, 0.01%)</title><rect x="658.8" y="437" width="0.1" height="15.0" fill="rgb(244,170,21)" rx="2" ry="2" />
<text  x="661.77" y="447.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="251.9" y="773" width="0.1" height="15.0" fill="rgb(241,144,6)" rx="2" ry="2" />
<text  x="254.85" y="783.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (1 samples, 0.01%)</title><rect x="265.1" y="965" width="0.2" height="15.0" fill="rgb(220,138,41)" rx="2" ry="2" />
<text  x="268.11" y="975.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="89.1" y="613" width="0.1" height="15.0" fill="rgb(246,70,11)" rx="2" ry="2" />
<text  x="92.05" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="98.4" y="533" width="0.2" height="15.0" fill="rgb(209,229,48)" rx="2" ry="2" />
<text  x="101.43" y="543.5" ></text>
</g>
<g >
<title>select_estimate_accuracy.part.8 (2 samples, 0.03%)</title><rect x="308.1" y="725" width="0.3" height="15.0" fill="rgb(244,204,28)" rx="2" ry="2" />
<text  x="311.11" y="735.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;1&gt;, false, true&gt;::operator (1 samples, 0.01%)</title><rect x="320.2" y="725" width="0.2" height="15.0" fill="rgb(217,67,30)" rx="2" ry="2" />
<text  x="323.24" y="735.5" ></text>
</g>
<g >
<title>security_inode_getattr (1 samples, 0.01%)</title><rect x="823.0" y="629" width="0.2" height="15.0" fill="rgb(221,1,37)" rx="2" ry="2" />
<text  x="826.02" y="639.5" ></text>
</g>
<g >
<title>rw_verify_area (3 samples, 0.04%)</title><rect x="243.3" y="597" width="0.5" height="15.0" fill="rgb(206,85,4)" rx="2" ry="2" />
<text  x="246.28" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;void  (1 samples, 0.01%)</title><rect x="1122.3" y="677" width="0.1" height="15.0" fill="rgb(206,159,18)" rx="2" ry="2" />
<text  x="1125.26" y="687.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (1 samples, 0.01%)</title><rect x="1187.4" y="645" width="0.2" height="15.0" fill="rgb(250,62,14)" rx="2" ry="2" />
<text  x="1190.41" y="655.5" ></text>
</g>
<g >
<title>lockref_put_return (1 samples, 0.01%)</title><rect x="822.9" y="597" width="0.1" height="15.0" fill="rgb(249,33,19)" rx="2" ry="2" />
<text  x="825.86" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="96.7" y="565" width="0.1" height="15.0" fill="rgb(248,46,10)" rx="2" ry="2" />
<text  x="99.65" y="575.5" ></text>
</g>
<g >
<title>free (4 samples, 0.05%)</title><rect x="490.1" y="597" width="0.7" height="15.0" fill="rgb(254,201,9)" rx="2" ry="2" />
<text  x="493.15" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, muduo::net::TcpConnection*, std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="358.7" y="725" width="0.2" height="15.0" fill="rgb(248,94,34)" rx="2" ry="2" />
<text  x="361.71" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="1003.9" y="693" width="0.2" height="15.0" fill="rgb(233,9,21)" rx="2" ry="2" />
<text  x="1006.92" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="252.5" y="757" width="0.2" height="15.0" fill="rgb(211,174,42)" rx="2" ry="2" />
<text  x="255.50" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (3 samples, 0.04%)</title><rect x="360.3" y="789" width="0.5" height="15.0" fill="rgb(226,62,54)" rx="2" ry="2" />
<text  x="363.33" y="799.5" ></text>
</g>
<g >
<title>__vfs_write (250 samples, 3.43%)</title><rect x="889.1" y="901" width="40.5" height="15.0" fill="rgb(205,42,15)" rx="2" ry="2" />
<text  x="892.14" y="911.5" >__v..</text>
</g>
<g >
<title>__fget_light (4 samples, 0.05%)</title><rect x="322.3" y="613" width="0.7" height="15.0" fill="rgb(226,140,0)" rx="2" ry="2" />
<text  x="325.34" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="1023.3" y="629" width="0.2" height="15.0" fill="rgb(218,174,42)" rx="2" ry="2" />
<text  x="1026.32" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (17 samples, 0.23%)</title><rect x="312.8" y="789" width="2.7" height="15.0" fill="rgb(213,107,5)" rx="2" ry="2" />
<text  x="315.80" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1161.9" y="533" width="0.1" height="15.0" fill="rgb(206,53,19)" rx="2" ry="2" />
<text  x="1164.87" y="543.5" ></text>
</g>
<g >
<title>mod_timer (1 samples, 0.01%)</title><rect x="240.5" y="373" width="0.2" height="15.0" fill="rgb(242,114,16)" rx="2" ry="2" />
<text  x="243.54" y="383.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="813.8" y="645" width="0.2" height="15.0" fill="rgb(212,183,21)" rx="2" ry="2" />
<text  x="816.80" y="655.5" ></text>
</g>
<g >
<title>boost::less_than_comparable&lt;muduo::Timestamp, muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt;, boost::detail::false_t&gt;::less_than_comparable (1 samples, 0.01%)</title><rect x="496.0" y="741" width="0.1" height="15.0" fill="rgb(249,130,29)" rx="2" ry="2" />
<text  x="498.97" y="751.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (1 samples, 0.01%)</title><rect x="315.1" y="741" width="0.1" height="15.0" fill="rgb(232,37,28)" rx="2" ry="2" />
<text  x="318.06" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (1 samples, 0.01%)</title><rect x="354.2" y="437" width="0.1" height="15.0" fill="rgb(240,104,28)" rx="2" ry="2" />
<text  x="357.19" y="447.5" ></text>
</g>
<g >
<title>redisReaderFeed (2 samples, 0.03%)</title><rect x="652.0" y="997" width="0.3" height="15.0" fill="rgb(252,45,30)" rx="2" ry="2" />
<text  x="654.98" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_S_key (2 samples, 0.03%)</title><rect x="130.9" y="741" width="0.3" height="15.0" fill="rgb(237,36,2)" rx="2" ry="2" />
<text  x="133.93" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1187.9" y="757" width="0.2" height="15.0" fill="rgb(237,112,29)" rx="2" ry="2" />
<text  x="1190.90" y="767.5" ></text>
</g>
<g >
<title>muduo::StringPiece::data (1 samples, 0.01%)</title><rect x="1017.7" y="677" width="0.1" height="15.0" fill="rgb(254,210,16)" rx="2" ry="2" />
<text  x="1020.66" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4 samples, 0.05%)</title><rect x="657.0" y="789" width="0.6" height="15.0" fill="rgb(209,10,30)" rx="2" ry="2" />
<text  x="659.99" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="104.9" y="517" width="0.5" height="15.0" fill="rgb(246,188,16)" rx="2" ry="2" />
<text  x="107.90" y="527.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (14 samples, 0.19%)</title><rect x="799.1" y="693" width="2.3" height="15.0" fill="rgb(252,25,30)" rx="2" ry="2" />
<text  x="802.09" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::ThreadData::runInThread (1,198 samples, 16.41%)</title><rect x="991.5" y="965" width="193.7" height="15.0" fill="rgb(220,4,41)" rx="2" ry="2" />
<text  x="994.47" y="975.5" >muduo::detail::ThreadData..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (1 samples, 0.01%)</title><rect x="783.6" y="645" width="0.1" height="15.0" fill="rgb(219,128,50)" rx="2" ry="2" />
<text  x="786.57" y="655.5" ></text>
</g>
<g >
<title>_IO_padn (1 samples, 0.01%)</title><rect x="271.9" y="965" width="0.2" height="15.0" fill="rgb(251,158,36)" rx="2" ry="2" />
<text  x="274.90" y="975.5" ></text>
</g>
<g >
<title>ext4_file_getattr (3 samples, 0.04%)</title><rect x="834.5" y="613" width="0.5" height="15.0" fill="rgb(248,134,20)" rx="2" ry="2" />
<text  x="837.50" y="623.5" ></text>
</g>
<g >
<title>kfree (3 samples, 0.04%)</title><rect x="80.2" y="405" width="0.4" height="15.0" fill="rgb(251,3,4)" rx="2" ry="2" />
<text  x="83.16" y="415.5" ></text>
</g>
<g >
<title>muduo::MutexLock::isLockedByThisThread (1 samples, 0.01%)</title><rect x="341.9" y="517" width="0.2" height="15.0" fill="rgb(240,56,11)" rx="2" ry="2" />
<text  x="344.90" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="1126.5" y="693" width="0.3" height="15.0" fill="rgb(245,163,2)" rx="2" ry="2" />
<text  x="1129.47" y="703.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="337.9" y="469" width="0.1" height="15.0" fill="rgb(205,197,21)" rx="2" ry="2" />
<text  x="340.86" y="479.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="343.7" y="501" width="0.1" height="15.0" fill="rgb(232,210,52)" rx="2" ry="2" />
<text  x="346.68" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="338.8" y="517" width="0.2" height="15.0" fill="rgb(246,123,30)" rx="2" ry="2" />
<text  x="341.83" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;&gt; (1 samples, 0.01%)</title><rect x="69.8" y="725" width="0.2" height="15.0" fill="rgb(219,90,37)" rx="2" ry="2" />
<text  x="72.82" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (2 samples, 0.03%)</title><rect x="278.9" y="981" width="0.3" height="15.0" fill="rgb(229,115,46)" rx="2" ry="2" />
<text  x="281.85" y="991.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (6 samples, 0.08%)</title><rect x="370.2" y="757" width="1.0" height="15.0" fill="rgb(208,218,24)" rx="2" ry="2" />
<text  x="373.19" y="767.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="793.4" y="581" width="0.2" height="15.0" fill="rgb(232,59,36)" rx="2" ry="2" />
<text  x="796.43" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4 samples, 0.05%)</title><rect x="658.4" y="789" width="0.7" height="15.0" fill="rgb(232,177,25)" rx="2" ry="2" />
<text  x="661.44" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="247.3" y="565" width="0.2" height="15.0" fill="rgb(252,29,38)" rx="2" ry="2" />
<text  x="250.33" y="575.5" ></text>
</g>
<g >
<title>common_perm_cond (2 samples, 0.03%)</title><rect x="835.0" y="581" width="0.3" height="15.0" fill="rgb(206,206,25)" rx="2" ry="2" />
<text  x="837.98" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="137.6" y="565" width="0.1" height="15.0" fill="rgb(221,111,13)" rx="2" ry="2" />
<text  x="140.55" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="102.0" y="501" width="0.1" height="15.0" fill="rgb(222,208,34)" rx="2" ry="2" />
<text  x="104.99" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="342.7" y="469" width="0.5" height="15.0" fill="rgb(230,0,54)" rx="2" ry="2" />
<text  x="345.71" y="479.5" ></text>
</g>
<g >
<title>iov_iter_init (1 samples, 0.01%)</title><rect x="148.9" y="581" width="0.1" height="15.0" fill="rgb(222,3,36)" rx="2" ry="2" />
<text  x="151.87" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="24.9" y="933" width="0.1" height="15.0" fill="rgb(207,154,24)" rx="2" ry="2" />
<text  x="27.87" y="943.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (3 samples, 0.04%)</title><rect x="815.9" y="709" width="0.5" height="15.0" fill="rgb(213,128,30)" rx="2" ry="2" />
<text  x="818.90" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="504.7" y="725" width="0.2" height="15.0" fill="rgb(218,53,29)" rx="2" ry="2" />
<text  x="507.70" y="735.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="372.5" y="709" width="0.3" height="15.0" fill="rgb(252,42,15)" rx="2" ry="2" />
<text  x="375.46" y="719.5" ></text>
</g>
<g >
<title>netif_rx_internal (3 samples, 0.04%)</title><rect x="578.3" y="565" width="0.4" height="15.0" fill="rgb(246,69,16)" rx="2" ry="2" />
<text  x="581.26" y="575.5" ></text>
</g>
<g >
<title>std::swap&lt;char&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="533" width="0.2" height="15.0" fill="rgb(205,209,29)" rx="2" ry="2" />
<text  x="1190.41" y="543.5" ></text>
</g>
<g >
<title>kfree (2 samples, 0.03%)</title><rect x="910.5" y="309" width="0.3" height="15.0" fill="rgb(222,47,36)" rx="2" ry="2" />
<text  x="913.48" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="107.2" y="485" width="0.1" height="15.0" fill="rgb(217,80,44)" rx="2" ry="2" />
<text  x="110.16" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="485" width="0.2" height="15.0" fill="rgb(254,164,19)" rx="2" ry="2" />
<text  x="772.02" y="495.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="361.9" y="741" width="0.2" height="15.0" fill="rgb(216,133,53)" rx="2" ry="2" />
<text  x="364.95" y="751.5" ></text>
</g>
<g >
<title>netdev_pick_tx (2 samples, 0.03%)</title><rect x="579.5" y="613" width="0.4" height="15.0" fill="rgb(249,223,20)" rx="2" ry="2" />
<text  x="582.55" y="623.5" ></text>
</g>
<g >
<title>__inet_lookup_established (1 samples, 0.01%)</title><rect x="903.4" y="453" width="0.1" height="15.0" fill="rgb(214,19,31)" rx="2" ry="2" />
<text  x="906.37" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="1135.7" y="645" width="0.3" height="15.0" fill="rgb(227,104,31)" rx="2" ry="2" />
<text  x="1138.68" y="655.5" ></text>
</g>
<g >
<title>__GI___mempcpy (1 samples, 0.01%)</title><rect x="622.2" y="997" width="0.2" height="15.0" fill="rgb(251,22,1)" rx="2" ry="2" />
<text  x="625.23" y="1007.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="769.5" y="613" width="0.2" height="15.0" fill="rgb(238,150,27)" rx="2" ry="2" />
<text  x="772.51" y="623.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (2 samples, 0.03%)</title><rect x="372.5" y="693" width="0.3" height="15.0" fill="rgb(224,73,23)" rx="2" ry="2" />
<text  x="375.46" y="703.5" ></text>
</g>
<g >
<title>__slab_free (1 samples, 0.01%)</title><rect x="910.2" y="325" width="0.1" height="15.0" fill="rgb(217,79,17)" rx="2" ry="2" />
<text  x="913.16" y="335.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,135 samples, 15.55%)</title><rect x="659.3" y="805" width="183.4" height="15.0" fill="rgb(224,195,27)" rx="2" ry="2" />
<text  x="662.25" y="815.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>muduo::LogStream::~LogStream (1 samples, 0.01%)</title><rect x="87.9" y="629" width="0.2" height="15.0" fill="rgb(247,22,49)" rx="2" ry="2" />
<text  x="90.92" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="366.2" y="741" width="0.1" height="15.0" fill="rgb(232,83,37)" rx="2" ry="2" />
<text  x="369.15" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (3 samples, 0.04%)</title><rect x="788.6" y="645" width="0.5" height="15.0" fill="rgb(225,225,46)" rx="2" ry="2" />
<text  x="791.58" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="517" width="0.2" height="15.0" fill="rgb(210,32,54)" rx="2" ry="2" />
<text  x="1123.81" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1161.5" y="565" width="0.2" height="15.0" fill="rgb(218,229,20)" rx="2" ry="2" />
<text  x="1164.55" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="354.0" y="501" width="0.2" height="15.0" fill="rgb(249,138,11)" rx="2" ry="2" />
<text  x="357.03" y="511.5" ></text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.01%)</title><rect x="395.7" y="613" width="0.2" height="15.0" fill="rgb(212,164,3)" rx="2" ry="2" />
<text  x="398.74" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="619.8" y="933" width="0.2" height="15.0" fill="rgb(244,139,34)" rx="2" ry="2" />
<text  x="622.80" y="943.5" ></text>
</g>
<g >
<title>_IO_old_init (5 samples, 0.07%)</title><rect x="602.5" y="981" width="0.8" height="15.0" fill="rgb(237,167,41)" rx="2" ry="2" />
<text  x="605.51" y="991.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.01%)</title><rect x="337.4" y="101" width="0.1" height="15.0" fill="rgb(230,115,11)" rx="2" ry="2" />
<text  x="340.37" y="111.5" ></text>
</g>
<g >
<title>tcp_update_metrics (1 samples, 0.01%)</title><rect x="337.2" y="357" width="0.2" height="15.0" fill="rgb(250,48,32)" rx="2" ry="2" />
<text  x="340.21" y="367.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (17 samples, 0.23%)</title><rect x="346.3" y="549" width="2.7" height="15.0" fill="rgb(220,83,4)" rx="2" ry="2" />
<text  x="349.27" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (2 samples, 0.03%)</title><rect x="103.1" y="469" width="0.3" height="15.0" fill="rgb(227,167,1)" rx="2" ry="2" />
<text  x="106.12" y="479.5" ></text>
</g>
<g >
<title>strlen (4 samples, 0.05%)</title><rect x="280.3" y="981" width="0.7" height="15.0" fill="rgb(240,13,54)" rx="2" ry="2" />
<text  x="283.31" y="991.5" ></text>
</g>
<g >
<title>[libz.so.1.2.8] (69 samples, 0.95%)</title><rect x="875.2" y="997" width="11.2" height="15.0" fill="rgb(249,210,3)" rx="2" ry="2" />
<text  x="878.24" y="1007.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3 samples, 0.04%)</title><rect x="679.9" y="581" width="0.5" height="15.0" fill="rgb(251,6,20)" rx="2" ry="2" />
<text  x="682.94" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="354.5" y="453" width="0.2" height="15.0" fill="rgb(225,46,24)" rx="2" ry="2" />
<text  x="357.51" y="463.5" ></text>
</g>
<g >
<title>loopback_xmit (9 samples, 0.12%)</title><rect x="924.4" y="597" width="1.4" height="15.0" fill="rgb(245,99,13)" rx="2" ry="2" />
<text  x="927.38" y="607.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="682.4" y="645" width="0.1" height="15.0" fill="rgb(228,75,11)" rx="2" ry="2" />
<text  x="685.37" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl (2 samples, 0.03%)</title><rect x="1123.6" y="597" width="0.3" height="15.0" fill="rgb(219,181,6)" rx="2" ry="2" />
<text  x="1126.56" y="607.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.01%)</title><rect x="83.1" y="501" width="0.1" height="15.0" fill="rgb(232,116,3)" rx="2" ry="2" />
<text  x="86.07" y="511.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (54 samples, 0.74%)</title><rect x="912.1" y="373" width="8.7" height="15.0" fill="rgb(208,198,24)" rx="2" ry="2" />
<text  x="915.10" y="383.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;unsigned long&gt; (9 samples, 0.12%)</title><rect x="36.0" y="997" width="1.5" height="15.0" fill="rgb(242,21,43)" rx="2" ry="2" />
<text  x="39.03" y="1007.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.01%)</title><rect x="99.6" y="533" width="0.1" height="15.0" fill="rgb(246,212,25)" rx="2" ry="2" />
<text  x="102.56" y="543.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&gt; (3 samples, 0.04%)</title><rect x="340.0" y="533" width="0.4" height="15.0" fill="rgb(222,1,11)" rx="2" ry="2" />
<text  x="342.96" y="543.5" ></text>
</g>
<g >
<title>path_init (5 samples, 0.07%)</title><rect x="829.3" y="581" width="0.8" height="15.0" fill="rgb(219,206,31)" rx="2" ry="2" />
<text  x="832.32" y="591.5" ></text>
</g>
<g >
<title>std::locale::operator= (1 samples, 0.01%)</title><rect x="279.8" y="981" width="0.2" height="15.0" fill="rgb(240,94,34)" rx="2" ry="2" />
<text  x="282.82" y="991.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1 samples, 0.01%)</title><rect x="337.7" y="421" width="0.2" height="15.0" fill="rgb(227,160,43)" rx="2" ry="2" />
<text  x="340.70" y="431.5" ></text>
</g>
<g >
<title>apparmor_file_permission (2 samples, 0.03%)</title><rect x="874.8" y="885" width="0.3" height="15.0" fill="rgb(224,41,38)" rx="2" ry="2" />
<text  x="877.75" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (2 samples, 0.03%)</title><rect x="810.7" y="709" width="0.4" height="15.0" fill="rgb(214,53,35)" rx="2" ry="2" />
<text  x="813.73" y="719.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.01%)</title><rect x="479.2" y="101" width="0.1" height="15.0" fill="rgb(213,68,11)" rx="2" ry="2" />
<text  x="482.15" y="111.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (4 samples, 0.05%)</title><rect x="341.1" y="533" width="0.6" height="15.0" fill="rgb(239,13,44)" rx="2" ry="2" />
<text  x="344.09" y="543.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.01%)</title><rect x="151.1" y="501" width="0.2" height="15.0" fill="rgb(243,194,11)" rx="2" ry="2" />
<text  x="154.13" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (639 samples, 8.75%)</title><rect x="385.1" y="725" width="103.3" height="15.0" fill="rgb(213,36,45)" rx="2" ry="2" />
<text  x="388.07" y="735.5" >std::__invok..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="318.9" y="741" width="0.2" height="15.0" fill="rgb(244,143,54)" rx="2" ry="2" />
<text  x="321.94" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (3 samples, 0.04%)</title><rect x="620.5" y="981" width="0.4" height="15.0" fill="rgb(214,41,20)" rx="2" ry="2" />
<text  x="623.45" y="991.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="370.2" y="741" width="0.2" height="15.0" fill="rgb(225,189,17)" rx="2" ry="2" />
<text  x="373.19" y="751.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (6 samples, 0.08%)</title><rect x="688.2" y="581" width="1.0" height="15.0" fill="rgb(220,103,45)" rx="2" ry="2" />
<text  x="691.19" y="591.5" ></text>
</g>
<g >
<title>__errno_location (3 samples, 0.04%)</title><rect x="1143.0" y="709" width="0.4" height="15.0" fill="rgb(222,72,10)" rx="2" ry="2" />
<text  x="1145.96" y="719.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="85.3" y="517" width="0.2" height="15.0" fill="rgb(239,89,30)" rx="2" ry="2" />
<text  x="88.34" y="527.5" ></text>
</g>
<g >
<title>muduo::Logger::SourceFile::SourceFile&lt;47&gt; (2 samples, 0.03%)</title><rect x="60.8" y="821" width="0.3" height="15.0" fill="rgb(232,15,9)" rx="2" ry="2" />
<text  x="63.76" y="831.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;@plt (1 samples, 0.01%)</title><rect x="268.0" y="965" width="0.2" height="15.0" fill="rgb(249,23,30)" rx="2" ry="2" />
<text  x="271.02" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.2" y="581" width="0.2" height="15.0" fill="rgb(222,130,40)" rx="2" ry="2" />
<text  x="1122.19" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (8 samples, 0.11%)</title><rect x="342.5" y="549" width="1.3" height="15.0" fill="rgb(219,19,7)" rx="2" ry="2" />
<text  x="345.55" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.04%)</title><rect x="806.7" y="645" width="0.5" height="15.0" fill="rgb(217,224,45)" rx="2" ry="2" />
<text  x="809.69" y="655.5" ></text>
</g>
<g >
<title>tcp_push (186 samples, 2.55%)</title><rect x="552.9" y="789" width="30.0" height="15.0" fill="rgb(213,166,12)" rx="2" ry="2" />
<text  x="555.87" y="799.5" >tc..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="265.3" y="917" width="0.1" height="15.0" fill="rgb(244,189,37)" rx="2" ry="2" />
<text  x="268.27" y="927.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="771.0" y="645" width="0.1" height="15.0" fill="rgb(225,142,47)" rx="2" ry="2" />
<text  x="773.96" y="655.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (9 samples, 0.12%)</title><rect x="11.0" y="773" width="1.4" height="15.0" fill="rgb(221,92,38)" rx="2" ry="2" />
<text  x="13.97" y="783.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="1127.9" y="645" width="0.2" height="15.0" fill="rgb(244,89,4)" rx="2" ry="2" />
<text  x="1130.92" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6 samples, 0.08%)</title><rect x="994.9" y="645" width="0.9" height="15.0" fill="rgb(246,74,8)" rx="2" ry="2" />
<text  x="997.87" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="663.5" y="645" width="0.1" height="15.0" fill="rgb(218,120,3)" rx="2" ry="2" />
<text  x="666.45" y="655.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 0.01%)</title><rect x="778.7" y="581" width="0.2" height="15.0" fill="rgb(246,137,14)" rx="2" ry="2" />
<text  x="781.72" y="591.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="271.3" y="965" width="0.1" height="15.0" fill="rgb(229,178,12)" rx="2" ry="2" />
<text  x="274.25" y="975.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="385.2" y="533" width="0.2" height="15.0" fill="rgb(223,132,19)" rx="2" ry="2" />
<text  x="388.23" y="543.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (4 samples, 0.05%)</title><rect x="12.9" y="789" width="0.7" height="15.0" fill="rgb(247,115,37)" rx="2" ry="2" />
<text  x="15.91" y="799.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="548.5" y="805" width="0.5" height="15.0" fill="rgb(254,78,44)" rx="2" ry="2" />
<text  x="551.51" y="815.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.01%)</title><rect x="922.6" y="485" width="0.2" height="15.0" fill="rgb(220,114,29)" rx="2" ry="2" />
<text  x="925.60" y="495.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="667.8" y="677" width="0.2" height="15.0" fill="rgb(215,219,35)" rx="2" ry="2" />
<text  x="670.82" y="687.5" ></text>
</g>
<g >
<title>schedule (45 samples, 0.62%)</title><rect x="140.0" y="613" width="7.3" height="15.0" fill="rgb(233,106,22)" rx="2" ry="2" />
<text  x="142.98" y="623.5" ></text>
</g>
<g >
<title>_int_free (29 samples, 0.40%)</title><rect x="949.6" y="981" width="4.7" height="15.0" fill="rgb(213,62,39)" rx="2" ry="2" />
<text  x="952.60" y="991.5" ></text>
</g>
<g >
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="414.2" y="101" width="0.4" height="15.0" fill="rgb(228,138,8)" rx="2" ry="2" />
<text  x="417.16" y="111.5" ></text>
</g>
<g >
<title>muduo::MutexLock::lock (1 samples, 0.01%)</title><rect x="126.1" y="757" width="0.1" height="15.0" fill="rgb(245,64,17)" rx="2" ry="2" />
<text  x="129.08" y="767.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="315.2" y="741" width="0.3" height="15.0" fill="rgb(218,206,33)" rx="2" ry="2" />
<text  x="318.23" y="751.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (1 samples, 0.01%)</title><rect x="903.7" y="453" width="0.2" height="15.0" fill="rgb(238,55,36)" rx="2" ry="2" />
<text  x="906.69" y="463.5" ></text>
</g>
<g >
<title>inet_sendmsg (225 samples, 3.08%)</title><rect x="548.2" y="837" width="36.4" height="15.0" fill="rgb(232,30,21)" rx="2" ry="2" />
<text  x="551.19" y="847.5" >ine..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (274 samples, 3.75%)</title><rect x="69.3" y="773" width="44.3" height="15.0" fill="rgb(226,66,32)" rx="2" ry="2" />
<text  x="72.33" y="783.5" >std:..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="674.0" y="597" width="0.3" height="15.0" fill="rgb(226,46,3)" rx="2" ry="2" />
<text  x="676.96" y="607.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="948.8" y="853" width="0.2" height="15.0" fill="rgb(245,176,43)" rx="2" ry="2" />
<text  x="951.79" y="863.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="673.5" y="597" width="0.1" height="15.0" fill="rgb(222,91,46)" rx="2" ry="2" />
<text  x="676.48" y="607.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="245.9" y="677" width="0.1" height="15.0" fill="rgb(209,172,10)" rx="2" ry="2" />
<text  x="248.87" y="687.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (112 samples, 1.53%)</title><rect x="558.0" y="469" width="18.2" height="15.0" fill="rgb(244,8,25)" rx="2" ry="2" />
<text  x="561.05" y="479.5" ></text>
</g>
<g >
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="549.2" y="805" width="0.3" height="15.0" fill="rgb(226,226,4)" rx="2" ry="2" />
<text  x="552.16" y="815.5" ></text>
</g>
<g >
<title>common_file_perm (3 samples, 0.04%)</title><rect x="532.3" y="869" width="0.5" height="15.0" fill="rgb(248,127,43)" rx="2" ry="2" />
<text  x="535.34" y="879.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1013.6" y="581" width="0.2" height="15.0" fill="rgb(210,181,14)" rx="2" ry="2" />
<text  x="1016.62" y="591.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="94.1" y="501" width="0.1" height="15.0" fill="rgb(224,40,3)" rx="2" ry="2" />
<text  x="97.07" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12 samples, 0.16%)</title><rect x="1124.0" y="661" width="2.0" height="15.0" fill="rgb(238,72,39)" rx="2" ry="2" />
<text  x="1127.04" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="774.7" y="677" width="0.1" height="15.0" fill="rgb(244,10,20)" rx="2" ry="2" />
<text  x="777.68" y="687.5" ></text>
</g>
<g >
<title>lookup_fast (4 samples, 0.05%)</title><rect x="830.3" y="565" width="0.6" height="15.0" fill="rgb(214,163,54)" rx="2" ry="2" />
<text  x="833.29" y="575.5" ></text>
</g>
<g >
<title>redisBufferRead (2 samples, 0.03%)</title><rect x="651.3" y="997" width="0.4" height="15.0" fill="rgb(221,124,49)" rx="2" ry="2" />
<text  x="654.33" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="1136.0" y="677" width="0.3" height="15.0" fill="rgb(245,204,42)" rx="2" ry="2" />
<text  x="1139.00" y="687.5" ></text>
</g>
<g >
<title>apparmor_file_permission (5 samples, 0.07%)</title><rect x="84.5" y="517" width="0.8" height="15.0" fill="rgb(216,203,36)" rx="2" ry="2" />
<text  x="87.53" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;muduo::net::Channel**&gt; (1 samples, 0.01%)</title><rect x="504.5" y="773" width="0.2" height="15.0" fill="rgb(208,16,35)" rx="2" ry="2" />
<text  x="507.54" y="783.5" ></text>
</g>
<g >
<title>dst_release (1 samples, 0.01%)</title><rect x="907.4" y="405" width="0.2" height="15.0" fill="rgb(222,90,26)" rx="2" ry="2" />
<text  x="910.41" y="415.5" ></text>
</g>
<g >
<title>common_perm_cond (4 samples, 0.05%)</title><rect x="1176.6" y="581" width="0.6" height="15.0" fill="rgb(218,139,15)" rx="2" ry="2" />
<text  x="1179.58" y="591.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="248.0" y="741" width="0.1" height="15.0" fill="rgb(226,211,22)" rx="2" ry="2" />
<text  x="250.97" y="751.5" ></text>
</g>
<g >
<title>strcpy@plt (1 samples, 0.01%)</title><rect x="841.3" y="725" width="0.1" height="15.0" fill="rgb(254,19,45)" rx="2" ry="2" />
<text  x="844.29" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="128.0" y="741" width="0.2" height="15.0" fill="rgb(212,111,29)" rx="2" ry="2" />
<text  x="131.02" y="751.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (10 samples, 0.14%)</title><rect x="347.4" y="517" width="1.6" height="15.0" fill="rgb(236,98,28)" rx="2" ry="2" />
<text  x="350.40" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="360.2" y="805" width="0.1" height="15.0" fill="rgb(209,144,2)" rx="2" ry="2" />
<text  x="363.17" y="815.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1016.0" y="613" width="0.2" height="15.0" fill="rgb(238,59,3)" rx="2" ry="2" />
<text  x="1019.05" y="623.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.43 (4 samples, 0.05%)</title><rect x="154.5" y="453" width="0.7" height="15.0" fill="rgb(239,197,47)" rx="2" ry="2" />
<text  x="157.53" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_M_head (1 samples, 0.01%)</title><rect x="348.7" y="453" width="0.2" height="15.0" fill="rgb(239,1,11)" rx="2" ry="2" />
<text  x="351.69" y="463.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="22.3" y="965" width="0.1" height="15.0" fill="rgb(207,69,38)" rx="2" ry="2" />
<text  x="25.29" y="975.5" ></text>
</g>
<g >
<title>inet_csk_destroy_sock (1 samples, 0.01%)</title><rect x="997.8" y="373" width="0.1" height="15.0" fill="rgb(235,28,43)" rx="2" ry="2" />
<text  x="1000.78" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="994.5" y="773" width="0.2" height="15.0" fill="rgb(225,106,26)" rx="2" ry="2" />
<text  x="997.55" y="783.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="316.8" y="693" width="0.2" height="15.0" fill="rgb(225,114,3)" rx="2" ry="2" />
<text  x="319.84" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (1 samples, 0.01%)</title><rect x="1180.3" y="725" width="0.2" height="15.0" fill="rgb(246,218,4)" rx="2" ry="2" />
<text  x="1183.30" y="735.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (2 samples, 0.03%)</title><rect x="117.0" y="789" width="0.3" height="15.0" fill="rgb(218,203,27)" rx="2" ry="2" />
<text  x="120.02" y="799.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (2 samples, 0.03%)</title><rect x="12.6" y="789" width="0.3" height="15.0" fill="rgb(234,122,5)" rx="2" ry="2" />
<text  x="15.59" y="799.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="68.4" y="741" width="0.1" height="15.0" fill="rgb(214,81,12)" rx="2" ry="2" />
<text  x="71.36" y="751.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (1 samples, 0.01%)</title><rect x="385.2" y="613" width="0.2" height="15.0" fill="rgb(250,205,20)" rx="2" ry="2" />
<text  x="388.23" y="623.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (8 samples, 0.11%)</title><rect x="67.1" y="757" width="1.3" height="15.0" fill="rgb(237,1,22)" rx="2" ry="2" />
<text  x="70.07" y="767.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="1117.3" y="437" width="0.1" height="15.0" fill="rgb(216,165,41)" rx="2" ry="2" />
<text  x="1120.25" y="447.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::append (21 samples, 0.29%)</title><rect x="1017.7" y="693" width="3.4" height="15.0" fill="rgb(221,3,46)" rx="2" ry="2" />
<text  x="1020.66" y="703.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="12.6" y="741" width="0.1" height="15.0" fill="rgb(232,85,7)" rx="2" ry="2" />
<text  x="15.59" y="751.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="780.5" y="629" width="0.2" height="15.0" fill="rgb(247,50,23)" rx="2" ry="2" />
<text  x="783.50" y="639.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (1 samples, 0.01%)</title><rect x="310.5" y="821" width="0.2" height="15.0" fill="rgb(242,225,21)" rx="2" ry="2" />
<text  x="313.54" y="831.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (4 samples, 0.05%)</title><rect x="14.8" y="949" width="0.7" height="15.0" fill="rgb(237,83,44)" rx="2" ry="2" />
<text  x="17.85" y="959.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6 samples, 0.08%)</title><rect x="786.8" y="597" width="1.0" height="15.0" fill="rgb(208,84,26)" rx="2" ry="2" />
<text  x="789.81" y="607.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="667.7" y="645" width="0.1" height="15.0" fill="rgb(214,117,53)" rx="2" ry="2" />
<text  x="670.66" y="655.5" ></text>
</g>
<g >
<title>inet_recvmsg (29 samples, 0.40%)</title><rect x="78.4" y="501" width="4.7" height="15.0" fill="rgb(247,118,31)" rx="2" ry="2" />
<text  x="81.38" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="130.9" y="709" width="0.2" height="15.0" fill="rgb(250,186,33)" rx="2" ry="2" />
<text  x="133.93" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl&lt;StaticServer*, std::_Placeholder&lt;1&gt; const&amp;, void&gt; (1 samples, 0.01%)</title><rect x="97.3" y="533" width="0.2" height="15.0" fill="rgb(237,205,36)" rx="2" ry="2" />
<text  x="100.30" y="543.5" ></text>
</g>
<g >
<title>__copy_skb_header (1 samples, 0.01%)</title><rect x="482.1" y="389" width="0.1" height="15.0" fill="rgb(254,69,3)" rx="2" ry="2" />
<text  x="485.06" y="399.5" ></text>
</g>
<g >
<title>tcp_v4_send_check (1 samples, 0.01%)</title><rect x="926.6" y="725" width="0.2" height="15.0" fill="rgb(208,113,40)" rx="2" ry="2" />
<text  x="929.65" y="735.5" ></text>
</g>
<g >
<title>vfs_read (8 samples, 0.11%)</title><rect x="323.0" y="613" width="1.3" height="15.0" fill="rgb(239,150,34)" rx="2" ry="2" />
<text  x="325.99" y="623.5" ></text>
</g>
<g >
<title>cp_new_stat (4 samples, 0.05%)</title><rect x="1167.0" y="645" width="0.7" height="15.0" fill="rgb(223,14,21)" rx="2" ry="2" />
<text  x="1170.04" y="655.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="35.2" y="981" width="0.2" height="15.0" fill="rgb(229,118,9)" rx="2" ry="2" />
<text  x="38.22" y="991.5" ></text>
</g>
<g >
<title>process_backlog (458 samples, 6.27%)</title><rect x="160.8" y="261" width="74.1" height="15.0" fill="rgb(248,113,42)" rx="2" ry="2" />
<text  x="163.83" y="271.5" >process_..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (234 samples, 3.21%)</title><rect x="320.6" y="709" width="37.8" height="15.0" fill="rgb(254,57,0)" rx="2" ry="2" />
<text  x="323.56" y="719.5" >std..</text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.01%)</title><rect x="560.0" y="437" width="0.1" height="15.0" fill="rgb(242,111,40)" rx="2" ry="2" />
<text  x="562.99" y="447.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (4 samples, 0.05%)</title><rect x="1174.2" y="597" width="0.6" height="15.0" fill="rgb(228,149,51)" rx="2" ry="2" />
<text  x="1177.16" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="130.9" y="725" width="0.2" height="15.0" fill="rgb(232,93,3)" rx="2" ry="2" />
<text  x="133.93" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::get (1 samples, 0.01%)</title><rect x="504.2" y="805" width="0.2" height="15.0" fill="rgb(212,86,8)" rx="2" ry="2" />
<text  x="507.21" y="815.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.01%)</title><rect x="337.4" y="309" width="0.1" height="15.0" fill="rgb(233,92,45)" rx="2" ry="2" />
<text  x="340.37" y="319.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="496.5" y="677" width="0.1" height="15.0" fill="rgb(242,173,19)" rx="2" ry="2" />
<text  x="499.45" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="671.9" y="613" width="0.1" height="15.0" fill="rgb(220,62,4)" rx="2" ry="2" />
<text  x="674.86" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="658.8" y="533" width="0.1" height="15.0" fill="rgb(229,65,10)" rx="2" ry="2" />
<text  x="661.77" y="543.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="493.5" y="789" width="0.2" height="15.0" fill="rgb(235,63,47)" rx="2" ry="2" />
<text  x="496.54" y="799.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="682.9" y="581" width="0.1" height="15.0" fill="rgb(236,184,13)" rx="2" ry="2" />
<text  x="685.85" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="773.1" y="581" width="0.1" height="15.0" fill="rgb(218,115,49)" rx="2" ry="2" />
<text  x="776.06" y="591.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.01%)</title><rect x="337.2" y="421" width="0.2" height="15.0" fill="rgb(230,112,54)" rx="2" ry="2" />
<text  x="340.21" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="66.4" y="757" width="0.2" height="15.0" fill="rgb(245,114,9)" rx="2" ry="2" />
<text  x="69.42" y="767.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3 samples, 0.04%)</title><rect x="349.0" y="549" width="0.5" height="15.0" fill="rgb(226,200,39)" rx="2" ry="2" />
<text  x="352.01" y="559.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (198 samples, 2.71%)</title><rect x="896.1" y="773" width="32.0" height="15.0" fill="rgb(223,144,5)" rx="2" ry="2" />
<text  x="899.09" y="783.5" >__..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="838.1" y="709" width="0.1" height="15.0" fill="rgb(230,52,32)" rx="2" ry="2" />
<text  x="841.05" y="719.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="780.8" y="693" width="0.2" height="15.0" fill="rgb(231,137,34)" rx="2" ry="2" />
<text  x="783.82" y="703.5" ></text>
</g>
<g >
<title>walk_component (5 samples, 0.07%)</title><rect x="830.1" y="581" width="0.8" height="15.0" fill="rgb(243,41,45)" rx="2" ry="2" />
<text  x="833.13" y="591.5" ></text>
</g>
<g >
<title>rw_verify_area (3 samples, 0.04%)</title><rect x="323.8" y="597" width="0.5" height="15.0" fill="rgb(225,168,23)" rx="2" ry="2" />
<text  x="326.79" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2 samples, 0.03%)</title><rect x="1138.8" y="597" width="0.3" height="15.0" fill="rgb(245,222,39)" rx="2" ry="2" />
<text  x="1141.75" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1 samples, 0.01%)</title><rect x="1160.4" y="629" width="0.2" height="15.0" fill="rgb(222,17,45)" rx="2" ry="2" />
<text  x="1163.42" y="639.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::removeChannel (1 samples, 0.01%)</title><rect x="385.1" y="661" width="0.1" height="15.0" fill="rgb(208,97,33)" rx="2" ry="2" />
<text  x="388.07" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (70 samples, 0.96%)</title><rect x="75.3" y="629" width="11.3" height="15.0" fill="rgb(211,96,53)" rx="2" ry="2" />
<text  x="78.31" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (28 samples, 0.38%)</title><rect x="125.3" y="805" width="4.5" height="15.0" fill="rgb(207,25,45)" rx="2" ry="2" />
<text  x="128.27" y="815.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="503.1" y="773" width="0.1" height="15.0" fill="rgb(229,65,35)" rx="2" ry="2" />
<text  x="506.08" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1 samples, 0.01%)</title><rect x="843.7" y="997" width="0.2" height="15.0" fill="rgb(251,152,9)" rx="2" ry="2" />
<text  x="846.71" y="1007.5" ></text>
</g>
<g >
<title>muduo::Logger::logLevel (1 samples, 0.01%)</title><rect x="315.9" y="789" width="0.1" height="15.0" fill="rgb(227,21,20)" rx="2" ry="2" />
<text  x="318.87" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Socket, std::default_delete&lt;muduo::net::Socket&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="658.8" y="597" width="0.1" height="15.0" fill="rgb(233,99,17)" rx="2" ry="2" />
<text  x="661.77" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="113.1" y="757" width="0.5" height="15.0" fill="rgb(241,116,21)" rx="2" ry="2" />
<text  x="116.14" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1156.1" y="693" width="0.1" height="15.0" fill="rgb(245,161,50)" rx="2" ry="2" />
<text  x="1159.05" y="703.5" ></text>
</g>
<g >
<title>__errno_location@plt (1 samples, 0.01%)</title><rect x="59.6" y="821" width="0.2" height="15.0" fill="rgb(252,12,48)" rx="2" ry="2" />
<text  x="62.63" y="831.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="769.7" y="661" width="0.3" height="15.0" fill="rgb(213,51,21)" rx="2" ry="2" />
<text  x="772.67" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3 samples, 0.04%)</title><rect x="1141.0" y="645" width="0.5" height="15.0" fill="rgb(242,133,9)" rx="2" ry="2" />
<text  x="1144.02" y="655.5" ></text>
</g>
<g >
<title>apparmor_file_permission (4 samples, 0.05%)</title><rect x="486.1" y="565" width="0.7" height="15.0" fill="rgb(226,60,24)" rx="2" ry="2" />
<text  x="489.11" y="575.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (4 samples, 0.05%)</title><rect x="64.5" y="757" width="0.6" height="15.0" fill="rgb(211,62,1)" rx="2" ry="2" />
<text  x="67.48" y="767.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::send (621 samples, 8.51%)</title><rect x="1023.6" y="693" width="100.4" height="15.0" fill="rgb(230,17,49)" rx="2" ry="2" />
<text  x="1026.65" y="703.5" >muduo::net::..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1183.2" y="709" width="0.2" height="15.0" fill="rgb(214,74,10)" rx="2" ry="2" />
<text  x="1186.21" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (4 samples, 0.05%)</title><rect x="796.0" y="677" width="0.7" height="15.0" fill="rgb(254,105,33)" rx="2" ry="2" />
<text  x="799.02" y="687.5" ></text>
</g>
<g >
<title>security_file_permission (4 samples, 0.05%)</title><rect x="532.3" y="901" width="0.7" height="15.0" fill="rgb(216,118,50)" rx="2" ry="2" />
<text  x="535.34" y="911.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="493.5" y="805" width="0.4" height="15.0" fill="rgb(250,32,19)" rx="2" ry="2" />
<text  x="496.54" y="815.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1117.3" y="549" width="0.1" height="15.0" fill="rgb(242,2,47)" rx="2" ry="2" />
<text  x="1120.25" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="636.9" y="949" width="0.2" height="15.0" fill="rgb(224,199,49)" rx="2" ry="2" />
<text  x="639.94" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,354 samples, 18.55%)</title><rect x="286.8" y="917" width="218.9" height="15.0" fill="rgb(230,160,40)" rx="2" ry="2" />
<text  x="289.77" y="927.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="813.8" y="677" width="0.2" height="15.0" fill="rgb(205,74,31)" rx="2" ry="2" />
<text  x="816.80" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="344.3" y="501" width="0.2" height="15.0" fill="rgb(219,89,12)" rx="2" ry="2" />
<text  x="347.33" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.01%)</title><rect x="500.0" y="789" width="0.2" height="15.0" fill="rgb(252,153,46)" rx="2" ry="2" />
<text  x="503.01" y="799.5" ></text>
</g>
<g >
<title>muduo::net::InetAddress::toIpPort[abi:cxx11] (1 samples, 0.01%)</title><rect x="337.7" y="389" width="0.2" height="15.0" fill="rgb(205,4,31)" rx="2" ry="2" />
<text  x="340.70" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (3 samples, 0.04%)</title><rect x="815.9" y="693" width="0.5" height="15.0" fill="rgb(238,129,45)" rx="2" ry="2" />
<text  x="818.90" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="1145.5" y="629" width="0.2" height="15.0" fill="rgb(210,125,29)" rx="2" ry="2" />
<text  x="1148.54" y="639.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (26 samples, 0.36%)</title><rect x="369.7" y="805" width="4.2" height="15.0" fill="rgb(220,183,18)" rx="2" ry="2" />
<text  x="372.71" y="815.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="123.8" y="741" width="0.2" height="15.0" fill="rgb(252,211,24)" rx="2" ry="2" />
<text  x="126.81" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (2 samples, 0.03%)</title><rect x="343.2" y="485" width="0.3" height="15.0" fill="rgb(246,3,51)" rx="2" ry="2" />
<text  x="346.19" y="495.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="492.7" y="773" width="0.4" height="15.0" fill="rgb(240,37,41)" rx="2" ry="2" />
<text  x="495.73" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.03%)</title><rect x="1181.9" y="725" width="0.3" height="15.0" fill="rgb(235,51,34)" rx="2" ry="2" />
<text  x="1184.92" y="735.5" ></text>
</g>
<g >
<title>__errno_location (4 samples, 0.05%)</title><rect x="308.9" y="821" width="0.7" height="15.0" fill="rgb(234,17,54)" rx="2" ry="2" />
<text  x="311.92" y="831.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::connectDestroyed (1 samples, 0.01%)</title><rect x="385.1" y="709" width="0.1" height="15.0" fill="rgb(244,19,35)" rx="2" ry="2" />
<text  x="388.07" y="719.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="363.7" y="693" width="0.2" height="15.0" fill="rgb(232,83,47)" rx="2" ry="2" />
<text  x="366.73" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="252.0" y="773" width="0.2" height="15.0" fill="rgb(229,229,53)" rx="2" ry="2" />
<text  x="255.01" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (8 samples, 0.11%)</title><rect x="885.1" y="949" width="1.3" height="15.0" fill="rgb(236,142,38)" rx="2" ry="2" />
<text  x="888.10" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.01%)</title><rect x="353.5" y="469" width="0.2" height="15.0" fill="rgb(233,174,13)" rx="2" ry="2" />
<text  x="356.54" y="479.5" ></text>
</g>
<g >
<title>__tcp_get_metrics (1 samples, 0.01%)</title><rect x="337.2" y="325" width="0.2" height="15.0" fill="rgb(226,86,1)" rx="2" ry="2" />
<text  x="340.21" y="335.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (113 samples, 1.55%)</title><rect x="338.8" y="629" width="18.3" height="15.0" fill="rgb(212,68,28)" rx="2" ry="2" />
<text  x="341.83" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::Timestamp&amp;&amp;&gt;::tuple&lt;muduo::Timestamp, true&gt; (2 samples, 0.03%)</title><rect x="359.0" y="741" width="0.4" height="15.0" fill="rgb(254,32,35)" rx="2" ry="2" />
<text  x="362.04" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="784.4" y="677" width="0.3" height="15.0" fill="rgb(253,62,15)" rx="2" ry="2" />
<text  x="787.38" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="836.8" y="709" width="0.3" height="15.0" fill="rgb(247,64,10)" rx="2" ry="2" />
<text  x="839.76" y="719.5" ></text>
</g>
<g >
<title>std::swap&lt;char&gt; (1 samples, 0.01%)</title><rect x="675.4" y="565" width="0.2" height="15.0" fill="rgb(253,81,7)" rx="2" ry="2" />
<text  x="678.42" y="575.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="118.3" y="789" width="0.2" height="15.0" fill="rgb(239,69,13)" rx="2" ry="2" />
<text  x="121.32" y="799.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="402.5" y="437" width="0.2" height="15.0" fill="rgb(231,162,37)" rx="2" ry="2" />
<text  x="405.53" y="447.5" ></text>
</g>
<g >
<title>select_estimate_accuracy.part.8 (1 samples, 0.01%)</title><rect x="308.0" y="741" width="0.1" height="15.0" fill="rgb(229,149,15)" rx="2" ry="2" />
<text  x="310.95" y="751.5" ></text>
</g>
<g >
<title>asyncOutput (5 samples, 0.07%)</title><rect x="252.5" y="789" width="0.8" height="15.0" fill="rgb(246,124,10)" rx="2" ry="2" />
<text  x="255.50" y="799.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.01%)</title><rect x="279.2" y="933" width="0.1" height="15.0" fill="rgb(235,65,48)" rx="2" ry="2" />
<text  x="282.17" y="943.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (3 samples, 0.04%)</title><rect x="1144.9" y="645" width="0.5" height="15.0" fill="rgb(220,108,43)" rx="2" ry="2" />
<text  x="1147.90" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="681.7" y="613" width="0.2" height="15.0" fill="rgb(228,229,34)" rx="2" ry="2" />
<text  x="684.72" y="623.5" ></text>
</g>
<g >
<title>getname_flags (10 samples, 0.14%)</title><rect x="1174.0" y="613" width="1.6" height="15.0" fill="rgb(247,69,31)" rx="2" ry="2" />
<text  x="1177.00" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.03%)</title><rect x="838.4" y="725" width="0.3" height="15.0" fill="rgb(228,124,53)" rx="2" ry="2" />
<text  x="841.38" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (6 samples, 0.08%)</title><rect x="817.2" y="693" width="1.0" height="15.0" fill="rgb(226,211,5)" rx="2" ry="2" />
<text  x="820.20" y="703.5" ></text>
</g>
<g >
<title>vmware_sched_clock (1 samples, 0.01%)</title><rect x="82.9" y="437" width="0.2" height="15.0" fill="rgb(241,78,43)" rx="2" ry="2" />
<text  x="85.91" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1005.9" y="661" width="0.1" height="15.0" fill="rgb(251,161,33)" rx="2" ry="2" />
<text  x="1008.86" y="671.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.03%)</title><rect x="12.1" y="757" width="0.3" height="15.0" fill="rgb(241,24,46)" rx="2" ry="2" />
<text  x="15.10" y="767.5" ></text>
</g>
<g >
<title>kfree_skbmem (6 samples, 0.08%)</title><rect x="78.9" y="453" width="0.9" height="15.0" fill="rgb(206,12,37)" rx="2" ry="2" />
<text  x="81.87" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::get (3 samples, 0.04%)</title><rect x="1015.7" y="629" width="0.5" height="15.0" fill="rgb(244,224,40)" rx="2" ry="2" />
<text  x="1018.72" y="639.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.01%)</title><rect x="235.2" y="293" width="0.2" height="15.0" fill="rgb(253,45,38)" rx="2" ry="2" />
<text  x="238.20" y="303.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (1 samples, 0.01%)</title><rect x="12.4" y="757" width="0.2" height="15.0" fill="rgb(206,206,37)" rx="2" ry="2" />
<text  x="15.42" y="767.5" ></text>
</g>
<g >
<title>[libc-2.23.so] (1 samples, 0.01%)</title><rect x="1186.6" y="933" width="0.2" height="15.0" fill="rgb(227,85,11)" rx="2" ry="2" />
<text  x="1189.61" y="943.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::writableBytes (1 samples, 0.01%)</title><rect x="1018.1" y="645" width="0.2" height="15.0" fill="rgb(242,19,41)" rx="2" ry="2" />
<text  x="1021.15" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (6 samples, 0.08%)</title><rect x="246.4" y="613" width="0.9" height="15.0" fill="rgb(238,135,50)" rx="2" ry="2" />
<text  x="249.36" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="1158.5" y="661" width="0.1" height="15.0" fill="rgb(205,174,6)" rx="2" ry="2" />
<text  x="1161.48" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="770.0" y="645" width="0.2" height="15.0" fill="rgb(250,42,33)" rx="2" ry="2" />
<text  x="772.99" y="655.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::begin (1 samples, 0.01%)</title><rect x="1148.9" y="677" width="0.2" height="15.0" fill="rgb(246,149,34)" rx="2" ry="2" />
<text  x="1151.94" y="687.5" ></text>
</g>
<g >
<title>[libhiredis.so.0.13] (1 samples, 0.01%)</title><rect x="663.5" y="693" width="0.1" height="15.0" fill="rgb(241,88,4)" rx="2" ry="2" />
<text  x="666.45" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (6 samples, 0.08%)</title><rect x="94.4" y="549" width="1.0" height="15.0" fill="rgb(235,174,50)" rx="2" ry="2" />
<text  x="97.39" y="559.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (1 samples, 0.01%)</title><rect x="579.1" y="597" width="0.1" height="15.0" fill="rgb(247,159,27)" rx="2" ry="2" />
<text  x="582.06" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::net::Buffer*&gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="101.0" y="453" width="0.2" height="15.0" fill="rgb(223,34,30)" rx="2" ry="2" />
<text  x="104.02" y="463.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.01%)</title><rect x="850.3" y="693" width="0.2" height="15.0" fill="rgb(208,40,12)" rx="2" ry="2" />
<text  x="853.34" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::stream (1 samples, 0.01%)</title><rect x="252.3" y="805" width="0.2" height="15.0" fill="rgb(246,54,29)" rx="2" ry="2" />
<text  x="255.34" y="815.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="658.4" y="597" width="0.4" height="15.0" fill="rgb(209,143,0)" rx="2" ry="2" />
<text  x="661.44" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.10%)</title><rect x="790.4" y="661" width="1.1" height="15.0" fill="rgb(210,100,42)" rx="2" ry="2" />
<text  x="793.36" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="806.4" y="645" width="0.1" height="15.0" fill="rgb(205,185,41)" rx="2" ry="2" />
<text  x="809.37" y="655.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (272 samples, 3.73%)</title><rect x="886.6" y="981" width="43.9" height="15.0" fill="rgb(242,20,43)" rx="2" ry="2" />
<text  x="889.55" y="991.5" >[lib..</text>
</g>
<g >
<title>pagevec_lru_move_fn (4 samples, 0.05%)</title><rect x="11.5" y="725" width="0.6" height="15.0" fill="rgb(206,189,42)" rx="2" ry="2" />
<text  x="14.45" y="735.5" ></text>
</g>
<g >
<title>skb_push (1 samples, 0.01%)</title><rect x="581.7" y="741" width="0.1" height="15.0" fill="rgb(250,225,8)" rx="2" ry="2" />
<text  x="584.65" y="751.5" ></text>
</g>
<g >
<title>block_write_end (2 samples, 0.03%)</title><rect x="13.6" y="789" width="0.3" height="15.0" fill="rgb(244,182,22)" rx="2" ry="2" />
<text  x="16.56" y="799.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="671.4" y="645" width="0.1" height="15.0" fill="rgb(206,44,14)" rx="2" ry="2" />
<text  x="674.38" y="655.5" ></text>
</g>
<g >
<title>tcp_v4_send_ack (1 samples, 0.01%)</title><rect x="337.4" y="53" width="0.1" height="15.0" fill="rgb(215,140,15)" rx="2" ry="2" />
<text  x="340.37" y="63.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (7 samples, 0.10%)</title><rect x="799.6" y="677" width="1.1" height="15.0" fill="rgb(238,178,40)" rx="2" ry="2" />
<text  x="802.58" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_M_tail (1 samples, 0.01%)</title><rect x="100.5" y="469" width="0.2" height="15.0" fill="rgb(236,51,25)" rx="2" ry="2" />
<text  x="103.53" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="815.1" y="661" width="0.2" height="15.0" fill="rgb(247,181,16)" rx="2" ry="2" />
<text  x="818.10" y="671.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="943.6" y="965" width="0.3" height="15.0" fill="rgb(250,27,21)" rx="2" ry="2" />
<text  x="946.62" y="975.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="796.3" y="597" width="0.2" height="15.0" fill="rgb(232,155,4)" rx="2" ry="2" />
<text  x="799.34" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1188.2" y="773" width="0.2" height="15.0" fill="rgb(233,222,22)" rx="2" ry="2" />
<text  x="1191.22" y="783.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::isInLoopThread (2 samples, 0.03%)</title><rect x="1024.5" y="677" width="0.3" height="15.0" fill="rgb(244,43,17)" rx="2" ry="2" />
<text  x="1027.45" y="687.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="315.2" y="725" width="0.3" height="15.0" fill="rgb(243,118,10)" rx="2" ry="2" />
<text  x="318.23" y="735.5" ></text>
</g>
<g >
<title>sys_write (597 samples, 8.18%)</title><rect x="147.3" y="629" width="96.5" height="15.0" fill="rgb(235,27,37)" rx="2" ry="2" />
<text  x="150.25" y="639.5" >sys_write</text>
</g>
<g >
<title>std::get&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.2" y="597" width="0.1" height="15.0" fill="rgb(244,147,21)" rx="2" ry="2" />
<text  x="93.19" y="607.5" ></text>
</g>
<g >
<title>strlen (9 samples, 0.12%)</title><rect x="959.9" y="981" width="1.5" height="15.0" fill="rgb(229,61,47)" rx="2" ry="2" />
<text  x="962.95" y="991.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1011.8" y="597" width="0.2" height="15.0" fill="rgb(228,101,28)" rx="2" ry="2" />
<text  x="1014.84" y="607.5" ></text>
</g>
<g >
<title>std::move&lt;char&amp;&gt; (1 samples, 0.01%)</title><rect x="803.3" y="581" width="0.2" height="15.0" fill="rgb(232,117,9)" rx="2" ry="2" />
<text  x="806.29" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_ptr (2 samples, 0.03%)</title><rect x="110.7" y="645" width="0.3" height="15.0" fill="rgb(228,25,13)" rx="2" ry="2" />
<text  x="113.72" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, muduo::Timestamp&amp;&amp;&gt;::_M_head (1 samples, 0.01%)</title><rect x="90.3" y="549" width="0.2" height="15.0" fill="rgb(211,190,54)" rx="2" ry="2" />
<text  x="93.35" y="559.5" ></text>
</g>
<g >
<title>muduo::Logger::stream (1 samples, 0.01%)</title><rect x="66.1" y="789" width="0.2" height="15.0" fill="rgb(210,160,51)" rx="2" ry="2" />
<text  x="69.10" y="799.5" ></text>
</g>
<g >
<title>muduo::MutexLock::unlock (1 samples, 0.01%)</title><rect x="371.2" y="741" width="0.1" height="15.0" fill="rgb(207,105,21)" rx="2" ry="2" />
<text  x="374.16" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,142 samples, 15.65%)</title><rect x="658.1" y="837" width="184.6" height="15.0" fill="rgb(226,108,54)" rx="2" ry="2" />
<text  x="661.12" y="847.5" >std::function&lt;void </text>
</g>
<g >
<title>muduo::net::TcpConnection::getContextkv (11 samples, 0.15%)</title><rect x="679.3" y="693" width="1.8" height="15.0" fill="rgb(212,35,49)" rx="2" ry="2" />
<text  x="682.30" y="703.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.01%)</title><rect x="117.2" y="757" width="0.1" height="15.0" fill="rgb(245,131,10)" rx="2" ry="2" />
<text  x="120.18" y="767.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAllAsString[abi:cxx11] (3 samples, 0.04%)</title><rect x="1148.9" y="709" width="0.5" height="15.0" fill="rgb(250,206,7)" rx="2" ry="2" />
<text  x="1151.94" y="719.5" ></text>
</g>
<g >
<title>path_lookupat (45 samples, 0.62%)</title><rect x="823.7" y="597" width="7.2" height="15.0" fill="rgb(232,174,4)" rx="2" ry="2" />
<text  x="826.66" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (2 samples, 0.03%)</title><rect x="782.9" y="661" width="0.3" height="15.0" fill="rgb(237,108,43)" rx="2" ry="2" />
<text  x="785.93" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="671.9" y="645" width="0.1" height="15.0" fill="rgb(216,176,52)" rx="2" ry="2" />
<text  x="674.86" y="655.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.01%)</title><rect x="269.8" y="949" width="0.2" height="15.0" fill="rgb(233,165,19)" rx="2" ry="2" />
<text  x="272.80" y="959.5" ></text>
</g>
<g >
<title>__tcp_v4_send_check (1 samples, 0.01%)</title><rect x="403.7" y="421" width="0.1" height="15.0" fill="rgb(216,57,51)" rx="2" ry="2" />
<text  x="406.66" y="431.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="252.0" y="757" width="0.2" height="15.0" fill="rgb(215,116,35)" rx="2" ry="2" />
<text  x="255.01" y="767.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.01%)</title><rect x="948.8" y="901" width="0.2" height="15.0" fill="rgb(208,92,3)" rx="2" ry="2" />
<text  x="951.79" y="911.5" ></text>
</g>
<g >
<title>__snprintf (3 samples, 0.04%)</title><rect x="121.5" y="757" width="0.5" height="15.0" fill="rgb(223,87,32)" rx="2" ry="2" />
<text  x="124.55" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="997.8" y="517" width="0.1" height="15.0" fill="rgb(216,76,37)" rx="2" ry="2" />
<text  x="1000.78" y="527.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (4 samples, 0.05%)</title><rect x="253.3" y="773" width="0.7" height="15.0" fill="rgb(220,221,31)" rx="2" ry="2" />
<text  x="256.31" y="783.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (107 samples, 1.47%)</title><rect x="339.5" y="613" width="17.3" height="15.0" fill="rgb(243,104,23)" rx="2" ry="2" />
<text  x="342.48" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="819.0" y="661" width="0.1" height="15.0" fill="rgb(241,195,52)" rx="2" ry="2" />
<text  x="821.98" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::append (1 samples, 0.01%)</title><rect x="127.4" y="757" width="0.1" height="15.0" fill="rgb(225,47,30)" rx="2" ry="2" />
<text  x="130.37" y="767.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="503.4" y="821" width="0.2" height="15.0" fill="rgb(227,76,34)" rx="2" ry="2" />
<text  x="506.40" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_comp_iter&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="661.0" y="677" width="0.2" height="15.0" fill="rgb(252,49,11)" rx="2" ry="2" />
<text  x="664.03" y="687.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="1011.5" y="613" width="0.2" height="15.0" fill="rgb(217,143,30)" rx="2" ry="2" />
<text  x="1014.52" y="623.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.01%)</title><rect x="898.0" y="725" width="0.2" height="15.0" fill="rgb(247,118,26)" rx="2" ry="2" />
<text  x="901.03" y="735.5" ></text>
</g>
<g >
<title>muduo::net::Channel::isWriting (1 samples, 0.01%)</title><rect x="385.9" y="693" width="0.1" height="15.0" fill="rgb(207,147,23)" rx="2" ry="2" />
<text  x="388.87" y="703.5" ></text>
</g>
<g >
<title>__fdget_pos (2 samples, 0.03%)</title><rect x="395.4" y="613" width="0.3" height="15.0" fill="rgb(217,43,17)" rx="2" ry="2" />
<text  x="398.41" y="623.5" ></text>
</g>
<g >
<title>tcp_options_write (1 samples, 0.01%)</title><rect x="238.9" y="421" width="0.2" height="15.0" fill="rgb(212,32,16)" rx="2" ry="2" />
<text  x="241.92" y="431.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="495.0" y="741" width="0.2" height="15.0" fill="rgb(247,13,3)" rx="2" ry="2" />
<text  x="498.00" y="751.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="546.4" y="917" width="0.2" height="15.0" fill="rgb(228,97,39)" rx="2" ry="2" />
<text  x="549.41" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.03%)</title><rect x="137.9" y="677" width="0.3" height="15.0" fill="rgb(223,200,53)" rx="2" ry="2" />
<text  x="140.88" y="687.5" ></text>
</g>
<g >
<title>__netif_receive_skb (456 samples, 6.25%)</title><rect x="161.0" y="245" width="73.7" height="15.0" fill="rgb(240,82,7)" rx="2" ry="2" />
<text  x="164.00" y="255.5" >__netif_..</text>
</g>
<g >
<title>muduo::LogStream::append (2 samples, 0.03%)</title><rect x="1145.4" y="661" width="0.3" height="15.0" fill="rgb(211,74,20)" rx="2" ry="2" />
<text  x="1148.38" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="358.2" y="693" width="0.2" height="15.0" fill="rgb(210,22,53)" rx="2" ry="2" />
<text  x="361.23" y="703.5" ></text>
</g>
<g >
<title>tcp_write_timer (1 samples, 0.01%)</title><rect x="35.2" y="885" width="0.2" height="15.0" fill="rgb(205,163,37)" rx="2" ry="2" />
<text  x="38.22" y="895.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1 samples, 0.01%)</title><rect x="109.4" y="597" width="0.2" height="15.0" fill="rgb(240,171,14)" rx="2" ry="2" />
<text  x="112.42" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1 samples, 0.01%)</title><rect x="81.3" y="453" width="0.2" height="15.0" fill="rgb(236,141,12)" rx="2" ry="2" />
<text  x="84.29" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="485" width="0.2" height="15.0" fill="rgb(243,58,30)" rx="2" ry="2" />
<text  x="1123.81" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="675.4" y="645" width="0.2" height="15.0" fill="rgb(247,148,1)" rx="2" ry="2" />
<text  x="678.42" y="655.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::updateChannel (1 samples, 0.01%)</title><rect x="137.7" y="661" width="0.2" height="15.0" fill="rgb(218,156,34)" rx="2" ry="2" />
<text  x="140.72" y="671.5" ></text>
</g>
<g >
<title>ext4_file_getattr (4 samples, 0.05%)</title><rect x="835.3" y="597" width="0.7" height="15.0" fill="rgb(241,197,18)" rx="2" ry="2" />
<text  x="838.30" y="607.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1001.2" y="629" width="0.1" height="15.0" fill="rgb(242,65,28)" rx="2" ry="2" />
<text  x="1004.17" y="639.5" ></text>
</g>
<g >
<title>process_backlog (132 samples, 1.81%)</title><rect x="901.7" y="565" width="21.4" height="15.0" fill="rgb(247,27,1)" rx="2" ry="2" />
<text  x="904.75" y="575.5" >p..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="795.2" y="645" width="0.3" height="15.0" fill="rgb(218,14,40)" rx="2" ry="2" />
<text  x="798.21" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Socket, std::default_delete&lt;muduo::net::Socket&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="247.3" y="501" width="0.2" height="15.0" fill="rgb(215,85,21)" rx="2" ry="2" />
<text  x="250.33" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="891.7" y="805" width="0.2" height="15.0" fill="rgb(217,47,43)" rx="2" ry="2" />
<text  x="894.73" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3 samples, 0.04%)</title><rect x="88.1" y="629" width="0.5" height="15.0" fill="rgb(217,30,20)" rx="2" ry="2" />
<text  x="91.08" y="639.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="28.9" y="869" width="0.2" height="15.0" fill="rgb(223,209,8)" rx="2" ry="2" />
<text  x="31.91" y="879.5" ></text>
</g>
<g >
<title>ip_local_out (160 samples, 2.19%)</title><rect x="554.5" y="709" width="25.9" height="15.0" fill="rgb(253,62,23)" rx="2" ry="2" />
<text  x="557.49" y="719.5" >i..</text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="1146.8" y="661" width="0.2" height="15.0" fill="rgb(223,85,52)" rx="2" ry="2" />
<text  x="1149.84" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="840.0" y="677" width="0.2" height="15.0" fill="rgb(217,34,18)" rx="2" ry="2" />
<text  x="842.99" y="687.5" ></text>
</g>
<g >
<title>__strchrnul (4 samples, 0.05%)</title><rect x="23.6" y="965" width="0.6" height="15.0" fill="rgb(222,222,23)" rx="2" ry="2" />
<text  x="26.58" y="975.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="546.4" y="901" width="0.2" height="15.0" fill="rgb(250,74,38)" rx="2" ry="2" />
<text  x="549.41" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6 samples, 0.08%)</title><rect x="805.2" y="613" width="1.0" height="15.0" fill="rgb(216,204,1)" rx="2" ry="2" />
<text  x="808.23" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1189.4" y="885" width="0.1" height="15.0" fill="rgb(210,191,14)" rx="2" ry="2" />
<text  x="1192.35" y="895.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (1 samples, 0.01%)</title><rect x="531.4" y="821" width="0.1" height="15.0" fill="rgb(207,157,35)" rx="2" ry="2" />
<text  x="534.37" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2 samples, 0.03%)</title><rect x="360.5" y="757" width="0.3" height="15.0" fill="rgb(208,21,20)" rx="2" ry="2" />
<text  x="363.49" y="767.5" ></text>
</g>
<g >
<title>sys_write (246 samples, 3.37%)</title><rect x="546.6" y="933" width="39.7" height="15.0" fill="rgb(233,38,49)" rx="2" ry="2" />
<text  x="549.57" y="943.5" >sys..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1004.1" y="629" width="0.1" height="15.0" fill="rgb(243,184,51)" rx="2" ry="2" />
<text  x="1007.08" y="639.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;StaticServer::Entry,  (2 samples, 0.03%)</title><rect x="340.6" y="533" width="0.3" height="15.0" fill="rgb(217,105,22)" rx="2" ry="2" />
<text  x="343.61" y="543.5" ></text>
</g>
<g >
<title>boost::any_cast&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (4 samples, 0.05%)</title><rect x="340.0" y="549" width="0.6" height="15.0" fill="rgb(217,111,21)" rx="2" ry="2" />
<text  x="342.96" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream@plt (1 samples, 0.01%)</title><rect x="254.9" y="789" width="0.2" height="15.0" fill="rgb(252,213,54)" rx="2" ry="2" />
<text  x="257.92" y="799.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::getContextkv (8 samples, 0.11%)</title><rect x="1149.4" y="709" width="1.3" height="15.0" fill="rgb(245,201,28)" rx="2" ry="2" />
<text  x="1152.42" y="719.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="793.4" y="565" width="0.2" height="15.0" fill="rgb(239,156,11)" rx="2" ry="2" />
<text  x="796.43" y="575.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setWriteCompleteCallback (5 samples, 0.07%)</title><rect x="95.7" y="565" width="0.8" height="15.0" fill="rgb(208,92,27)" rx="2" ry="2" />
<text  x="98.68" y="575.5" ></text>
</g>
<g >
<title>muduo::Logger::SourceFile::SourceFile&lt;45&gt; (2 samples, 0.03%)</title><rect x="315.5" y="789" width="0.4" height="15.0" fill="rgb(239,72,34)" rx="2" ry="2" />
<text  x="318.55" y="799.5" ></text>
</g>
<g >
<title>apparmor_file_permission (2 samples, 0.03%)</title><rect x="1116.1" y="533" width="0.3" height="15.0" fill="rgb(249,209,37)" rx="2" ry="2" />
<text  x="1119.12" y="543.5" ></text>
</g>
<g >
<title>rb_first (2 samples, 0.03%)</title><rect x="908.7" y="389" width="0.3" height="15.0" fill="rgb(235,159,28)" rx="2" ry="2" />
<text  x="911.70" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="80.8" y="469" width="0.2" height="15.0" fill="rgb(215,60,20)" rx="2" ry="2" />
<text  x="83.81" y="479.5" ></text>
</g>
<g >
<title>dst_release (1 samples, 0.01%)</title><rect x="562.1" y="405" width="0.2" height="15.0" fill="rgb(252,163,40)" rx="2" ry="2" />
<text  x="565.09" y="415.5" ></text>
</g>
<g >
<title>tcp_ack (4 samples, 0.05%)</title><rect x="168.1" y="101" width="0.7" height="15.0" fill="rgb(220,146,26)" rx="2" ry="2" />
<text  x="171.11" y="111.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, false&gt;::_Head_base (1 samples, 0.01%)</title><rect x="109.9" y="581" width="0.2" height="15.0" fill="rgb(207,163,31)" rx="2" ry="2" />
<text  x="112.91" y="591.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.01%)</title><rect x="963.7" y="997" width="0.1" height="15.0" fill="rgb(244,110,47)" rx="2" ry="2" />
<text  x="966.67" y="1007.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.01%)</title><rect x="1006.0" y="677" width="0.2" height="15.0" fill="rgb(239,38,8)" rx="2" ry="2" />
<text  x="1009.02" y="687.5" ></text>
</g>
<g >
<title>sys_readv (2 samples, 0.03%)</title><rect x="86.6" y="629" width="0.4" height="15.0" fill="rgb(210,201,8)" rx="2" ry="2" />
<text  x="89.63" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="949.3" y="933" width="0.1" height="15.0" fill="rgb(239,173,22)" rx="2" ry="2" />
<text  x="952.28" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::operator (3 samples, 0.04%)</title><rect x="258.0" y="821" width="0.5" height="15.0" fill="rgb(245,202,6)" rx="2" ry="2" />
<text  x="261.00" y="831.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="1001.7" y="549" width="0.1" height="15.0" fill="rgb(233,153,21)" rx="2" ry="2" />
<text  x="1004.66" y="559.5" ></text>
</g>
<g >
<title>__check_object_size (3 samples, 0.04%)</title><rect x="152.6" y="485" width="0.5" height="15.0" fill="rgb(251,33,3)" rx="2" ry="2" />
<text  x="155.59" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (5 samples, 0.07%)</title><rect x="787.0" y="581" width="0.8" height="15.0" fill="rgb(227,168,41)" rx="2" ry="2" />
<text  x="789.97" y="591.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::lock (2 samples, 0.03%)</title><rect x="258.8" y="821" width="0.3" height="15.0" fill="rgb(237,172,44)" rx="2" ry="2" />
<text  x="261.80" y="831.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1149.6" y="629" width="0.1" height="15.0" fill="rgb(216,44,19)" rx="2" ry="2" />
<text  x="1152.58" y="639.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="148.2" y="613" width="0.3" height="15.0" fill="rgb(220,80,48)" rx="2" ry="2" />
<text  x="151.22" y="623.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3 samples, 0.04%)</title><rect x="487.6" y="693" width="0.4" height="15.0" fill="rgb(253,211,40)" rx="2" ry="2" />
<text  x="490.56" y="703.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="1186.6" y="853" width="0.2" height="15.0" fill="rgb(220,70,37)" rx="2" ry="2" />
<text  x="1189.61" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="513.4" y="789" width="0.2" height="15.0" fill="rgb(241,19,15)" rx="2" ry="2" />
<text  x="516.43" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (56 samples, 0.77%)</title><rect x="327.0" y="629" width="9.1" height="15.0" fill="rgb(250,139,16)" rx="2" ry="2" />
<text  x="330.03" y="639.5" ></text>
</g>
<g >
<title>tcp_rate_check_app_limited (1 samples, 0.01%)</title><rect x="151.6" y="501" width="0.2" height="15.0" fill="rgb(216,100,13)" rx="2" ry="2" />
<text  x="154.62" y="511.5" ></text>
</g>
<g >
<title>rw_verify_area (9 samples, 0.12%)</title><rect x="764.3" y="549" width="1.5" height="15.0" fill="rgb(227,114,14)" rx="2" ry="2" />
<text  x="767.33" y="559.5" ></text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="798.6" y="709" width="0.2" height="15.0" fill="rgb(215,200,0)" rx="2" ry="2" />
<text  x="801.61" y="719.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="13.7" y="725" width="0.2" height="15.0" fill="rgb(249,130,31)" rx="2" ry="2" />
<text  x="16.72" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="114.0" y="773" width="0.1" height="15.0" fill="rgb(217,113,8)" rx="2" ry="2" />
<text  x="116.95" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="769.8" y="565" width="0.2" height="15.0" fill="rgb(217,214,23)" rx="2" ry="2" />
<text  x="772.83" y="575.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="358.2" y="677" width="0.2" height="15.0" fill="rgb(229,10,15)" rx="2" ry="2" />
<text  x="361.23" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="1150.7" y="677" width="0.2" height="15.0" fill="rgb(245,156,18)" rx="2" ry="2" />
<text  x="1153.72" y="687.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1133.7" y="629" width="0.2" height="15.0" fill="rgb(249,198,10)" rx="2" ry="2" />
<text  x="1136.74" y="639.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (5 samples, 0.07%)</title><rect x="944.9" y="981" width="0.8" height="15.0" fill="rgb(231,205,14)" rx="2" ry="2" />
<text  x="947.91" y="991.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="151.3" y="437" width="0.2" height="15.0" fill="rgb(253,85,1)" rx="2" ry="2" />
<text  x="154.30" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~tuple (1 samples, 0.01%)</title><rect x="349.3" y="501" width="0.2" height="15.0" fill="rgb(231,155,5)" rx="2" ry="2" />
<text  x="352.34" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string@plt (3 samples, 0.04%)</title><rect x="777.3" y="693" width="0.5" height="15.0" fill="rgb(252,141,15)" rx="2" ry="2" />
<text  x="780.27" y="703.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="771.1" y="629" width="0.3" height="15.0" fill="rgb(248,37,40)" rx="2" ry="2" />
<text  x="774.12" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (3 samples, 0.04%)</title><rect x="114.3" y="789" width="0.5" height="15.0" fill="rgb(225,220,44)" rx="2" ry="2" />
<text  x="117.27" y="799.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="367.1" y="725" width="0.2" height="15.0" fill="rgb(234,194,44)" rx="2" ry="2" />
<text  x="370.12" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="778.4" y="645" width="0.5" height="15.0" fill="rgb(238,156,32)" rx="2" ry="2" />
<text  x="781.40" y="655.5" ></text>
</g>
<g >
<title>tcp_rearm_rto.part.60 (4 samples, 0.05%)</title><rect x="483.0" y="405" width="0.7" height="15.0" fill="rgb(226,18,13)" rx="2" ry="2" />
<text  x="486.03" y="415.5" ></text>
</g>
<g >
<title>muduo::net::Channel::remove (1 samples, 0.01%)</title><rect x="385.1" y="693" width="0.1" height="15.0" fill="rgb(218,213,16)" rx="2" ry="2" />
<text  x="388.07" y="703.5" ></text>
</g>
<g >
<title>netif_rx_internal (4 samples, 0.05%)</title><rect x="925.0" y="565" width="0.7" height="15.0" fill="rgb(215,129,2)" rx="2" ry="2" />
<text  x="928.03" y="575.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (182 samples, 2.49%)</title><rect x="897.4" y="741" width="29.4" height="15.0" fill="rgb(232,159,23)" rx="2" ry="2" />
<text  x="900.38" y="751.5" >__..</text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.01%)</title><rect x="410.8" y="117" width="0.1" height="15.0" fill="rgb(220,142,52)" rx="2" ry="2" />
<text  x="413.77" y="127.5" ></text>
</g>
<g >
<title>boost::equality_comparable1&lt;muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt; &gt;::equality_comparable1 (1 samples, 0.01%)</title><rect x="64.8" y="725" width="0.2" height="15.0" fill="rgb(220,36,48)" rx="2" ry="2" />
<text  x="67.80" y="735.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue (15 samples, 0.21%)</title><rect x="909.0" y="389" width="2.4" height="15.0" fill="rgb(239,134,30)" rx="2" ry="2" />
<text  x="912.02" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;void  (11 samples, 0.15%)</title><rect x="245.7" y="725" width="1.8" height="15.0" fill="rgb(250,70,6)" rx="2" ry="2" />
<text  x="248.71" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.03%)</title><rect x="843.4" y="997" width="0.3" height="15.0" fill="rgb(253,183,52)" rx="2" ry="2" />
<text  x="846.39" y="1007.5" ></text>
</g>
<g >
<title>memmove@plt (1 samples, 0.01%)</title><rect x="678.2" y="613" width="0.1" height="15.0" fill="rgb(244,121,7)" rx="2" ry="2" />
<text  x="681.17" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (613 samples, 8.40%)</title><rect x="387.7" y="661" width="99.1" height="15.0" fill="rgb(207,130,13)" rx="2" ry="2" />
<text  x="390.65" y="671.5" >entry_SYSCA..</text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.03%)</title><rect x="10.2" y="741" width="0.3" height="15.0" fill="rgb(216,87,43)" rx="2" ry="2" />
<text  x="13.16" y="751.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt;@plt (1 samples, 0.01%)</title><rect x="501.6" y="789" width="0.2" height="15.0" fill="rgb(216,34,18)" rx="2" ry="2" />
<text  x="504.63" y="799.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="892.5" y="805" width="0.2" height="15.0" fill="rgb(253,77,33)" rx="2" ry="2" />
<text  x="895.53" y="815.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1 samples, 0.01%)</title><rect x="1188.2" y="709" width="0.2" height="15.0" fill="rgb(221,16,51)" rx="2" ry="2" />
<text  x="1191.22" y="719.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (7 samples, 0.10%)</title><rect x="801.7" y="677" width="1.1" height="15.0" fill="rgb(217,64,29)" rx="2" ry="2" />
<text  x="804.68" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="493.9" y="789" width="0.1" height="15.0" fill="rgb(250,30,30)" rx="2" ry="2" />
<text  x="496.87" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::_M_ptr (6 samples, 0.08%)</title><rect x="782.3" y="677" width="0.9" height="15.0" fill="rgb(251,139,53)" rx="2" ry="2" />
<text  x="785.28" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="352.4" y="453" width="0.2" height="15.0" fill="rgb(223,154,10)" rx="2" ry="2" />
<text  x="355.41" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="489.8" y="757" width="1.8" height="15.0" fill="rgb(210,63,50)" rx="2" ry="2" />
<text  x="492.82" y="767.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (1 samples, 0.01%)</title><rect x="255.9" y="789" width="0.2" height="15.0" fill="rgb(254,30,13)" rx="2" ry="2" />
<text  x="258.89" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt; &gt; (25 samples, 0.34%)</title><rect x="351.1" y="533" width="4.1" height="15.0" fill="rgb(223,14,32)" rx="2" ry="2" />
<text  x="354.12" y="543.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (4 samples, 0.05%)</title><rect x="675.6" y="645" width="0.6" height="15.0" fill="rgb(249,142,10)" rx="2" ry="2" />
<text  x="678.58" y="655.5" ></text>
</g>
<g >
<title>read@plt (1 samples, 0.01%)</title><rect x="651.2" y="997" width="0.1" height="15.0" fill="rgb(216,161,33)" rx="2" ry="2" />
<text  x="654.17" y="1007.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="89.7" y="661" width="0.2" height="15.0" fill="rgb(248,23,51)" rx="2" ry="2" />
<text  x="92.70" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (2 samples, 0.03%)</title><rect x="106.8" y="501" width="0.4" height="15.0" fill="rgb(251,148,4)" rx="2" ry="2" />
<text  x="109.84" y="511.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (5 samples, 0.07%)</title><rect x="128.5" y="757" width="0.8" height="15.0" fill="rgb(249,4,50)" rx="2" ry="2" />
<text  x="131.50" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="94.7" y="437" width="0.2" height="15.0" fill="rgb(208,132,12)" rx="2" ry="2" />
<text  x="97.71" y="447.5" ></text>
</g>
<g >
<title>timespec64_add_safe (1 samples, 0.01%)</title><rect x="58.8" y="757" width="0.2" height="15.0" fill="rgb(206,193,3)" rx="2" ry="2" />
<text  x="61.82" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="362.1" y="725" width="0.2" height="15.0" fill="rgb(240,85,47)" rx="2" ry="2" />
<text  x="365.11" y="735.5" ></text>
</g>
<g >
<title>__schedule (6 samples, 0.08%)</title><rect x="688.2" y="549" width="1.0" height="15.0" fill="rgb(229,57,25)" rx="2" ry="2" />
<text  x="691.19" y="559.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="672.3" y="661" width="0.4" height="15.0" fill="rgb(243,189,53)" rx="2" ry="2" />
<text  x="675.35" y="671.5" ></text>
</g>
<g >
<title>ipv4_mtu (1 samples, 0.01%)</title><rect x="237.5" y="357" width="0.1" height="15.0" fill="rgb(232,184,37)" rx="2" ry="2" />
<text  x="240.46" y="367.5" ></text>
</g>
<g >
<title>path_put (1 samples, 0.01%)</title><rect x="822.9" y="629" width="0.1" height="15.0" fill="rgb(253,6,39)" rx="2" ry="2" />
<text  x="825.86" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="815.1" y="693" width="0.2" height="15.0" fill="rgb(208,177,47)" rx="2" ry="2" />
<text  x="818.10" y="703.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.01%)</title><rect x="281.6" y="949" width="0.2" height="15.0" fill="rgb(216,56,43)" rx="2" ry="2" />
<text  x="284.60" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="839.3" y="709" width="0.2" height="15.0" fill="rgb(206,84,11)" rx="2" ry="2" />
<text  x="842.35" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="138.0" y="581" width="0.2" height="15.0" fill="rgb(221,58,6)" rx="2" ry="2" />
<text  x="141.04" y="591.5" ></text>
</g>
<g >
<title>sock_read_iter (2 samples, 0.03%)</title><rect x="873.8" y="901" width="0.3" height="15.0" fill="rgb(230,128,49)" rx="2" ry="2" />
<text  x="876.78" y="911.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="370.2" y="725" width="0.2" height="15.0" fill="rgb(207,38,38)" rx="2" ry="2" />
<text  x="373.19" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="357.1" y="613" width="0.2" height="15.0" fill="rgb(227,131,49)" rx="2" ry="2" />
<text  x="360.10" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (1 samples, 0.01%)</title><rect x="812.2" y="709" width="0.1" height="15.0" fill="rgb(243,14,34)" rx="2" ry="2" />
<text  x="815.19" y="719.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (6 samples, 0.08%)</title><rect x="337.1" y="677" width="0.9" height="15.0" fill="rgb(230,5,14)" rx="2" ry="2" />
<text  x="340.05" y="687.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="248.5" y="773" width="0.1" height="15.0" fill="rgb(205,55,30)" rx="2" ry="2" />
<text  x="251.46" y="783.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (1 samples, 0.01%)</title><rect x="840.6" y="725" width="0.2" height="15.0" fill="rgb(254,186,41)" rx="2" ry="2" />
<text  x="843.64" y="735.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="607.4" y="901" width="0.1" height="15.0" fill="rgb(232,37,47)" rx="2" ry="2" />
<text  x="610.36" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="97.9" y="405" width="0.2" height="15.0" fill="rgb(226,78,34)" rx="2" ry="2" />
<text  x="100.95" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.08%)</title><rect x="658.1" y="821" width="1.0" height="15.0" fill="rgb(238,153,34)" rx="2" ry="2" />
<text  x="661.12" y="831.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="382.2" y="789" width="0.3" height="15.0" fill="rgb(247,68,6)" rx="2" ry="2" />
<text  x="385.16" y="799.5" ></text>
</g>
<g >
<title>tcp_v4_inbound_md5_hash (1 samples, 0.01%)</title><rect x="922.0" y="437" width="0.1" height="15.0" fill="rgb(205,37,16)" rx="2" ry="2" />
<text  x="924.96" y="447.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1161.4" y="597" width="0.1" height="15.0" fill="rgb(242,146,31)" rx="2" ry="2" />
<text  x="1164.39" y="607.5" ></text>
</g>
<g >
<title>aa_file_perm (2 samples, 0.03%)</title><rect x="486.4" y="533" width="0.4" height="15.0" fill="rgb(207,110,16)" rx="2" ry="2" />
<text  x="489.43" y="543.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="100.0" y="517" width="1.2" height="15.0" fill="rgb(215,169,21)" rx="2" ry="2" />
<text  x="103.05" y="527.5" ></text>
</g>
<g >
<title>new_sync_write (583 samples, 7.99%)</title><rect x="149.0" y="581" width="94.3" height="15.0" fill="rgb(241,192,35)" rx="2" ry="2" />
<text  x="152.03" y="591.5" >new_sync_wr..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="129.5" y="741" width="0.1" height="15.0" fill="rgb(242,77,23)" rx="2" ry="2" />
<text  x="132.47" y="751.5" ></text>
</g>
<g >
<title>ip_rcv_finish (112 samples, 1.53%)</title><rect x="558.0" y="501" width="18.2" height="15.0" fill="rgb(236,174,24)" rx="2" ry="2" />
<text  x="561.05" y="511.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.01%)</title><rect x="490.0" y="677" width="0.1" height="15.0" fill="rgb(217,120,10)" rx="2" ry="2" />
<text  x="492.99" y="687.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.03%)</title><rect x="1139.1" y="597" width="0.3" height="15.0" fill="rgb(245,14,33)" rx="2" ry="2" />
<text  x="1142.08" y="607.5" ></text>
</g>
<g >
<title>sdsrange (1 samples, 0.01%)</title><rect x="958.8" y="981" width="0.2" height="15.0" fill="rgb(205,183,45)" rx="2" ry="2" />
<text  x="961.82" y="991.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (3 samples, 0.04%)</title><rect x="799.1" y="677" width="0.5" height="15.0" fill="rgb(236,74,34)" rx="2" ry="2" />
<text  x="802.09" y="687.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="948.8" y="917" width="0.2" height="15.0" fill="rgb(221,194,51)" rx="2" ry="2" />
<text  x="951.79" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (4 samples, 0.05%)</title><rect x="348.4" y="469" width="0.6" height="15.0" fill="rgb(237,120,17)" rx="2" ry="2" />
<text  x="351.37" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (23 samples, 0.32%)</title><rect x="489.5" y="805" width="3.7" height="15.0" fill="rgb(230,24,31)" rx="2" ry="2" />
<text  x="492.50" y="815.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (1 samples, 0.01%)</title><rect x="1183.4" y="725" width="0.1" height="15.0" fill="rgb(233,41,42)" rx="2" ry="2" />
<text  x="1186.37" y="735.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (3 samples, 0.04%)</title><rect x="1188.7" y="853" width="0.5" height="15.0" fill="rgb(224,50,32)" rx="2" ry="2" />
<text  x="1191.71" y="863.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (16 samples, 0.22%)</title><rect x="313.0" y="773" width="2.5" height="15.0" fill="rgb(250,105,34)" rx="2" ry="2" />
<text  x="315.96" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="813.8" y="693" width="0.2" height="15.0" fill="rgb(224,134,16)" rx="2" ry="2" />
<text  x="816.80" y="703.5" ></text>
</g>
<g >
<title>boost::typeindex::type_id&lt;std::weak_ptr&lt;StaticServer::Entry&gt; const&gt; (1 samples, 0.01%)</title><rect x="340.3" y="517" width="0.1" height="15.0" fill="rgb(223,72,18)" rx="2" ry="2" />
<text  x="343.28" y="527.5" ></text>
</g>
<g >
<title>ip_local_deliver (112 samples, 1.53%)</title><rect x="558.0" y="485" width="18.2" height="15.0" fill="rgb(236,175,30)" rx="2" ry="2" />
<text  x="561.05" y="495.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (1 samples, 0.01%)</title><rect x="1187.9" y="789" width="0.2" height="15.0" fill="rgb(217,67,19)" rx="2" ry="2" />
<text  x="1190.90" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="108.6" y="581" width="0.2" height="15.0" fill="rgb(223,228,26)" rx="2" ry="2" />
<text  x="111.62" y="591.5" ></text>
</g>
<g >
<title>sk_reset_timer (1 samples, 0.01%)</title><rect x="927.5" y="693" width="0.1" height="15.0" fill="rgb(238,177,26)" rx="2" ry="2" />
<text  x="930.45" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (5 samples, 0.07%)</title><rect x="809.6" y="709" width="0.8" height="15.0" fill="rgb(214,93,9)" rx="2" ry="2" />
<text  x="812.60" y="719.5" ></text>
</g>
<g >
<title>tcp_data_queue (63 samples, 0.86%)</title><rect x="565.5" y="405" width="10.2" height="15.0" fill="rgb(226,176,4)" rx="2" ry="2" />
<text  x="568.48" y="415.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="35.2" y="917" width="0.2" height="15.0" fill="rgb(219,150,53)" rx="2" ry="2" />
<text  x="38.22" y="927.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="779.2" y="677" width="0.2" height="15.0" fill="rgb(227,223,50)" rx="2" ry="2" />
<text  x="782.21" y="687.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.14%)</title><rect x="245.9" y="709" width="1.6" height="15.0" fill="rgb(224,98,37)" rx="2" ry="2" />
<text  x="248.87" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.03%)</title><rect x="502.9" y="821" width="0.3" height="15.0" fill="rgb(224,70,47)" rx="2" ry="2" />
<text  x="505.92" y="831.5" ></text>
</g>
<g >
<title>__netif_receive_skb (1 samples, 0.01%)</title><rect x="337.4" y="165" width="0.1" height="15.0" fill="rgb(239,0,16)" rx="2" ry="2" />
<text  x="340.37" y="175.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="370.4" y="741" width="0.8" height="15.0" fill="rgb(239,62,23)" rx="2" ry="2" />
<text  x="373.35" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="385.4" y="645" width="0.2" height="15.0" fill="rgb(220,166,50)" rx="2" ry="2" />
<text  x="388.39" y="655.5" ></text>
</g>
<g >
<title>redisGetReply (2 samples, 0.03%)</title><rect x="943.1" y="965" width="0.4" height="15.0" fill="rgb(252,166,10)" rx="2" ry="2" />
<text  x="946.14" y="975.5" ></text>
</g>
<g >
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="243.0" y="501" width="0.3" height="15.0" fill="rgb(228,36,46)" rx="2" ry="2" />
<text  x="245.96" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (128 samples, 1.75%)</title><rect x="288.2" y="805" width="20.7" height="15.0" fill="rgb(253,76,28)" rx="2" ry="2" />
<text  x="291.23" y="815.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="368.3" y="693" width="0.1" height="15.0" fill="rgb(232,86,18)" rx="2" ry="2" />
<text  x="371.25" y="703.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (1 samples, 0.01%)</title><rect x="336.6" y="661" width="0.1" height="15.0" fill="rgb(222,14,40)" rx="2" ry="2" />
<text  x="339.57" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="247.5" y="773" width="0.1" height="15.0" fill="rgb(206,144,47)" rx="2" ry="2" />
<text  x="250.49" y="783.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="971.3" y="917" width="0.1" height="15.0" fill="rgb(235,131,27)" rx="2" ry="2" />
<text  x="974.27" y="927.5" ></text>
</g>
<g >
<title>loopback_xmit (1 samples, 0.01%)</title><rect x="481.7" y="309" width="0.2" height="15.0" fill="rgb(247,210,8)" rx="2" ry="2" />
<text  x="484.74" y="319.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="264.5" y="917" width="0.6" height="15.0" fill="rgb(247,68,34)" rx="2" ry="2" />
<text  x="267.46" y="927.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="1154.4" y="661" width="0.2" height="15.0" fill="rgb(233,185,17)" rx="2" ry="2" />
<text  x="1157.43" y="671.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (2 samples, 0.03%)</title><rect x="314.6" y="677" width="0.3" height="15.0" fill="rgb(226,222,17)" rx="2" ry="2" />
<text  x="317.58" y="687.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="122.4" y="725" width="0.3" height="15.0" fill="rgb(243,73,7)" rx="2" ry="2" />
<text  x="125.36" y="735.5" ></text>
</g>
<g >
<title>skb_entail (4 samples, 0.05%)</title><rect x="552.2" y="789" width="0.7" height="15.0" fill="rgb(215,21,23)" rx="2" ry="2" />
<text  x="555.23" y="799.5" ></text>
</g>
<g >
<title>boost::less_than_comparable&lt;muduo::Timestamp, muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt;, boost::detail::false_t&gt;::less_than_comparable (1 samples, 0.01%)</title><rect x="124.8" y="757" width="0.1" height="15.0" fill="rgb(237,129,34)" rx="2" ry="2" />
<text  x="127.78" y="767.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="43.6" y="677" width="0.3" height="15.0" fill="rgb(225,124,52)" rx="2" ry="2" />
<text  x="46.63" y="687.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (1 samples, 0.01%)</title><rect x="1024.8" y="661" width="0.1" height="15.0" fill="rgb(207,228,3)" rx="2" ry="2" />
<text  x="1027.78" y="671.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="617.2" y="917" width="0.2" height="15.0" fill="rgb(231,154,22)" rx="2" ry="2" />
<text  x="620.22" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_M_lower_bound (12 samples, 0.16%)</title><rect x="130.8" y="757" width="1.9" height="15.0" fill="rgb(253,42,17)" rx="2" ry="2" />
<text  x="133.76" y="767.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="673.5" y="549" width="0.1" height="15.0" fill="rgb(212,225,3)" rx="2" ry="2" />
<text  x="676.48" y="559.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (16 samples, 0.22%)</title><rect x="923.7" y="629" width="2.6" height="15.0" fill="rgb(241,209,9)" rx="2" ry="2" />
<text  x="926.74" y="639.5" ></text>
</g>
<g >
<title>common_file_perm (5 samples, 0.07%)</title><rect x="84.5" y="501" width="0.8" height="15.0" fill="rgb(234,79,21)" rx="2" ry="2" />
<text  x="87.53" y="511.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt;@plt (1 samples, 0.01%)</title><rect x="256.9" y="789" width="0.1" height="15.0" fill="rgb(229,192,42)" rx="2" ry="2" />
<text  x="259.86" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (2 samples, 0.03%)</title><rect x="663.6" y="693" width="0.3" height="15.0" fill="rgb(249,218,21)" rx="2" ry="2" />
<text  x="666.62" y="703.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (19 samples, 0.26%)</title><rect x="577.0" y="629" width="3.0" height="15.0" fill="rgb(213,57,3)" rx="2" ry="2" />
<text  x="579.96" y="639.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.01%)</title><rect x="29.7" y="949" width="0.2" height="15.0" fill="rgb(218,113,29)" rx="2" ry="2" />
<text  x="32.72" y="959.5" ></text>
</g>
<g >
<title>std::operator==&lt;StaticServer::Entry, StaticServer::Entry&gt; (1 samples, 0.01%)</title><rect x="353.1" y="437" width="0.1" height="15.0" fill="rgb(233,140,43)" rx="2" ry="2" />
<text  x="356.06" y="447.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="787.8" y="613" width="0.1" height="15.0" fill="rgb(234,116,54)" rx="2" ry="2" />
<text  x="790.78" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;StaticServer::Entry&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="349.7" y="565" width="0.1" height="15.0" fill="rgb(209,130,40)" rx="2" ry="2" />
<text  x="352.66" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="95.0" y="533" width="0.4" height="15.0" fill="rgb(240,61,23)" rx="2" ry="2" />
<text  x="98.04" y="543.5" ></text>
</g>
<g >
<title>walk_component (3 samples, 0.04%)</title><rect x="1173.5" y="581" width="0.5" height="15.0" fill="rgb(233,190,13)" rx="2" ry="2" />
<text  x="1176.51" y="591.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="82.1" y="437" width="0.2" height="15.0" fill="rgb(228,144,31)" rx="2" ry="2" />
<text  x="85.10" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1 samples, 0.01%)</title><rect x="357.7" y="629" width="0.2" height="15.0" fill="rgb(253,180,25)" rx="2" ry="2" />
<text  x="360.74" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="318.9" y="773" width="0.2" height="15.0" fill="rgb(228,33,1)" rx="2" ry="2" />
<text  x="321.94" y="783.5" ></text>
</g>
<g >
<title>finish_task_switch (42 samples, 0.58%)</title><rect x="388.5" y="581" width="6.8" height="15.0" fill="rgb(236,210,32)" rx="2" ry="2" />
<text  x="391.46" y="591.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (7 samples, 0.10%)</title><rect x="1186.8" y="725" width="1.1" height="15.0" fill="rgb(224,213,45)" rx="2" ry="2" />
<text  x="1189.77" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="838.1" y="693" width="0.1" height="15.0" fill="rgb(253,40,44)" rx="2" ry="2" />
<text  x="841.05" y="703.5" ></text>
</g>
<g >
<title>_IO_padn (1 samples, 0.01%)</title><rect x="23.4" y="965" width="0.2" height="15.0" fill="rgb(219,186,33)" rx="2" ry="2" />
<text  x="26.42" y="975.5" ></text>
</g>
<g >
<title>muduo::net::Channel::reventsToString[abi:cxx11] (2 samples, 0.03%)</title><rect x="360.8" y="821" width="0.3" height="15.0" fill="rgb(234,93,29)" rx="2" ry="2" />
<text  x="363.82" y="831.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (1 samples, 0.01%)</title><rect x="767.9" y="533" width="0.2" height="15.0" fill="rgb(209,48,54)" rx="2" ry="2" />
<text  x="770.89" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="247.3" y="421" width="0.2" height="15.0" fill="rgb(232,102,48)" rx="2" ry="2" />
<text  x="250.33" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (2 samples, 0.03%)</title><rect x="501.8" y="805" width="0.3" height="15.0" fill="rgb(211,151,5)" rx="2" ry="2" />
<text  x="504.79" y="815.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::TcpConnection*&amp;&gt; (1 samples, 0.01%)</title><rect x="488.4" y="725" width="0.1" height="15.0" fill="rgb(237,25,5)" rx="2" ry="2" />
<text  x="491.37" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1158.6" y="645" width="0.2" height="15.0" fill="rgb(237,215,50)" rx="2" ry="2" />
<text  x="1161.64" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (265 samples, 3.63%)</title><rect x="887.7" y="965" width="42.8" height="15.0" fill="rgb(235,69,35)" rx="2" ry="2" />
<text  x="890.68" y="975.5" >entr..</text>
</g>
<g >
<title>_IO_old_init (1 samples, 0.01%)</title><rect x="22.8" y="981" width="0.1" height="15.0" fill="rgb(221,197,1)" rx="2" ry="2" />
<text  x="25.77" y="991.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="252.8" y="741" width="0.2" height="15.0" fill="rgb(250,174,15)" rx="2" ry="2" />
<text  x="255.82" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,174 samples, 16.08%)</title><rect x="652.9" y="869" width="189.8" height="15.0" fill="rgb(206,146,8)" rx="2" ry="2" />
<text  x="655.95" y="879.5" >std::__invoke_impl&lt;void,..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2 samples, 0.03%)</title><rect x="806.9" y="629" width="0.3" height="15.0" fill="rgb(225,13,2)" rx="2" ry="2" />
<text  x="809.85" y="639.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (2 samples, 0.03%)</title><rect x="82.7" y="469" width="0.4" height="15.0" fill="rgb(245,14,24)" rx="2" ry="2" />
<text  x="85.75" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="87.0" y="645" width="0.1" height="15.0" fill="rgb(231,42,32)" rx="2" ry="2" />
<text  x="89.95" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (7 samples, 0.10%)</title><rect x="342.5" y="533" width="1.2" height="15.0" fill="rgb(240,77,2)" rx="2" ry="2" />
<text  x="345.55" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (3 samples, 0.04%)</title><rect x="1121.6" y="645" width="0.5" height="15.0" fill="rgb(230,36,2)" rx="2" ry="2" />
<text  x="1124.62" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1140.7" y="629" width="0.2" height="15.0" fill="rgb(252,39,27)" rx="2" ry="2" />
<text  x="1143.69" y="639.5" ></text>
</g>
<g >
<title>__kfree_skb (7 samples, 0.10%)</title><rect x="329.9" y="469" width="1.2" height="15.0" fill="rgb(253,38,53)" rx="2" ry="2" />
<text  x="332.94" y="479.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (1 samples, 0.01%)</title><rect x="249.3" y="789" width="0.1" height="15.0" fill="rgb(230,98,22)" rx="2" ry="2" />
<text  x="252.27" y="799.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (6 samples, 0.08%)</title><rect x="63.2" y="757" width="1.0" height="15.0" fill="rgb(231,206,17)" rx="2" ry="2" />
<text  x="66.19" y="767.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.01%)</title><rect x="247.3" y="389" width="0.2" height="15.0" fill="rgb(246,9,2)" rx="2" ry="2" />
<text  x="250.33" y="399.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::connectEstablished (4 samples, 0.05%)</title><rect x="385.2" y="709" width="0.7" height="15.0" fill="rgb(206,195,8)" rx="2" ry="2" />
<text  x="388.23" y="719.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.01%)</title><rect x="337.4" y="133" width="0.1" height="15.0" fill="rgb(205,34,40)" rx="2" ry="2" />
<text  x="340.37" y="143.5" ></text>
</g>
<g >
<title>sys_write (29 samples, 0.40%)</title><rect x="10.0" y="933" width="4.7" height="15.0" fill="rgb(254,4,6)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1131.3" y="613" width="0.2" height="15.0" fill="rgb(224,147,21)" rx="2" ry="2" />
<text  x="1134.32" y="623.5" ></text>
</g>
<g >
<title>adler32 (15 samples, 0.21%)</title><rect x="634.7" y="997" width="2.4" height="15.0" fill="rgb(233,150,30)" rx="2" ry="2" />
<text  x="637.68" y="1007.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="839.3" y="677" width="0.2" height="15.0" fill="rgb(217,160,17)" rx="2" ry="2" />
<text  x="842.35" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (15 samples, 0.21%)</title><rect x="1118.7" y="645" width="2.4" height="15.0" fill="rgb(228,223,15)" rx="2" ry="2" />
<text  x="1121.71" y="655.5" ></text>
</g>
<g >
<title>do_futex (10 samples, 0.14%)</title><rect x="654.6" y="741" width="1.6" height="15.0" fill="rgb(206,115,44)" rx="2" ry="2" />
<text  x="657.56" y="751.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="110.2" y="549" width="0.2" height="15.0" fill="rgb(217,170,7)" rx="2" ry="2" />
<text  x="113.23" y="559.5" ></text>
</g>
<g >
<title>aa_file_perm (2 samples, 0.03%)</title><rect x="334.5" y="485" width="0.3" height="15.0" fill="rgb(223,97,31)" rx="2" ry="2" />
<text  x="337.46" y="495.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (3 samples, 0.04%)</title><rect x="920.8" y="389" width="0.5" height="15.0" fill="rgb(237,35,15)" rx="2" ry="2" />
<text  x="923.83" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="782.1" y="629" width="0.2" height="15.0" fill="rgb(214,177,42)" rx="2" ry="2" />
<text  x="785.12" y="639.5" ></text>
</g>
<g >
<title>ip_local_out (1 samples, 0.01%)</title><rect x="337.4" y="325" width="0.1" height="15.0" fill="rgb(240,73,2)" rx="2" ry="2" />
<text  x="340.37" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (4 samples, 0.05%)</title><rect x="1129.1" y="693" width="0.6" height="15.0" fill="rgb(219,147,42)" rx="2" ry="2" />
<text  x="1132.05" y="703.5" ></text>
</g>
<g >
<title>boost::equality_comparable&lt;muduo::Timestamp, muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt;, boost::detail::false_t&gt;::equality_comparable (1 samples, 0.01%)</title><rect x="368.4" y="741" width="0.2" height="15.0" fill="rgb(214,99,12)" rx="2" ry="2" />
<text  x="371.41" y="751.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="1129.1" y="677" width="0.1" height="15.0" fill="rgb(245,38,4)" rx="2" ry="2" />
<text  x="1132.05" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::size (2 samples, 0.03%)</title><rect x="380.7" y="805" width="0.3" height="15.0" fill="rgb(223,63,26)" rx="2" ry="2" />
<text  x="383.70" y="815.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1121.5" y="661" width="0.1" height="15.0" fill="rgb(249,163,3)" rx="2" ry="2" />
<text  x="1124.45" y="671.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="276.7" y="917" width="0.2" height="15.0" fill="rgb(253,86,41)" rx="2" ry="2" />
<text  x="279.75" y="927.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="29.9" y="949" width="0.1" height="15.0" fill="rgb(207,73,16)" rx="2" ry="2" />
<text  x="32.88" y="959.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="151.3" y="341" width="0.2" height="15.0" fill="rgb(229,220,28)" rx="2" ry="2" />
<text  x="154.30" y="351.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.01%)</title><rect x="1022.7" y="549" width="0.1" height="15.0" fill="rgb(253,1,26)" rx="2" ry="2" />
<text  x="1025.68" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="959.6" y="933" width="0.2" height="15.0" fill="rgb(219,169,14)" rx="2" ry="2" />
<text  x="962.63" y="943.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="355.8" y="533" width="0.2" height="15.0" fill="rgb(250,114,17)" rx="2" ry="2" />
<text  x="358.80" y="543.5" ></text>
</g>
<g >
<title>tcp_data_queue (397 samples, 5.44%)</title><rect x="415.0" y="101" width="64.2" height="15.0" fill="rgb(238,28,25)" rx="2" ry="2" />
<text  x="417.97" y="111.5" >tcp_dat..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt;::_Tuple_impl&lt;muduo::net::Buffer*, muduo::Timestamp, void&gt; (1 samples, 0.01%)</title><rect x="357.4" y="581" width="0.2" height="15.0" fill="rgb(219,219,46)" rx="2" ry="2" />
<text  x="360.42" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="1165.3" y="677" width="0.3" height="15.0" fill="rgb(223,113,24)" rx="2" ry="2" />
<text  x="1168.27" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="350.3" y="469" width="0.2" height="15.0" fill="rgb(218,150,23)" rx="2" ry="2" />
<text  x="353.31" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (121 samples, 1.66%)</title><rect x="39.4" y="805" width="19.6" height="15.0" fill="rgb(213,151,49)" rx="2" ry="2" />
<text  x="42.42" y="815.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (2 samples, 0.03%)</title><rect x="167.8" y="85" width="0.3" height="15.0" fill="rgb(229,208,19)" rx="2" ry="2" />
<text  x="170.79" y="95.5" ></text>
</g>
<g >
<title>_itoa_word (4 samples, 0.05%)</title><rect x="24.2" y="965" width="0.7" height="15.0" fill="rgb(221,145,50)" rx="2" ry="2" />
<text  x="27.23" y="975.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (11 samples, 0.15%)</title><rect x="992.4" y="821" width="1.8" height="15.0" fill="rgb(219,23,51)" rx="2" ry="2" />
<text  x="995.44" y="831.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="1007.8" y="645" width="0.2" height="15.0" fill="rgb(221,71,36)" rx="2" ry="2" />
<text  x="1010.80" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="1184.3" y="773" width="0.2" height="15.0" fill="rgb(209,227,9)" rx="2" ry="2" />
<text  x="1187.34" y="783.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="28.8" y="965" width="0.1" height="15.0" fill="rgb(238,139,50)" rx="2" ry="2" />
<text  x="31.75" y="975.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="770.8" y="645" width="0.2" height="15.0" fill="rgb(246,203,11)" rx="2" ry="2" />
<text  x="773.80" y="655.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (3 samples, 0.04%)</title><rect x="367.9" y="757" width="0.5" height="15.0" fill="rgb(234,21,45)" rx="2" ry="2" />
<text  x="370.93" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (3 samples, 0.04%)</title><rect x="1188.7" y="837" width="0.5" height="15.0" fill="rgb(215,217,32)" rx="2" ry="2" />
<text  x="1191.71" y="847.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="369.1" y="757" width="0.3" height="15.0" fill="rgb(245,18,26)" rx="2" ry="2" />
<text  x="372.06" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="351.0" y="501" width="0.1" height="15.0" fill="rgb(228,110,38)" rx="2" ry="2" />
<text  x="353.95" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1149.1" y="693" width="0.2" height="15.0" fill="rgb(222,190,22)" rx="2" ry="2" />
<text  x="1152.10" y="703.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="85.5" y="517" width="0.2" height="15.0" fill="rgb(240,147,54)" rx="2" ry="2" />
<text  x="88.50" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="657.1" y="757" width="0.5" height="15.0" fill="rgb(208,8,5)" rx="2" ry="2" />
<text  x="660.15" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1156.5" y="677" width="0.2" height="15.0" fill="rgb(230,176,39)" rx="2" ry="2" />
<text  x="1159.54" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (3 samples, 0.04%)</title><rect x="658.4" y="725" width="0.5" height="15.0" fill="rgb(207,103,52)" rx="2" ry="2" />
<text  x="661.44" y="735.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="482.5" y="421" width="0.2" height="15.0" fill="rgb(233,100,49)" rx="2" ry="2" />
<text  x="485.55" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple (6 samples, 0.08%)</title><rect x="348.0" y="501" width="1.0" height="15.0" fill="rgb(218,49,9)" rx="2" ry="2" />
<text  x="351.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8 samples, 0.11%)</title><rect x="786.6" y="629" width="1.3" height="15.0" fill="rgb(221,68,21)" rx="2" ry="2" />
<text  x="789.64" y="639.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator@plt (1 samples, 0.01%)</title><rect x="1157.5" y="709" width="0.2" height="15.0" fill="rgb(232,190,21)" rx="2" ry="2" />
<text  x="1160.51" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="103.1" y="501" width="0.3" height="15.0" fill="rgb(223,184,54)" rx="2" ry="2" />
<text  x="106.12" y="511.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="372.5" y="725" width="0.3" height="15.0" fill="rgb(207,14,35)" rx="2" ry="2" />
<text  x="375.46" y="735.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,354 samples, 18.55%)</title><rect x="286.8" y="901" width="218.9" height="15.0" fill="rgb(234,96,37)" rx="2" ry="2" />
<text  x="289.77" y="911.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>std::deque&lt;std::function&lt;void  (3 samples, 0.04%)</title><rect x="994.2" y="821" width="0.5" height="15.0" fill="rgb(234,32,38)" rx="2" ry="2" />
<text  x="997.22" y="831.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="295.8" y="725" width="0.2" height="15.0" fill="rgb(254,22,46)" rx="2" ry="2" />
<text  x="298.83" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="21.6" y="917" width="0.2" height="15.0" fill="rgb(218,83,54)" rx="2" ry="2" />
<text  x="24.64" y="927.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Socket, std::default_delete&lt;muduo::net::Socket&gt; &gt;::~unique_ptr (2 samples, 0.03%)</title><rect x="997.8" y="597" width="0.3" height="15.0" fill="rgb(240,93,13)" rx="2" ry="2" />
<text  x="1000.78" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, StaticServer*, false&gt;::_Head_base&lt;StaticServer*&gt; (1 samples, 0.01%)</title><rect x="346.1" y="501" width="0.2" height="15.0" fill="rgb(223,147,27)" rx="2" ry="2" />
<text  x="349.10" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,198 samples, 16.41%)</title><rect x="991.5" y="949" width="193.7" height="15.0" fill="rgb(231,111,20)" rx="2" ry="2" />
<text  x="994.47" y="959.5" >std::function&lt;void </text>
</g>
<g >
<title>do_syscall_64 (551 samples, 7.55%)</title><rect x="1028.3" y="597" width="89.1" height="15.0" fill="rgb(237,37,41)" rx="2" ry="2" />
<text  x="1031.33" y="607.5" >do_syscall..</text>
</g>
<g >
<title>muduo::Logger::Logger (19 samples, 0.26%)</title><rect x="249.3" y="805" width="3.0" height="15.0" fill="rgb(250,55,19)" rx="2" ry="2" />
<text  x="252.27" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.12%)</title><rect x="1133.9" y="645" width="1.5" height="15.0" fill="rgb(221,215,47)" rx="2" ry="2" />
<text  x="1136.90" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="350.0" y="549" width="0.3" height="15.0" fill="rgb(209,64,23)" rx="2" ry="2" />
<text  x="352.98" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="652.6" y="965" width="0.2" height="15.0" fill="rgb(219,155,50)" rx="2" ry="2" />
<text  x="655.62" y="975.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="795.7" y="677" width="0.3" height="15.0" fill="rgb(208,151,16)" rx="2" ry="2" />
<text  x="798.70" y="687.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry (1 samples, 0.01%)</title><rect x="281.9" y="949" width="0.2" height="15.0" fill="rgb(233,28,36)" rx="2" ry="2" />
<text  x="284.92" y="959.5" ></text>
</g>
<g >
<title>__libc_calloc (4 samples, 0.05%)</title><rect x="961.7" y="997" width="0.7" height="15.0" fill="rgb(218,80,34)" rx="2" ry="2" />
<text  x="964.73" y="1007.5" ></text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 0.01%)</title><rect x="584.6" y="837" width="0.1" height="15.0" fill="rgb(236,128,52)" rx="2" ry="2" />
<text  x="587.56" y="847.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::tuple&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1 samples, 0.01%)</title><rect x="1122.1" y="661" width="0.2" height="15.0" fill="rgb(212,207,42)" rx="2" ry="2" />
<text  x="1125.10" y="671.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="253.1" y="709" width="0.2" height="15.0" fill="rgb(249,105,32)" rx="2" ry="2" />
<text  x="256.15" y="719.5" ></text>
</g>
<g >
<title>inflate (1 samples, 0.01%)</title><rect x="613.5" y="981" width="0.2" height="15.0" fill="rgb(246,72,7)" rx="2" ry="2" />
<text  x="616.50" y="991.5" ></text>
</g>
<g >
<title>_int_free (25 samples, 0.34%)</title><rect x="609.0" y="981" width="4.0" height="15.0" fill="rgb(248,136,15)" rx="2" ry="2" />
<text  x="611.97" y="991.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.01%)</title><rect x="32.8" y="997" width="0.2" height="15.0" fill="rgb(214,9,29)" rx="2" ry="2" />
<text  x="35.79" y="1007.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1149.7" y="629" width="0.2" height="15.0" fill="rgb(222,68,46)" rx="2" ry="2" />
<text  x="1152.75" y="639.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::current (1 samples, 0.01%)</title><rect x="362.3" y="773" width="0.1" height="15.0" fill="rgb(212,131,44)" rx="2" ry="2" />
<text  x="365.27" y="783.5" ></text>
</g>
<g >
<title>__fget (6 samples, 0.08%)</title><rect x="327.8" y="549" width="1.0" height="15.0" fill="rgb(231,225,50)" rx="2" ry="2" />
<text  x="330.84" y="559.5" ></text>
</g>
<g >
<title>ip_local_out (489 samples, 6.70%)</title><rect x="158.6" y="405" width="79.0" height="15.0" fill="rgb(219,223,41)" rx="2" ry="2" />
<text  x="161.57" y="415.5" >ip_local_..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="363.2" y="773" width="0.2" height="15.0" fill="rgb(227,158,41)" rx="2" ry="2" />
<text  x="366.24" y="783.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.01%)</title><rect x="337.2" y="389" width="0.2" height="15.0" fill="rgb(242,71,37)" rx="2" ry="2" />
<text  x="340.21" y="399.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.01%)</title><rect x="513.6" y="789" width="0.2" height="15.0" fill="rgb(215,130,21)" rx="2" ry="2" />
<text  x="516.59" y="799.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="607.4" y="933" width="0.1" height="15.0" fill="rgb(207,204,22)" rx="2" ry="2" />
<text  x="610.36" y="943.5" ></text>
</g>
<g >
<title>lru_cache_add (4 samples, 0.05%)</title><rect x="11.5" y="757" width="0.6" height="15.0" fill="rgb(218,142,12)" rx="2" ry="2" />
<text  x="14.45" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10 samples, 0.14%)</title><rect x="1186.8" y="885" width="1.6" height="15.0" fill="rgb(212,119,49)" rx="2" ry="2" />
<text  x="1189.77" y="895.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="165.4" y="117" width="0.3" height="15.0" fill="rgb(215,112,12)" rx="2" ry="2" />
<text  x="168.36" y="127.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.01%)</title><rect x="922.4" y="469" width="0.2" height="15.0" fill="rgb(245,202,44)" rx="2" ry="2" />
<text  x="925.44" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2 samples, 0.03%)</title><rect x="680.1" y="565" width="0.3" height="15.0" fill="rgb(249,149,4)" rx="2" ry="2" />
<text  x="683.11" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="665.4" y="677" width="0.2" height="15.0" fill="rgb(223,12,27)" rx="2" ry="2" />
<text  x="668.39" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="88.6" y="629" width="0.1" height="15.0" fill="rgb(228,193,30)" rx="2" ry="2" />
<text  x="91.57" y="639.5" ></text>
</g>
<g >
<title>vfs_write (3 samples, 0.04%)</title><rect x="1186.8" y="565" width="0.5" height="15.0" fill="rgb(233,208,51)" rx="2" ry="2" />
<text  x="1189.77" y="575.5" ></text>
</g>
<g >
<title>std::_Mu&lt;muduo::net::TcpConnection*, false, false&gt;::operator (2 samples, 0.03%)</title><rect x="245.1" y="757" width="0.3" height="15.0" fill="rgb(241,206,45)" rx="2" ry="2" />
<text  x="248.06" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="783.1" y="629" width="0.1" height="15.0" fill="rgb(229,210,13)" rx="2" ry="2" />
<text  x="786.09" y="639.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1 samples, 0.01%)</title><rect x="489.3" y="757" width="0.2" height="15.0" fill="rgb(226,202,12)" rx="2" ry="2" />
<text  x="492.34" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.07%)</title><rect x="648.1" y="965" width="0.8" height="15.0" fill="rgb(207,194,47)" rx="2" ry="2" />
<text  x="651.10" y="975.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="124.9" y="741" width="0.2" height="15.0" fill="rgb(208,71,31)" rx="2" ry="2" />
<text  x="127.94" y="751.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::net::Channel* const&amp;&gt; (1 samples, 0.01%)</title><rect x="133.5" y="757" width="0.2" height="15.0" fill="rgb(206,87,16)" rx="2" ry="2" />
<text  x="136.51" y="767.5" ></text>
</g>
<g >
<title>__release_sock (1 samples, 0.01%)</title><rect x="337.2" y="405" width="0.2" height="15.0" fill="rgb(217,226,30)" rx="2" ry="2" />
<text  x="340.21" y="415.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="774.7" y="661" width="0.1" height="15.0" fill="rgb(225,71,31)" rx="2" ry="2" />
<text  x="777.68" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace@plt (1 samples, 0.01%)</title><rect x="500.5" y="789" width="0.2" height="15.0" fill="rgb(213,96,20)" rx="2" ry="2" />
<text  x="503.49" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="490.6" y="549" width="0.2" height="15.0" fill="rgb(243,169,38)" rx="2" ry="2" />
<text  x="493.63" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="656.3" y="789" width="0.2" height="15.0" fill="rgb(233,203,18)" rx="2" ry="2" />
<text  x="659.34" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (15 samples, 0.21%)</title><rect x="99.2" y="565" width="2.5" height="15.0" fill="rgb(239,228,38)" rx="2" ry="2" />
<text  x="102.24" y="575.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="493.1" y="789" width="0.1" height="15.0" fill="rgb(216,100,38)" rx="2" ry="2" />
<text  x="496.06" y="799.5" ></text>
</g>
<g >
<title>sock_write_iter (1 samples, 0.01%)</title><rect x="584.7" y="885" width="0.2" height="15.0" fill="rgb(225,162,30)" rx="2" ry="2" />
<text  x="587.72" y="895.5" ></text>
</g>
<g >
<title>ext4_file_getattr (1 samples, 0.01%)</title><rect x="1177.4" y="597" width="0.2" height="15.0" fill="rgb(205,192,33)" rx="2" ry="2" />
<text  x="1180.39" y="607.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (8 samples, 0.11%)</title><rect x="1144.4" y="709" width="1.3" height="15.0" fill="rgb(232,202,26)" rx="2" ry="2" />
<text  x="1147.41" y="719.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (10 samples, 0.14%)</title><rect x="480.1" y="309" width="1.6" height="15.0" fill="rgb(218,174,2)" rx="2" ry="2" />
<text  x="483.12" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (4 samples, 0.05%)</title><rect x="341.1" y="421" width="0.6" height="15.0" fill="rgb(206,57,31)" rx="2" ry="2" />
<text  x="344.09" y="431.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.34 (2 samples, 0.03%)</title><rect x="13.6" y="773" width="0.3" height="15.0" fill="rgb(245,165,41)" rx="2" ry="2" />
<text  x="16.56" y="783.5" ></text>
</g>
<g >
<title>muduo::Timestamp::microSecondsSinceEpoch (1 samples, 0.01%)</title><rect x="64.3" y="757" width="0.2" height="15.0" fill="rgb(205,92,38)" rx="2" ry="2" />
<text  x="67.32" y="767.5" ></text>
</g>
<g >
<title>strrchr (2 samples, 0.03%)</title><rect x="796.7" y="693" width="0.3" height="15.0" fill="rgb(220,48,45)" rx="2" ry="2" />
<text  x="799.67" y="703.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.01%)</title><rect x="926.8" y="741" width="0.2" height="15.0" fill="rgb(207,228,5)" rx="2" ry="2" />
<text  x="929.81" y="751.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="873.3" y="821" width="0.2" height="15.0" fill="rgb(205,61,20)" rx="2" ry="2" />
<text  x="876.30" y="831.5" ></text>
</g>
<g >
<title>_IO_setb (3 samples, 0.04%)</title><rect x="603.3" y="981" width="0.5" height="15.0" fill="rgb(248,168,36)" rx="2" ry="2" />
<text  x="606.31" y="991.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="35.4" y="949" width="0.3" height="15.0" fill="rgb(229,99,18)" rx="2" ry="2" />
<text  x="38.38" y="959.5" ></text>
</g>
<g >
<title>sys_read (1 samples, 0.01%)</title><rect x="533.0" y="965" width="0.2" height="15.0" fill="rgb(225,2,48)" rx="2" ry="2" />
<text  x="535.99" y="975.5" ></text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.01%)</title><rect x="396.5" y="501" width="0.2" height="15.0" fill="rgb(223,204,21)" rx="2" ry="2" />
<text  x="399.54" y="511.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (1 samples, 0.01%)</title><rect x="1189.5" y="917" width="0.2" height="15.0" fill="rgb(231,157,34)" rx="2" ry="2" />
<text  x="1192.52" y="927.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1152.8" y="693" width="0.2" height="15.0" fill="rgb(243,71,13)" rx="2" ry="2" />
<text  x="1155.82" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (9 samples, 0.12%)</title><rect x="105.4" y="517" width="1.4" height="15.0" fill="rgb(217,160,49)" rx="2" ry="2" />
<text  x="108.38" y="527.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (599 samples, 8.21%)</title><rect x="1024.8" y="677" width="96.8" height="15.0" fill="rgb(216,166,28)" rx="2" ry="2" />
<text  x="1027.78" y="687.5" >muduo::net:..</text>
</g>
<g >
<title>inet_sendmsg (236 samples, 3.23%)</title><rect x="890.6" y="837" width="38.1" height="15.0" fill="rgb(207,110,27)" rx="2" ry="2" />
<text  x="893.59" y="847.5" >ine..</text>
</g>
<g >
<title>muduo::net::EPollPoller::update (1 samples, 0.01%)</title><rect x="88.1" y="437" width="0.1" height="15.0" fill="rgb(211,141,44)" rx="2" ry="2" />
<text  x="91.08" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="633.5" y="949" width="0.5" height="15.0" fill="rgb(240,221,43)" rx="2" ry="2" />
<text  x="636.55" y="959.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="248.9" y="805" width="0.4" height="15.0" fill="rgb(226,58,17)" rx="2" ry="2" />
<text  x="251.94" y="815.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (1 samples, 0.01%)</title><rect x="658.8" y="581" width="0.1" height="15.0" fill="rgb(240,174,41)" rx="2" ry="2" />
<text  x="661.77" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="351.3" y="501" width="0.1" height="15.0" fill="rgb(209,92,0)" rx="2" ry="2" />
<text  x="354.28" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4 samples, 0.05%)</title><rect x="811.5" y="709" width="0.7" height="15.0" fill="rgb(222,190,9)" rx="2" ry="2" />
<text  x="814.54" y="719.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (2 samples, 0.03%)</title><rect x="1021.2" y="693" width="0.3" height="15.0" fill="rgb(217,209,24)" rx="2" ry="2" />
<text  x="1024.22" y="703.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.01%)</title><rect x="81.0" y="453" width="0.1" height="15.0" fill="rgb(252,1,21)" rx="2" ry="2" />
<text  x="83.97" y="463.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.01%)</title><rect x="926.5" y="709" width="0.1" height="15.0" fill="rgb(242,38,23)" rx="2" ry="2" />
<text  x="929.48" y="719.5" ></text>
</g>
<g >
<title>set_normalized_timespec64 (1 samples, 0.01%)</title><rect x="308.4" y="725" width="0.2" height="15.0" fill="rgb(234,192,20)" rx="2" ry="2" />
<text  x="311.44" y="735.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="87.6" y="645" width="0.2" height="15.0" fill="rgb(230,74,23)" rx="2" ry="2" />
<text  x="90.60" y="655.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (5 samples, 0.07%)</title><rect x="239.9" y="437" width="0.8" height="15.0" fill="rgb(213,160,44)" rx="2" ry="2" />
<text  x="242.89" y="447.5" ></text>
</g>
<g >
<title>ksize (1 samples, 0.01%)</title><rect x="895.8" y="757" width="0.1" height="15.0" fill="rgb(235,13,39)" rx="2" ry="2" />
<text  x="898.77" y="767.5" ></text>
</g>
<g >
<title>kmem_cache_free (2 samples, 0.03%)</title><rect x="330.1" y="437" width="0.3" height="15.0" fill="rgb(251,89,36)" rx="2" ry="2" />
<text  x="333.10" y="447.5" ></text>
</g>
<g >
<title>apparmor_file_permission (2 samples, 0.03%)</title><rect x="585.9" y="869" width="0.3" height="15.0" fill="rgb(252,70,36)" rx="2" ry="2" />
<text  x="588.85" y="879.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="110.6" y="645" width="0.1" height="15.0" fill="rgb(234,52,29)" rx="2" ry="2" />
<text  x="113.56" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="806.0" y="581" width="0.2" height="15.0" fill="rgb(224,67,21)" rx="2" ry="2" />
<text  x="809.04" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="309.6" y="789" width="0.1" height="15.0" fill="rgb(248,122,41)" rx="2" ry="2" />
<text  x="312.57" y="799.5" ></text>
</g>
<g >
<title>__follow_mount_rcu.isra.27 (1 samples, 0.01%)</title><rect x="1170.6" y="549" width="0.2" height="15.0" fill="rgb(227,137,21)" rx="2" ry="2" />
<text  x="1173.60" y="559.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::lock (3 samples, 0.04%)</title><rect x="355.2" y="565" width="0.4" height="15.0" fill="rgb(247,24,2)" rx="2" ry="2" />
<text  x="358.16" y="575.5" ></text>
</g>
<g >
<title>eventfd_write (2 samples, 0.03%)</title><rect x="1115.1" y="549" width="0.4" height="15.0" fill="rgb(210,138,4)" rx="2" ry="2" />
<text  x="1118.15" y="559.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1 samples, 0.01%)</title><rect x="11.1" y="741" width="0.2" height="15.0" fill="rgb(238,214,43)" rx="2" ry="2" />
<text  x="14.13" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::get (2 samples, 0.03%)</title><rect x="487.2" y="661" width="0.4" height="15.0" fill="rgb(233,51,45)" rx="2" ry="2" />
<text  x="490.24" y="671.5" ></text>
</g>
<g >
<title>__slab_free (2 samples, 0.03%)</title><rect x="330.7" y="389" width="0.4" height="15.0" fill="rgb(218,83,27)" rx="2" ry="2" />
<text  x="333.75" y="399.5" ></text>
</g>
<g >
<title>walk_component (20 samples, 0.27%)</title><rect x="826.1" y="565" width="3.2" height="15.0" fill="rgb(232,102,18)" rx="2" ry="2" />
<text  x="829.09" y="575.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (265 samples, 3.63%)</title><rect x="69.5" y="741" width="42.8" height="15.0" fill="rgb(246,16,27)" rx="2" ry="2" />
<text  x="72.49" y="751.5" >std:..</text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (1 samples, 0.01%)</title><rect x="1006.3" y="677" width="0.2" height="15.0" fill="rgb(237,78,23)" rx="2" ry="2" />
<text  x="1009.35" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (19 samples, 0.26%)</title><rect x="1132.9" y="693" width="3.1" height="15.0" fill="rgb(221,25,30)" rx="2" ry="2" />
<text  x="1135.93" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_close (1 samples, 0.01%)</title><rect x="658.8" y="549" width="0.1" height="15.0" fill="rgb(254,127,1)" rx="2" ry="2" />
<text  x="661.77" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="807.5" y="645" width="0.2" height="15.0" fill="rgb(207,60,50)" rx="2" ry="2" />
<text  x="810.50" y="655.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.01%)</title><rect x="989.4" y="997" width="0.1" height="15.0" fill="rgb(238,46,46)" rx="2" ry="2" />
<text  x="992.37" y="1007.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (3 samples, 0.04%)</title><rect x="338.2" y="677" width="0.5" height="15.0" fill="rgb(246,170,50)" rx="2" ry="2" />
<text  x="341.18" y="687.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="331.7" y="469" width="0.2" height="15.0" fill="rgb(235,84,34)" rx="2" ry="2" />
<text  x="334.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (35 samples, 0.48%)</title><rect x="790.0" y="677" width="5.7" height="15.0" fill="rgb(209,28,17)" rx="2" ry="2" />
<text  x="793.04" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="339.2" y="597" width="0.1" height="15.0" fill="rgb(252,192,50)" rx="2" ry="2" />
<text  x="342.15" y="607.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="331.4" y="437" width="0.2" height="15.0" fill="rgb(217,10,1)" rx="2" ry="2" />
<text  x="334.39" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7 samples, 0.10%)</title><rect x="1134.2" y="629" width="1.2" height="15.0" fill="rgb(240,23,31)" rx="2" ry="2" />
<text  x="1137.23" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="625.0" y="949" width="0.1" height="15.0" fill="rgb(219,109,6)" rx="2" ry="2" />
<text  x="627.98" y="959.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="766.1" y="613" width="0.2" height="15.0" fill="rgb(228,47,44)" rx="2" ry="2" />
<text  x="769.11" y="623.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.01%)</title><rect x="82.6" y="149" width="0.1" height="15.0" fill="rgb(213,166,25)" rx="2" ry="2" />
<text  x="85.59" y="159.5" ></text>
</g>
<g >
<title>__virt_addr_valid (4 samples, 0.05%)</title><rect x="530.2" y="789" width="0.7" height="15.0" fill="rgb(229,141,5)" rx="2" ry="2" />
<text  x="533.24" y="799.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple (3 samples, 0.04%)</title><rect x="657.1" y="741" width="0.5" height="15.0" fill="rgb(249,1,36)" rx="2" ry="2" />
<text  x="660.15" y="751.5" ></text>
</g>
<g >
<title>operator new@plt (1 samples, 0.01%)</title><rect x="657.0" y="773" width="0.1" height="15.0" fill="rgb(254,67,28)" rx="2" ry="2" />
<text  x="659.99" y="783.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12 samples, 0.16%)</title><rect x="1124.0" y="677" width="2.0" height="15.0" fill="rgb(249,225,6)" rx="2" ry="2" />
<text  x="1127.04" y="687.5" ></text>
</g>
<g >
<title>__kfree_skb (3 samples, 0.04%)</title><rect x="847.4" y="821" width="0.5" height="15.0" fill="rgb(219,83,8)" rx="2" ry="2" />
<text  x="850.43" y="831.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="652.5" y="981" width="0.1" height="15.0" fill="rgb(251,196,35)" rx="2" ry="2" />
<text  x="655.46" y="991.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,129 samples, 15.47%)</title><rect x="659.4" y="773" width="182.5" height="15.0" fill="rgb(232,174,28)" rx="2" ry="2" />
<text  x="662.41" y="783.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1147.6" y="629" width="0.2" height="15.0" fill="rgb(210,89,20)" rx="2" ry="2" />
<text  x="1150.64" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="789.4" y="597" width="0.2" height="15.0" fill="rgb(241,85,27)" rx="2" ry="2" />
<text  x="792.39" y="607.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="28.8" y="869" width="0.1" height="15.0" fill="rgb(216,66,30)" rx="2" ry="2" />
<text  x="31.75" y="879.5" ></text>
</g>
<g >
<title>__dynamic_cast (13 samples, 0.18%)</title><rect x="15.5" y="965" width="2.1" height="15.0" fill="rgb(249,9,14)" rx="2" ry="2" />
<text  x="18.50" y="975.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.01%)</title><rect x="330.3" y="293" width="0.1" height="15.0" fill="rgb(209,147,10)" rx="2" ry="2" />
<text  x="333.26" y="303.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="995.5" y="549" width="0.3" height="15.0" fill="rgb(222,20,24)" rx="2" ry="2" />
<text  x="998.52" y="559.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.01%)</title><rect x="930.4" y="933" width="0.1" height="15.0" fill="rgb(205,76,17)" rx="2" ry="2" />
<text  x="933.36" y="943.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (16 samples, 0.22%)</title><rect x="670.1" y="677" width="2.6" height="15.0" fill="rgb(221,164,36)" rx="2" ry="2" />
<text  x="673.08" y="687.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="344.2" y="501" width="0.1" height="15.0" fill="rgb(224,110,20)" rx="2" ry="2" />
<text  x="347.16" y="511.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (2 samples, 0.03%)</title><rect x="99.7" y="517" width="0.3" height="15.0" fill="rgb(242,2,3)" rx="2" ry="2" />
<text  x="102.72" y="527.5" ></text>
</g>
<g >
<title>__alloc_skb (10 samples, 0.14%)</title><rect x="154.4" y="469" width="1.6" height="15.0" fill="rgb(249,43,52)" rx="2" ry="2" />
<text  x="157.37" y="479.5" ></text>
</g>
<g >
<title>free (3 samples, 0.04%)</title><rect x="613.0" y="981" width="0.5" height="15.0" fill="rgb(213,76,1)" rx="2" ry="2" />
<text  x="616.01" y="991.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="992.0" y="677" width="0.1" height="15.0" fill="rgb(212,215,42)" rx="2" ry="2" />
<text  x="994.96" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1113.9" y="501" width="0.1" height="15.0" fill="rgb(219,14,10)" rx="2" ry="2" />
<text  x="1116.86" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="97.5" y="485" width="0.1" height="15.0" fill="rgb(236,71,19)" rx="2" ry="2" />
<text  x="100.46" y="495.5" ></text>
</g>
<g >
<title>tcp_recvmsg (1 samples, 0.01%)</title><rect x="531.9" y="853" width="0.1" height="15.0" fill="rgb(253,147,30)" rx="2" ry="2" />
<text  x="534.86" y="863.5" ></text>
</g>
<g >
<title>_int_free (12 samples, 0.16%)</title><rect x="276.9" y="981" width="2.0" height="15.0" fill="rgb(229,155,27)" rx="2" ry="2" />
<text  x="279.91" y="991.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4 samples, 0.05%)</title><rect x="995.8" y="789" width="0.7" height="15.0" fill="rgb(244,123,10)" rx="2" ry="2" />
<text  x="998.84" y="799.5" ></text>
</g>
<g >
<title>vmware_sched_clock (1 samples, 0.01%)</title><rect x="333.2" y="437" width="0.1" height="15.0" fill="rgb(251,196,8)" rx="2" ry="2" />
<text  x="336.17" y="447.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (4 samples, 0.05%)</title><rect x="124.3" y="773" width="0.6" height="15.0" fill="rgb(243,82,50)" rx="2" ry="2" />
<text  x="127.30" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="338.5" y="613" width="0.2" height="15.0" fill="rgb(230,213,33)" rx="2" ry="2" />
<text  x="341.51" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="663.9" y="661" width="0.2" height="15.0" fill="rgb(239,109,3)" rx="2" ry="2" />
<text  x="666.94" y="671.5" ></text>
</g>
<g >
<title>wake_up_q (4 samples, 0.05%)</title><rect x="93.1" y="437" width="0.6" height="15.0" fill="rgb(254,209,30)" rx="2" ry="2" />
<text  x="96.10" y="447.5" ></text>
</g>
<g >
<title>redisGetReply (1 samples, 0.01%)</title><rect x="774.8" y="693" width="0.2" height="15.0" fill="rgb(205,200,8)" rx="2" ry="2" />
<text  x="777.84" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, unsigned long, false&gt;::_S_equals (1 samples, 0.01%)</title><rect x="350.8" y="485" width="0.2" height="15.0" fill="rgb(242,126,40)" rx="2" ry="2" />
<text  x="353.79" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="124.9" y="757" width="0.2" height="15.0" fill="rgb(225,178,34)" rx="2" ry="2" />
<text  x="127.94" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="818.7" y="677" width="0.3" height="15.0" fill="rgb(226,179,23)" rx="2" ry="2" />
<text  x="821.65" y="687.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.01%)</title><rect x="575.5" y="389" width="0.2" height="15.0" fill="rgb(209,90,0)" rx="2" ry="2" />
<text  x="578.51" y="399.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="652.6" y="949" width="0.2" height="15.0" fill="rgb(237,59,3)" rx="2" ry="2" />
<text  x="655.62" y="959.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (1 samples, 0.01%)</title><rect x="496.0" y="757" width="0.1" height="15.0" fill="rgb(222,83,33)" rx="2" ry="2" />
<text  x="498.97" y="767.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.01%)</title><rect x="948.8" y="885" width="0.2" height="15.0" fill="rgb(249,157,30)" rx="2" ry="2" />
<text  x="951.79" y="895.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="94.2" y="517" width="0.2" height="15.0" fill="rgb(205,113,42)" rx="2" ry="2" />
<text  x="97.23" y="527.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="28.8" y="901" width="0.1" height="15.0" fill="rgb(213,147,45)" rx="2" ry="2" />
<text  x="31.75" y="911.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (12 samples, 0.16%)</title><rect x="529.4" y="821" width="2.0" height="15.0" fill="rgb(243,51,24)" rx="2" ry="2" />
<text  x="532.43" y="831.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (5 samples, 0.07%)</title><rect x="122.8" y="725" width="0.9" height="15.0" fill="rgb(243,107,27)" rx="2" ry="2" />
<text  x="125.84" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="817.2" y="677" width="0.3" height="15.0" fill="rgb(229,208,41)" rx="2" ry="2" />
<text  x="820.20" y="687.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (3 samples, 0.04%)</title><rect x="10.2" y="805" width="0.4" height="15.0" fill="rgb(248,55,2)" rx="2" ry="2" />
<text  x="13.16" y="815.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="818.3" y="661" width="0.2" height="15.0" fill="rgb(229,94,5)" rx="2" ry="2" />
<text  x="821.33" y="671.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (2 samples, 0.03%)</title><rect x="12.6" y="805" width="0.3" height="15.0" fill="rgb(223,1,2)" rx="2" ry="2" />
<text  x="15.59" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="766.9" y="597" width="0.2" height="15.0" fill="rgb(236,55,54)" rx="2" ry="2" />
<text  x="769.92" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6 samples, 0.08%)</title><rect x="1022.0" y="597" width="1.0" height="15.0" fill="rgb(229,135,20)" rx="2" ry="2" />
<text  x="1025.03" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="324.8" y="645" width="0.1" height="15.0" fill="rgb(243,54,23)" rx="2" ry="2" />
<text  x="327.76" y="655.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (2 samples, 0.03%)</title><rect x="128.8" y="725" width="0.3" height="15.0" fill="rgb(221,95,53)" rx="2" ry="2" />
<text  x="131.82" y="735.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="842.3" y="773" width="0.1" height="15.0" fill="rgb(250,128,18)" rx="2" ry="2" />
<text  x="845.26" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="347.9" y="469" width="0.1" height="15.0" fill="rgb(223,52,29)" rx="2" ry="2" />
<text  x="350.88" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_close (1 samples, 0.01%)</title><rect x="997.8" y="549" width="0.1" height="15.0" fill="rgb(225,90,39)" rx="2" ry="2" />
<text  x="1000.78" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;void  (652 samples, 8.93%)</title><rect x="384.1" y="805" width="105.4" height="15.0" fill="rgb(246,72,39)" rx="2" ry="2" />
<text  x="387.10" y="815.5" >std::functio..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="368.7" y="709" width="0.2" height="15.0" fill="rgb(247,4,23)" rx="2" ry="2" />
<text  x="371.74" y="719.5" ></text>
</g>
<g >
<title>muduo::MutexLock::unlock (1 samples, 0.01%)</title><rect x="252.7" y="741" width="0.1" height="15.0" fill="rgb(243,3,50)" rx="2" ry="2" />
<text  x="255.66" y="751.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="330.3" y="389" width="0.1" height="15.0" fill="rgb(249,103,0)" rx="2" ry="2" />
<text  x="333.26" y="399.5" ></text>
</g>
<g >
<title>tcp_ack (1 samples, 0.01%)</title><rect x="560.5" y="421" width="0.1" height="15.0" fill="rgb(232,92,49)" rx="2" ry="2" />
<text  x="563.47" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="343.0" y="421" width="0.2" height="15.0" fill="rgb(224,140,54)" rx="2" ry="2" />
<text  x="346.03" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="763.2" y="517" width="0.2" height="15.0" fill="rgb(212,148,16)" rx="2" ry="2" />
<text  x="766.20" y="527.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.01%)</title><rect x="895.3" y="741" width="0.1" height="15.0" fill="rgb(242,226,46)" rx="2" ry="2" />
<text  x="898.28" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="108.9" y="597" width="0.2" height="15.0" fill="rgb(253,126,0)" rx="2" ry="2" />
<text  x="111.94" y="607.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (6 samples, 0.08%)</title><rect x="372.5" y="773" width="0.9" height="15.0" fill="rgb(213,79,35)" rx="2" ry="2" />
<text  x="375.46" y="783.5" ></text>
</g>
<g >
<title>vfs_write (257 samples, 3.52%)</title><rect x="888.8" y="917" width="41.6" height="15.0" fill="rgb(215,167,32)" rx="2" ry="2" />
<text  x="891.82" y="927.5" >vfs..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="503.1" y="805" width="0.1" height="15.0" fill="rgb(216,111,28)" rx="2" ry="2" />
<text  x="506.08" y="815.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="286.6" y="933" width="0.2" height="15.0" fill="rgb(232,216,51)" rx="2" ry="2" />
<text  x="289.61" y="943.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1143.3" y="693" width="0.1" height="15.0" fill="rgb(226,215,15)" rx="2" ry="2" />
<text  x="1146.28" y="703.5" ></text>
</g>
<g >
<title>__skb_clone (1 samples, 0.01%)</title><rect x="482.1" y="405" width="0.1" height="15.0" fill="rgb(243,196,6)" rx="2" ry="2" />
<text  x="485.06" y="415.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="496.6" y="789" width="0.2" height="15.0" fill="rgb(231,171,54)" rx="2" ry="2" />
<text  x="499.61" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.25%)</title><rect x="791.5" y="645" width="2.9" height="15.0" fill="rgb(234,185,32)" rx="2" ry="2" />
<text  x="794.49" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="1158.5" y="693" width="0.3" height="15.0" fill="rgb(247,88,9)" rx="2" ry="2" />
<text  x="1161.48" y="703.5" ></text>
</g>
<g >
<title>__fdget_pos (2 samples, 0.03%)</title><rect x="76.0" y="597" width="0.3" height="15.0" fill="rgb(239,205,42)" rx="2" ry="2" />
<text  x="78.96" y="607.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::~FixedBuffer (1 samples, 0.01%)</title><rect x="804.1" y="677" width="0.2" height="15.0" fill="rgb(210,37,54)" rx="2" ry="2" />
<text  x="807.10" y="687.5" ></text>
</g>
<g >
<title>bictcp_acked (1 samples, 0.01%)</title><rect x="910.8" y="373" width="0.2" height="15.0" fill="rgb(228,128,47)" rx="2" ry="2" />
<text  x="913.80" y="383.5" ></text>
</g>
<g >
<title>__netif_receive_skb (1 samples, 0.01%)</title><rect x="82.6" y="229" width="0.1" height="15.0" fill="rgb(219,62,6)" rx="2" ry="2" />
<text  x="85.59" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="352.9" y="421" width="0.2" height="15.0" fill="rgb(214,59,38)" rx="2" ry="2" />
<text  x="355.89" y="431.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="667.8" y="661" width="0.2" height="15.0" fill="rgb(236,191,34)" rx="2" ry="2" />
<text  x="670.82" y="671.5" ></text>
</g>
<g >
<title>_IO_setb (1 samples, 0.01%)</title><rect x="271.6" y="981" width="0.1" height="15.0" fill="rgb(230,135,16)" rx="2" ry="2" />
<text  x="274.58" y="991.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (1 samples, 0.01%)</title><rect x="385.2" y="565" width="0.2" height="15.0" fill="rgb(221,98,1)" rx="2" ry="2" />
<text  x="388.23" y="575.5" ></text>
</g>
<g >
<title>skb_release_head_state (1 samples, 0.01%)</title><rect x="847.8" y="805" width="0.1" height="15.0" fill="rgb(223,62,22)" rx="2" ry="2" />
<text  x="850.75" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, unsigned long, false&gt;::_S_equals (2 samples, 0.03%)</title><rect x="106.4" y="469" width="0.3" height="15.0" fill="rgb(218,201,40)" rx="2" ry="2" />
<text  x="109.35" y="479.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 0.01%)</title><rect x="778.6" y="597" width="0.1" height="15.0" fill="rgb(241,105,11)" rx="2" ry="2" />
<text  x="781.56" y="607.5" ></text>
</g>
<g >
<title>sys_shutdown (3 samples, 0.04%)</title><rect x="337.1" y="453" width="0.4" height="15.0" fill="rgb(205,130,32)" rx="2" ry="2" />
<text  x="340.05" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="66.6" y="757" width="0.1" height="15.0" fill="rgb(238,58,43)" rx="2" ry="2" />
<text  x="69.58" y="767.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="831.1" y="549" width="0.2" height="15.0" fill="rgb(254,33,50)" rx="2" ry="2" />
<text  x="834.10" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="248.6" y="789" width="0.2" height="15.0" fill="rgb(231,124,27)" rx="2" ry="2" />
<text  x="251.62" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string@plt (1 samples, 0.01%)</title><rect x="665.9" y="677" width="0.1" height="15.0" fill="rgb(233,202,15)" rx="2" ry="2" />
<text  x="668.88" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="496.5" y="709" width="0.1" height="15.0" fill="rgb(227,24,15)" rx="2" ry="2" />
<text  x="499.45" y="719.5" ></text>
</g>
<g >
<title>__pthread_once (2 samples, 0.03%)</title><rect x="30.0" y="949" width="0.4" height="15.0" fill="rgb(226,54,11)" rx="2" ry="2" />
<text  x="33.05" y="959.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (15 samples, 0.21%)</title><rect x="1009.7" y="661" width="2.5" height="15.0" fill="rgb(213,180,29)" rx="2" ry="2" />
<text  x="1012.74" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.07%)</title><rect x="1159.8" y="661" width="0.8" height="15.0" fill="rgb(254,110,29)" rx="2" ry="2" />
<text  x="1162.77" y="671.5" ></text>
</g>
<g >
<title>node_dirty_ok (1 samples, 0.01%)</title><rect x="10.8" y="709" width="0.2" height="15.0" fill="rgb(205,75,22)" rx="2" ry="2" />
<text  x="13.81" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="1150.6" y="661" width="0.1" height="15.0" fill="rgb(230,146,52)" rx="2" ry="2" />
<text  x="1153.55" y="671.5" ></text>
</g>
<g >
<title>skb_free_head (2 samples, 0.03%)</title><rect x="910.5" y="325" width="0.3" height="15.0" fill="rgb(231,189,53)" rx="2" ry="2" />
<text  x="913.48" y="335.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (2 samples, 0.03%)</title><rect x="400.1" y="437" width="0.3" height="15.0" fill="rgb(241,130,8)" rx="2" ry="2" />
<text  x="403.10" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (157 samples, 2.15%)</title><rect x="507.8" y="981" width="25.4" height="15.0" fill="rgb(252,18,20)" rx="2" ry="2" />
<text  x="510.77" y="991.5" >e..</text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1 samples, 0.01%)</title><rect x="137.7" y="581" width="0.2" height="15.0" fill="rgb(207,121,50)" rx="2" ry="2" />
<text  x="140.72" y="591.5" ></text>
</g>
<g >
<title>tcp_send_mss (4 samples, 0.05%)</title><rect x="928.1" y="789" width="0.6" height="15.0" fill="rgb(223,125,16)" rx="2" ry="2" />
<text  x="931.10" y="799.5" ></text>
</g>
<g >
<title>__fget (3 samples, 0.04%)</title><rect x="76.3" y="549" width="0.5" height="15.0" fill="rgb(213,4,53)" rx="2" ry="2" />
<text  x="79.28" y="559.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="513.4" y="773" width="0.2" height="15.0" fill="rgb(248,56,39)" rx="2" ry="2" />
<text  x="516.43" y="783.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="283.1" y="965" width="0.1" height="15.0" fill="rgb(233,191,23)" rx="2" ry="2" />
<text  x="286.05" y="975.5" ></text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.01%)</title><rect x="151.0" y="501" width="0.1" height="15.0" fill="rgb(205,173,38)" rx="2" ry="2" />
<text  x="153.97" y="511.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (84 samples, 1.15%)</title><rect x="44.8" y="741" width="13.5" height="15.0" fill="rgb(223,24,16)" rx="2" ry="2" />
<text  x="47.76" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="33.9" y="981" width="0.2" height="15.0" fill="rgb(241,154,42)" rx="2" ry="2" />
<text  x="36.93" y="991.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (677 samples, 9.28%)</title><rect x="136.1" y="789" width="109.4" height="15.0" fill="rgb(232,70,34)" rx="2" ry="2" />
<text  x="139.10" y="799.5" >std::_Functio..</text>
</g>
<g >
<title>__strcasecmp_l_avx (3 samples, 0.04%)</title><rect x="1164.5" y="725" width="0.4" height="15.0" fill="rgb(251,219,35)" rx="2" ry="2" />
<text  x="1167.46" y="735.5" ></text>
</g>
<g >
<title>__xstat64 (74 samples, 1.01%)</title><rect x="1165.6" y="725" width="12.0" height="15.0" fill="rgb(234,27,30)" rx="2" ry="2" />
<text  x="1168.59" y="735.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (1 samples, 0.01%)</title><rect x="1015.1" y="629" width="0.1" height="15.0" fill="rgb(217,72,23)" rx="2" ry="2" />
<text  x="1018.08" y="639.5" ></text>
</g>
<g >
<title>muduo::net::Socket::~Socket (1 samples, 0.01%)</title><rect x="658.8" y="565" width="0.1" height="15.0" fill="rgb(252,174,46)" rx="2" ry="2" />
<text  x="661.77" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::operator= (1 samples, 0.01%)</title><rect x="1188.2" y="597" width="0.2" height="15.0" fill="rgb(230,129,7)" rx="2" ry="2" />
<text  x="1191.22" y="607.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base@plt (1 samples, 0.01%)</title><rect x="261.4" y="917" width="0.2" height="15.0" fill="rgb(213,134,48)" rx="2" ry="2" />
<text  x="264.39" y="927.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="948.8" y="933" width="0.2" height="15.0" fill="rgb(219,158,25)" rx="2" ry="2" />
<text  x="951.79" y="943.5" ></text>
</g>
<g >
<title>eventfd_write (2 samples, 0.03%)</title><rect x="764.0" y="549" width="0.3" height="15.0" fill="rgb(212,18,6)" rx="2" ry="2" />
<text  x="767.01" y="559.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="369.9" y="757" width="0.1" height="15.0" fill="rgb(248,132,23)" rx="2" ry="2" />
<text  x="372.87" y="767.5" ></text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.01%)</title><rect x="82.6" y="101" width="0.1" height="15.0" fill="rgb(254,146,49)" rx="2" ry="2" />
<text  x="85.59" y="111.5" ></text>
</g>
<g >
<title>schedule (70 samples, 0.96%)</title><rect x="296.5" y="709" width="11.3" height="15.0" fill="rgb(226,227,30)" rx="2" ry="2" />
<text  x="299.47" y="719.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (3 samples, 0.04%)</title><rect x="414.2" y="85" width="0.4" height="15.0" fill="rgb(248,16,1)" rx="2" ry="2" />
<text  x="417.16" y="95.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (1 samples, 0.01%)</title><rect x="64.6" y="741" width="0.2" height="15.0" fill="rgb(209,124,22)" rx="2" ry="2" />
<text  x="67.64" y="751.5" ></text>
</g>
<g >
<title>fput (2 samples, 0.03%)</title><rect x="289.0" y="773" width="0.4" height="15.0" fill="rgb(209,57,5)" rx="2" ry="2" />
<text  x="292.04" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;epoll_event*, std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="381.0" y="789" width="0.2" height="15.0" fill="rgb(238,198,39)" rx="2" ry="2" />
<text  x="384.02" y="799.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="135.3" y="805" width="0.2" height="15.0" fill="rgb(247,197,38)" rx="2" ry="2" />
<text  x="138.29" y="815.5" ></text>
</g>
<g >
<title>generic_fillattr (2 samples, 0.03%)</title><rect x="835.6" y="565" width="0.4" height="15.0" fill="rgb(226,93,35)" rx="2" ry="2" />
<text  x="838.63" y="575.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="351.0" y="469" width="0.1" height="15.0" fill="rgb(242,152,48)" rx="2" ry="2" />
<text  x="353.95" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="496.5" y="693" width="0.1" height="15.0" fill="rgb(226,76,38)" rx="2" ry="2" />
<text  x="499.45" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (3 samples, 0.04%)</title><rect x="815.4" y="709" width="0.5" height="15.0" fill="rgb(214,107,21)" rx="2" ry="2" />
<text  x="818.42" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="797.0" y="677" width="0.3" height="15.0" fill="rgb(209,214,53)" rx="2" ry="2" />
<text  x="799.99" y="687.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::printActiveChannels (54 samples, 0.74%)</title><rect x="248.8" y="821" width="8.7" height="15.0" fill="rgb(246,78,50)" rx="2" ry="2" />
<text  x="251.78" y="831.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="657.1" y="661" width="0.4" height="15.0" fill="rgb(246,88,46)" rx="2" ry="2" />
<text  x="660.15" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="370.2" y="709" width="0.2" height="15.0" fill="rgb(240,73,41)" rx="2" ry="2" />
<text  x="373.19" y="719.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (1 samples, 0.01%)</title><rect x="66.3" y="757" width="0.1" height="15.0" fill="rgb(219,120,46)" rx="2" ry="2" />
<text  x="69.26" y="767.5" ></text>
</g>
<g >
<title>sock_common_setsockopt (1 samples, 0.01%)</title><rect x="385.7" y="501" width="0.2" height="15.0" fill="rgb(244,143,1)" rx="2" ry="2" />
<text  x="388.71" y="511.5" ></text>
</g>
<g >
<title>release_sock (2 samples, 0.03%)</title><rect x="81.1" y="469" width="0.4" height="15.0" fill="rgb(234,161,36)" rx="2" ry="2" />
<text  x="84.13" y="479.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="1117.3" y="501" width="0.1" height="15.0" fill="rgb(245,63,19)" rx="2" ry="2" />
<text  x="1120.25" y="511.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="850.3" y="645" width="0.2" height="15.0" fill="rgb(210,83,4)" rx="2" ry="2" />
<text  x="853.34" y="655.5" ></text>
</g>
<g >
<title>__check_object_size (5 samples, 0.07%)</title><rect x="398.0" y="485" width="0.8" height="15.0" fill="rgb(252,26,12)" rx="2" ry="2" />
<text  x="401.00" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.03%)</title><rect x="809.3" y="709" width="0.3" height="15.0" fill="rgb(237,206,2)" rx="2" ry="2" />
<text  x="812.28" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1133.1" y="661" width="0.2" height="15.0" fill="rgb(244,67,18)" rx="2" ry="2" />
<text  x="1136.09" y="671.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="992.0" y="709" width="0.1" height="15.0" fill="rgb(205,161,33)" rx="2" ry="2" />
<text  x="994.96" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="276.6" y="933" width="0.1" height="15.0" fill="rgb(228,99,7)" rx="2" ry="2" />
<text  x="279.59" y="943.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (3 samples, 0.04%)</title><rect x="798.0" y="709" width="0.4" height="15.0" fill="rgb(245,165,45)" rx="2" ry="2" />
<text  x="800.96" y="719.5" ></text>
</g>
<g >
<title>ip_finish_output2 (477 samples, 6.54%)</title><rect x="404.9" y="357" width="77.2" height="15.0" fill="rgb(252,115,27)" rx="2" ry="2" />
<text  x="407.95" y="367.5" >ip_finis..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="819.0" y="645" width="0.1" height="15.0" fill="rgb(231,144,20)" rx="2" ry="2" />
<text  x="821.98" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::startThread (1,174 samples, 16.08%)</title><rect x="652.9" y="981" width="189.8" height="15.0" fill="rgb(227,72,9)" rx="2" ry="2" />
<text  x="655.95" y="991.5" >muduo::detail::startThread</text>
</g>
<g >
<title>finish_task_switch (92 samples, 1.26%)</title><rect x="514.6" y="741" width="14.8" height="15.0" fill="rgb(245,163,35)" rx="2" ry="2" />
<text  x="517.56" y="751.5" ></text>
</g>
<g >
<title>muduo::detail::startThread (1,372 samples, 18.80%)</title><rect x="37.5" y="981" width="221.8" height="15.0" fill="rgb(211,90,16)" rx="2" ry="2" />
<text  x="40.48" y="991.5" >muduo::detail::startThread</text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="1014.4" y="533" width="0.2" height="15.0" fill="rgb(228,163,3)" rx="2" ry="2" />
<text  x="1017.43" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="946.5" y="933" width="0.2" height="15.0" fill="rgb(229,105,28)" rx="2" ry="2" />
<text  x="949.53" y="943.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (2 samples, 0.03%)</title><rect x="621.9" y="997" width="0.3" height="15.0" fill="rgb(249,177,40)" rx="2" ry="2" />
<text  x="624.91" y="1007.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::beginWrite (2 samples, 0.03%)</title><rect x="1017.8" y="661" width="0.3" height="15.0" fill="rgb(224,173,34)" rx="2" ry="2" />
<text  x="1020.83" y="671.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1185.8" y="949" width="0.2" height="15.0" fill="rgb(231,211,22)" rx="2" ry="2" />
<text  x="1188.80" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3 samples, 0.04%)</title><rect x="1150.1" y="629" width="0.5" height="15.0" fill="rgb(249,6,49)" rx="2" ry="2" />
<text  x="1153.07" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1 samples, 0.01%)</title><rect x="1131.5" y="629" width="0.1" height="15.0" fill="rgb(211,53,53)" rx="2" ry="2" />
<text  x="1134.48" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (72 samples, 0.99%)</title><rect x="1165.9" y="693" width="11.7" height="15.0" fill="rgb(253,190,24)" rx="2" ry="2" />
<text  x="1168.91" y="703.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.01%)</title><rect x="128.3" y="757" width="0.2" height="15.0" fill="rgb(210,188,27)" rx="2" ry="2" />
<text  x="131.34" y="767.5" ></text>
</g>
<g >
<title>asyncOutput (1 samples, 0.01%)</title><rect x="798.4" y="709" width="0.2" height="15.0" fill="rgb(209,122,37)" rx="2" ry="2" />
<text  x="801.44" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="348.5" y="437" width="0.2" height="15.0" fill="rgb(234,133,54)" rx="2" ry="2" />
<text  x="351.53" y="447.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="1143.4" y="709" width="0.2" height="15.0" fill="rgb(225,219,16)" rx="2" ry="2" />
<text  x="1146.44" y="719.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.01%)</title><rect x="922.9" y="549" width="0.2" height="15.0" fill="rgb(218,156,50)" rx="2" ry="2" />
<text  x="925.93" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.2" y="565" width="0.1" height="15.0" fill="rgb(244,139,44)" rx="2" ry="2" />
<text  x="93.19" y="575.5" ></text>
</g>
<g >
<title>__fget_light (3 samples, 0.04%)</title><rect x="76.3" y="565" width="0.5" height="15.0" fill="rgb(218,44,2)" rx="2" ry="2" />
<text  x="79.28" y="575.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="345.9" y="549" width="0.4" height="15.0" fill="rgb(248,156,7)" rx="2" ry="2" />
<text  x="348.94" y="559.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::append (15 samples, 0.21%)</title><rect x="676.4" y="693" width="2.4" height="15.0" fill="rgb(241,62,18)" rx="2" ry="2" />
<text  x="679.39" y="703.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (392 samples, 5.37%)</title><rect x="415.6" y="69" width="63.4" height="15.0" fill="rgb(208,59,9)" rx="2" ry="2" />
<text  x="418.62" y="79.5" >__wake..</text>
</g>
<g >
<title>rw_verify_area (11 samples, 0.15%)</title><rect x="83.9" y="549" width="1.8" height="15.0" fill="rgb(210,188,34)" rx="2" ry="2" />
<text  x="86.88" y="559.5" ></text>
</g>
<g >
<title>new_sync_write (230 samples, 3.15%)</title><rect x="547.5" y="885" width="37.2" height="15.0" fill="rgb(233,9,15)" rx="2" ry="2" />
<text  x="550.54" y="895.5" >new..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="247.3" y="437" width="0.2" height="15.0" fill="rgb(215,100,46)" rx="2" ry="2" />
<text  x="250.33" y="447.5" ></text>
</g>
<g >
<title>__GI___setsockopt (1 samples, 0.01%)</title><rect x="385.7" y="565" width="0.2" height="15.0" fill="rgb(241,186,14)" rx="2" ry="2" />
<text  x="388.71" y="575.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (1 samples, 0.01%)</title><rect x="948.8" y="981" width="0.2" height="15.0" fill="rgb(209,218,1)" rx="2" ry="2" />
<text  x="951.79" y="991.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (17 samples, 0.23%)</title><rect x="945.7" y="981" width="2.8" height="15.0" fill="rgb(243,94,28)" rx="2" ry="2" />
<text  x="948.72" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.01%)</title><rect x="318.3" y="773" width="0.2" height="15.0" fill="rgb(230,38,34)" rx="2" ry="2" />
<text  x="321.30" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (13 samples, 0.18%)</title><rect x="102.6" y="533" width="2.1" height="15.0" fill="rgb(247,45,45)" rx="2" ry="2" />
<text  x="105.63" y="543.5" ></text>
</g>
<g >
<title>[libc-2.23.so] (132 samples, 1.81%)</title><rect x="287.6" y="821" width="21.3" height="15.0" fill="rgb(217,136,18)" rx="2" ry="2" />
<text  x="290.58" y="831.5" >[..</text>
</g>
<g >
<title>[unknown] (4 samples, 0.05%)</title><rect x="14.8" y="965" width="0.7" height="15.0" fill="rgb(229,155,39)" rx="2" ry="2" />
<text  x="17.85" y="975.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="1187.9" y="693" width="0.2" height="15.0" fill="rgb(253,202,11)" rx="2" ry="2" />
<text  x="1190.90" y="703.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (73 samples, 1.00%)</title><rect x="296.0" y="725" width="11.8" height="15.0" fill="rgb(221,173,39)" rx="2" ry="2" />
<text  x="298.99" y="735.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.01%)</title><rect x="151.0" y="485" width="0.1" height="15.0" fill="rgb(210,55,13)" rx="2" ry="2" />
<text  x="153.97" y="495.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="373.3" y="741" width="0.1" height="15.0" fill="rgb(205,147,25)" rx="2" ry="2" />
<text  x="376.26" y="751.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (1 samples, 0.01%)</title><rect x="548.3" y="805" width="0.2" height="15.0" fill="rgb(239,98,41)" rx="2" ry="2" />
<text  x="551.35" y="815.5" ></text>
</g>
<g >
<title>std::swap&lt;bool  (1 samples, 0.01%)</title><rect x="769.0" y="453" width="0.2" height="15.0" fill="rgb(242,30,11)" rx="2" ry="2" />
<text  x="772.02" y="463.5" ></text>
</g>
<g >
<title>link_path_walk (25 samples, 0.34%)</title><rect x="1169.3" y="581" width="4.0" height="15.0" fill="rgb(246,123,42)" rx="2" ry="2" />
<text  x="1172.31" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="101.5" y="517" width="0.2" height="15.0" fill="rgb(251,60,35)" rx="2" ry="2" />
<text  x="104.50" y="527.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="72.2" y="613" width="0.4" height="15.0" fill="rgb(252,176,33)" rx="2" ry="2" />
<text  x="75.24" y="623.5" ></text>
</g>
<g >
<title>__kfree_skb_flush (3 samples, 0.04%)</title><rect x="160.0" y="277" width="0.5" height="15.0" fill="rgb(252,77,24)" rx="2" ry="2" />
<text  x="163.03" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (1 samples, 0.01%)</title><rect x="352.7" y="485" width="0.2" height="15.0" fill="rgb(229,173,34)" rx="2" ry="2" />
<text  x="355.73" y="495.5" ></text>
</g>
<g >
<title>strrchr (2 samples, 0.03%)</title><rect x="1142.0" y="693" width="0.3" height="15.0" fill="rgb(219,28,42)" rx="2" ry="2" />
<text  x="1144.99" y="703.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="65.1" y="757" width="0.5" height="15.0" fill="rgb(230,32,18)" rx="2" ry="2" />
<text  x="68.13" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl (2 samples, 0.03%)</title><rect x="100.2" y="485" width="0.3" height="15.0" fill="rgb(252,150,22)" rx="2" ry="2" />
<text  x="103.21" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5 samples, 0.07%)</title><rect x="1151.4" y="629" width="0.8" height="15.0" fill="rgb(253,88,50)" rx="2" ry="2" />
<text  x="1154.36" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="104.6" y="469" width="0.1" height="15.0" fill="rgb(208,172,20)" rx="2" ry="2" />
<text  x="107.57" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="87.6" y="629" width="0.2" height="15.0" fill="rgb(249,209,26)" rx="2" ry="2" />
<text  x="90.60" y="639.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (3 samples, 0.04%)</title><rect x="1013.9" y="645" width="0.5" height="15.0" fill="rgb(223,0,19)" rx="2" ry="2" />
<text  x="1016.95" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="375.9" y="709" width="0.1" height="15.0" fill="rgb(234,120,5)" rx="2" ry="2" />
<text  x="378.85" y="719.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1 samples, 0.01%)</title><rect x="260.9" y="917" width="0.2" height="15.0" fill="rgb(243,33,29)" rx="2" ry="2" />
<text  x="263.91" y="927.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (670 samples, 9.18%)</title><rect x="136.7" y="757" width="108.4" height="15.0" fill="rgb(221,174,54)" rx="2" ry="2" />
<text  x="139.75" y="767.5" >std::_Bind&lt;vo..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="373.1" y="725" width="0.2" height="15.0" fill="rgb(240,146,4)" rx="2" ry="2" />
<text  x="376.10" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="247.3" y="581" width="0.2" height="15.0" fill="rgb(247,80,15)" rx="2" ry="2" />
<text  x="250.33" y="591.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (2 samples, 0.03%)</title><rect x="1188.9" y="805" width="0.3" height="15.0" fill="rgb(222,25,40)" rx="2" ry="2" />
<text  x="1191.87" y="815.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="1011.2" y="645" width="0.2" height="15.0" fill="rgb(219,193,33)" rx="2" ry="2" />
<text  x="1014.20" y="655.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char*, std::default_delete&lt;char []&gt; &gt; (2 samples, 0.03%)</title><rect x="1131.8" y="661" width="0.3" height="15.0" fill="rgb(211,109,35)" rx="2" ry="2" />
<text  x="1134.80" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.03%)</title><rect x="816.4" y="709" width="0.3" height="15.0" fill="rgb(250,128,29)" rx="2" ry="2" />
<text  x="819.39" y="719.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (1 samples, 0.01%)</title><rect x="315.1" y="757" width="0.1" height="15.0" fill="rgb(235,150,26)" rx="2" ry="2" />
<text  x="318.06" y="767.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,372 samples, 18.80%)</title><rect x="37.5" y="885" width="221.8" height="15.0" fill="rgb(212,12,20)" rx="2" ry="2" />
<text  x="40.48" y="895.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>security_file_permission (6 samples, 0.08%)</title><rect x="764.8" y="533" width="1.0" height="15.0" fill="rgb(243,190,8)" rx="2" ry="2" />
<text  x="767.82" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (127 samples, 1.74%)</title><rect x="288.2" y="789" width="20.6" height="15.0" fill="rgb(226,62,39)" rx="2" ry="2" />
<text  x="291.23" y="799.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (2 samples, 0.03%)</title><rect x="1173.7" y="549" width="0.3" height="15.0" fill="rgb(234,157,21)" rx="2" ry="2" />
<text  x="1176.67" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="1119.8" y="597" width="0.4" height="15.0" fill="rgb(228,80,8)" rx="2" ry="2" />
<text  x="1122.84" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.07%)</title><rect x="1139.9" y="629" width="0.8" height="15.0" fill="rgb(231,205,46)" rx="2" ry="2" />
<text  x="1142.88" y="639.5" ></text>
</g>
<g >
<title>sys_read (153 samples, 2.10%)</title><rect x="508.3" y="949" width="24.7" height="15.0" fill="rgb(216,51,33)" rx="2" ry="2" />
<text  x="511.25" y="959.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (2 samples, 0.03%)</title><rect x="776.9" y="645" width="0.4" height="15.0" fill="rgb(210,18,31)" rx="2" ry="2" />
<text  x="779.94" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="487.2" y="645" width="0.2" height="15.0" fill="rgb(252,20,7)" rx="2" ry="2" />
<text  x="490.24" y="655.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="1130.2" y="661" width="0.3" height="15.0" fill="rgb(244,203,18)" rx="2" ry="2" />
<text  x="1133.18" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1 samples, 0.01%)</title><rect x="513.3" y="805" width="0.1" height="15.0" fill="rgb(253,43,34)" rx="2" ry="2" />
<text  x="516.27" y="815.5" ></text>
</g>
<g >
<title>mod_timer (2 samples, 0.03%)</title><rect x="412.4" y="69" width="0.3" height="15.0" fill="rgb(235,64,8)" rx="2" ry="2" />
<text  x="415.39" y="79.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1132.0" y="629" width="0.1" height="15.0" fill="rgb(232,76,42)" rx="2" ry="2" />
<text  x="1134.96" y="639.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.01%)</title><rect x="994.5" y="741" width="0.2" height="15.0" fill="rgb(213,84,28)" rx="2" ry="2" />
<text  x="997.55" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt; (1 samples, 0.01%)</title><rect x="1121.9" y="629" width="0.2" height="15.0" fill="rgb(238,149,12)" rx="2" ry="2" />
<text  x="1124.94" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.01%)</title><rect x="318.9" y="789" width="0.2" height="15.0" fill="rgb(209,187,52)" rx="2" ry="2" />
<text  x="321.94" y="799.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt; (1 samples, 0.01%)</title><rect x="487.4" y="645" width="0.2" height="15.0" fill="rgb(205,141,25)" rx="2" ry="2" />
<text  x="490.40" y="655.5" ></text>
</g>
<g >
<title>generic_permission (1 samples, 0.01%)</title><rect x="825.9" y="533" width="0.2" height="15.0" fill="rgb(215,108,14)" rx="2" ry="2" />
<text  x="828.93" y="543.5" ></text>
</g>
<g >
<title>eventfd_read (5 samples, 0.07%)</title><rect x="72.6" y="581" width="0.8" height="15.0" fill="rgb(236,57,33)" rx="2" ry="2" />
<text  x="75.56" y="591.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (3 samples, 0.04%)</title><rect x="117.8" y="757" width="0.5" height="15.0" fill="rgb(219,81,9)" rx="2" ry="2" />
<text  x="120.83" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="1149.6" y="677" width="0.1" height="15.0" fill="rgb(245,1,44)" rx="2" ry="2" />
<text  x="1152.58" y="687.5" ></text>
</g>
<g >
<title>mod_timer (5 samples, 0.07%)</title><rect x="412.7" y="53" width="0.8" height="15.0" fill="rgb(211,74,13)" rx="2" ry="2" />
<text  x="415.71" y="63.5" ></text>
</g>
<g >
<title>netif_rx_internal (2 samples, 0.03%)</title><rect x="236.5" y="261" width="0.3" height="15.0" fill="rgb(211,8,22)" rx="2" ry="2" />
<text  x="239.49" y="271.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (519 samples, 7.11%)</title><rect x="157.3" y="469" width="83.9" height="15.0" fill="rgb(249,79,5)" rx="2" ry="2" />
<text  x="160.28" y="479.5" >__tcp_pus..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="94.7" y="421" width="0.2" height="15.0" fill="rgb(215,156,32)" rx="2" ry="2" />
<text  x="97.71" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2 samples, 0.03%)</title><rect x="657.1" y="645" width="0.4" height="15.0" fill="rgb(215,201,2)" rx="2" ry="2" />
<text  x="660.15" y="655.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.01%)</title><rect x="650.7" y="997" width="0.1" height="15.0" fill="rgb(234,223,30)" rx="2" ry="2" />
<text  x="653.68" y="1007.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1 samples, 0.01%)</title><rect x="271.7" y="965" width="0.2" height="15.0" fill="rgb(210,107,49)" rx="2" ry="2" />
<text  x="274.74" y="975.5" ></text>
</g>
<g >
<title>__snprintf (2 samples, 0.03%)</title><rect x="366.3" y="757" width="0.3" height="15.0" fill="rgb(243,141,22)" rx="2" ry="2" />
<text  x="369.31" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="348.0" y="469" width="0.2" height="15.0" fill="rgb(246,87,16)" rx="2" ry="2" />
<text  x="351.04" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7 samples, 0.10%)</title><rect x="786.6" y="613" width="1.2" height="15.0" fill="rgb(236,223,24)" rx="2" ry="2" />
<text  x="789.64" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (12 samples, 0.16%)</title><rect x="245.7" y="789" width="1.9" height="15.0" fill="rgb(253,60,54)" rx="2" ry="2" />
<text  x="248.71" y="799.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="129.3" y="757" width="0.2" height="15.0" fill="rgb(230,85,5)" rx="2" ry="2" />
<text  x="132.31" y="767.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (1 samples, 0.01%)</title><rect x="117.2" y="773" width="0.1" height="15.0" fill="rgb(206,114,16)" rx="2" ry="2" />
<text  x="120.18" y="783.5" ></text>
</g>
<g >
<title>__fdget_pos (1 samples, 0.01%)</title><rect x="508.3" y="933" width="0.1" height="15.0" fill="rgb(215,93,4)" rx="2" ry="2" />
<text  x="511.25" y="943.5" ></text>
</g>
<g >
<title>strlen (3 samples, 0.04%)</title><rect x="841.4" y="725" width="0.5" height="15.0" fill="rgb(206,207,4)" rx="2" ry="2" />
<text  x="844.45" y="735.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.12 (11 samples, 0.15%)</title><rect x="292.6" y="709" width="1.8" height="15.0" fill="rgb(213,82,34)" rx="2" ry="2" />
<text  x="295.59" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="315.2" y="693" width="0.2" height="15.0" fill="rgb(240,113,50)" rx="2" ry="2" />
<text  x="318.23" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="369.1" y="773" width="0.3" height="15.0" fill="rgb(248,186,3)" rx="2" ry="2" />
<text  x="372.06" y="783.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="359.5" y="741" width="0.2" height="15.0" fill="rgb(231,89,34)" rx="2" ry="2" />
<text  x="362.52" y="751.5" ></text>
</g>
<g >
<title>user_path_at_empty (48 samples, 0.66%)</title><rect x="1168.3" y="629" width="7.8" height="15.0" fill="rgb(233,189,33)" rx="2" ry="2" />
<text  x="1171.34" y="639.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.01%)</title><rect x="580.5" y="709" width="0.2" height="15.0" fill="rgb(222,30,43)" rx="2" ry="2" />
<text  x="583.52" y="719.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (11 samples, 0.15%)</title><rect x="399.8" y="485" width="1.8" height="15.0" fill="rgb(206,130,33)" rx="2" ry="2" />
<text  x="402.78" y="495.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, char const*, char*&gt; (9 samples, 0.12%)</title><rect x="1019.0" y="629" width="1.4" height="15.0" fill="rgb(208,69,33)" rx="2" ry="2" />
<text  x="1021.96" y="639.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="341.1" y="405" width="0.6" height="15.0" fill="rgb(208,87,54)" rx="2" ry="2" />
<text  x="344.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="784.9" y="645" width="0.1" height="15.0" fill="rgb(216,39,19)" rx="2" ry="2" />
<text  x="787.87" y="655.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (5 samples, 0.07%)</title><rect x="371.2" y="757" width="0.8" height="15.0" fill="rgb(234,219,4)" rx="2" ry="2" />
<text  x="374.16" y="767.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="250.7" y="757" width="0.2" height="15.0" fill="rgb(230,191,39)" rx="2" ry="2" />
<text  x="253.72" y="767.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (2 samples, 0.03%)</title><rect x="928.7" y="837" width="0.4" height="15.0" fill="rgb(219,179,24)" rx="2" ry="2" />
<text  x="931.75" y="847.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="337.9" y="485" width="0.1" height="15.0" fill="rgb(218,151,6)" rx="2" ry="2" />
<text  x="340.86" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="94.2" y="501" width="0.2" height="15.0" fill="rgb(244,45,19)" rx="2" ry="2" />
<text  x="97.23" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="992.1" y="805" width="0.3" height="15.0" fill="rgb(217,26,31)" rx="2" ry="2" />
<text  x="995.12" y="815.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.01%)</title><rect x="234.6" y="229" width="0.1" height="15.0" fill="rgb(240,224,22)" rx="2" ry="2" />
<text  x="237.55" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (5 samples, 0.07%)</title><rect x="400.6" y="453" width="0.8" height="15.0" fill="rgb(216,65,38)" rx="2" ry="2" />
<text  x="403.59" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (2 samples, 0.03%)</title><rect x="766.6" y="597" width="0.3" height="15.0" fill="rgb(223,25,40)" rx="2" ry="2" />
<text  x="769.60" y="607.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (3 samples, 0.04%)</title><rect x="65.1" y="741" width="0.5" height="15.0" fill="rgb(206,228,43)" rx="2" ry="2" />
<text  x="68.13" y="751.5" ></text>
</g>
<g >
<title>tcp_data_queue (60 samples, 0.82%)</title><rect x="911.6" y="405" width="9.7" height="15.0" fill="rgb(247,22,11)" rx="2" ry="2" />
<text  x="914.61" y="415.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="77.3" y="549" width="0.1" height="15.0" fill="rgb(219,171,19)" rx="2" ry="2" />
<text  x="80.25" y="559.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.01%)</title><rect x="92.4" y="533" width="0.2" height="15.0" fill="rgb(206,77,23)" rx="2" ry="2" />
<text  x="95.45" y="543.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1152.8" y="661" width="0.2" height="15.0" fill="rgb(224,187,18)" rx="2" ry="2" />
<text  x="1155.82" y="671.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (117 samples, 1.60%)</title><rect x="557.2" y="533" width="19.0" height="15.0" fill="rgb(224,106,18)" rx="2" ry="2" />
<text  x="560.24" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="385.4" y="629" width="0.2" height="15.0" fill="rgb(232,151,31)" rx="2" ry="2" />
<text  x="388.39" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="504.4" y="805" width="0.1" height="15.0" fill="rgb(214,216,43)" rx="2" ry="2" />
<text  x="507.37" y="815.5" ></text>
</g>
<g >
<title>select_estimate_accuracy (3 samples, 0.04%)</title><rect x="308.1" y="741" width="0.5" height="15.0" fill="rgb(226,37,28)" rx="2" ry="2" />
<text  x="311.11" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.18%)</title><rect x="102.6" y="517" width="2.1" height="15.0" fill="rgb(228,170,45)" rx="2" ry="2" />
<text  x="105.63" y="527.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;long&gt; (8 samples, 0.11%)</title><rect x="20.8" y="965" width="1.3" height="15.0" fill="rgb(207,195,36)" rx="2" ry="2" />
<text  x="23.83" y="975.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="65.8" y="757" width="0.1" height="15.0" fill="rgb(252,73,44)" rx="2" ry="2" />
<text  x="68.77" y="767.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (13 samples, 0.18%)</title><rect x="316.0" y="789" width="2.1" height="15.0" fill="rgb(241,212,6)" rx="2" ry="2" />
<text  x="319.03" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::erase (1 samples, 0.01%)</title><rect x="385.1" y="629" width="0.1" height="15.0" fill="rgb(207,50,34)" rx="2" ry="2" />
<text  x="388.07" y="639.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (433 samples, 5.93%)</title><rect x="409.3" y="165" width="70.0" height="15.0" fill="rgb(210,24,21)" rx="2" ry="2" />
<text  x="412.31" y="175.5" >ip_loca..</text>
</g>
<g >
<title>muduo::net::Channel::fd (3 samples, 0.04%)</title><rect x="374.4" y="789" width="0.5" height="15.0" fill="rgb(254,50,29)" rx="2" ry="2" />
<text  x="377.40" y="799.5" ></text>
</g>
<g >
<title>minmax_subwin_update (1 samples, 0.01%)</title><rect x="565.0" y="357" width="0.2" height="15.0" fill="rgb(234,221,28)" rx="2" ry="2" />
<text  x="568.00" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (6 samples, 0.08%)</title><rect x="246.4" y="629" width="0.9" height="15.0" fill="rgb(236,173,24)" rx="2" ry="2" />
<text  x="249.36" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.01%)</title><rect x="29.7" y="981" width="0.2" height="15.0" fill="rgb(220,70,40)" rx="2" ry="2" />
<text  x="32.72" y="991.5" ></text>
</g>
<g >
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="832.6" y="581" width="0.3" height="15.0" fill="rgb(224,122,31)" rx="2" ry="2" />
<text  x="835.56" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="487.1" y="677" width="0.1" height="15.0" fill="rgb(231,63,5)" rx="2" ry="2" />
<text  x="490.08" y="687.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1189.0" y="757" width="0.2" height="15.0" fill="rgb(249,172,45)" rx="2" ry="2" />
<text  x="1192.03" y="767.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (1 samples, 0.01%)</title><rect x="1008.0" y="677" width="0.1" height="15.0" fill="rgb(244,217,18)" rx="2" ry="2" />
<text  x="1010.96" y="687.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (215 samples, 2.95%)</title><rect x="549.6" y="805" width="34.8" height="15.0" fill="rgb(231,48,0)" rx="2" ry="2" />
<text  x="552.64" y="815.5" >tc..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="32.5" y="901" width="0.1" height="15.0" fill="rgb(223,112,0)" rx="2" ry="2" />
<text  x="35.47" y="911.5" ></text>
</g>
<g >
<title>schedule (135 samples, 1.85%)</title><rect x="850.5" y="773" width="21.8" height="15.0" fill="rgb(242,193,19)" rx="2" ry="2" />
<text  x="853.50" y="783.5" >s..</text>
</g>
<g >
<title>do_softirq.part.17 (458 samples, 6.27%)</title><rect x="405.9" y="325" width="74.1" height="15.0" fill="rgb(224,142,40)" rx="2" ry="2" />
<text  x="408.92" y="335.5" >do_softi..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1132.0" y="645" width="0.1" height="15.0" fill="rgb(210,5,9)" rx="2" ry="2" />
<text  x="1134.96" y="655.5" ></text>
</g>
<g >
<title>muduo::net::EventLoopThread::threadFunc (1,372 samples, 18.80%)</title><rect x="37.5" y="853" width="221.8" height="15.0" fill="rgb(215,31,9)" rx="2" ry="2" />
<text  x="40.48" y="863.5" >muduo::net::EventLoopThread::..</text>
</g>
<g >
<title>tcp_ack (1 samples, 0.01%)</title><rect x="166.0" y="117" width="0.2" height="15.0" fill="rgb(234,143,3)" rx="2" ry="2" />
<text  x="169.01" y="127.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (28 samples, 0.38%)</title><rect x="10.2" y="853" width="4.5" height="15.0" fill="rgb(223,36,13)" rx="2" ry="2" />
<text  x="13.16" y="863.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Channel*, std::default_delete&lt;muduo::net::Channel&gt; &gt; (1 samples, 0.01%)</title><rect x="243.9" y="629" width="0.2" height="15.0" fill="rgb(209,72,38)" rx="2" ry="2" />
<text  x="246.93" y="639.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="661.0" y="597" width="0.2" height="15.0" fill="rgb(229,200,40)" rx="2" ry="2" />
<text  x="664.03" y="607.5" ></text>
</g>
<g >
<title>SYSC_newstat (89 samples, 1.22%)</title><rect x="821.6" y="661" width="14.4" height="15.0" fill="rgb(248,29,5)" rx="2" ry="2" />
<text  x="824.56" y="671.5" ></text>
</g>
<g >
<title>__release_sock (1 samples, 0.01%)</title><rect x="151.1" y="485" width="0.2" height="15.0" fill="rgb(244,104,0)" rx="2" ry="2" />
<text  x="154.13" y="495.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="253.3" y="757" width="0.2" height="15.0" fill="rgb(243,18,45)" rx="2" ry="2" />
<text  x="256.31" y="767.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (5 samples, 0.07%)</title><rect x="81.5" y="469" width="0.8" height="15.0" fill="rgb(213,127,30)" rx="2" ry="2" />
<text  x="84.46" y="479.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="801.8" y="645" width="0.2" height="15.0" fill="rgb(223,59,33)" rx="2" ry="2" />
<text  x="804.84" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="818.2" y="693" width="0.1" height="15.0" fill="rgb(221,84,5)" rx="2" ry="2" />
<text  x="821.17" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::startThread (1,354 samples, 18.55%)</title><rect x="286.8" y="981" width="218.9" height="15.0" fill="rgb(254,1,31)" rx="2" ry="2" />
<text  x="289.77" y="991.5" >muduo::detail::startThread</text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::lock (3 samples, 0.04%)</title><rect x="360.3" y="805" width="0.5" height="15.0" fill="rgb(248,200,32)" rx="2" ry="2" />
<text  x="363.33" y="815.5" ></text>
</g>
<g >
<title>std::search&lt;char*, char const*&gt; (1 samples, 0.01%)</title><rect x="1158.2" y="709" width="0.1" height="15.0" fill="rgb(229,145,39)" rx="2" ry="2" />
<text  x="1161.15" y="719.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (2 samples, 0.03%)</title><rect x="338.8" y="581" width="0.4" height="15.0" fill="rgb(219,159,46)" rx="2" ry="2" />
<text  x="341.83" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="812.7" y="677" width="0.3" height="15.0" fill="rgb(228,26,52)" rx="2" ry="2" />
<text  x="815.67" y="687.5" ></text>
</g>
<g >
<title>lock_sock_nested (4 samples, 0.05%)</title><rect x="331.1" y="469" width="0.6" height="15.0" fill="rgb(249,110,2)" rx="2" ry="2" />
<text  x="334.07" y="479.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="1115.5" y="549" width="0.1" height="15.0" fill="rgb(225,169,12)" rx="2" ry="2" />
<text  x="1118.47" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::_M_valptr (2 samples, 0.03%)</title><rect x="352.1" y="453" width="0.3" height="15.0" fill="rgb(250,160,9)" rx="2" ry="2" />
<text  x="355.09" y="463.5" ></text>
</g>
<g >
<title>read_int (3 samples, 0.04%)</title><rect x="604.8" y="965" width="0.5" height="15.0" fill="rgb(253,175,17)" rx="2" ry="2" />
<text  x="607.77" y="975.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="770.2" y="645" width="0.1" height="15.0" fill="rgb(249,11,40)" rx="2" ry="2" />
<text  x="773.15" y="655.5" ></text>
</g>
<g >
<title>tcp_poll (2 samples, 0.03%)</title><rect x="293.7" y="677" width="0.3" height="15.0" fill="rgb(240,225,39)" rx="2" ry="2" />
<text  x="296.72" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="317.5" y="757" width="0.2" height="15.0" fill="rgb(212,217,14)" rx="2" ry="2" />
<text  x="320.49" y="767.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="1141.7" y="693" width="0.3" height="15.0" fill="rgb(221,156,49)" rx="2" ry="2" />
<text  x="1144.66" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="636.9" y="981" width="0.2" height="15.0" fill="rgb(252,64,50)" rx="2" ry="2" />
<text  x="639.94" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::size (1 samples, 0.01%)</title><rect x="133.8" y="805" width="0.2" height="15.0" fill="rgb(221,152,28)" rx="2" ry="2" />
<text  x="136.84" y="815.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="848.6" y="773" width="0.1" height="15.0" fill="rgb(253,66,52)" rx="2" ry="2" />
<text  x="851.56" y="783.5" ></text>
</g>
<g >
<title>common_file_perm (4 samples, 0.05%)</title><rect x="334.1" y="501" width="0.7" height="15.0" fill="rgb(252,50,34)" rx="2" ry="2" />
<text  x="337.14" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (20 samples, 0.27%)</title><rect x="766.1" y="645" width="3.2" height="15.0" fill="rgb(244,32,43)" rx="2" ry="2" />
<text  x="769.11" y="655.5" ></text>
</g>
<g >
<title>futex_wake (4 samples, 0.05%)</title><rect x="341.1" y="453" width="0.6" height="15.0" fill="rgb(235,148,50)" rx="2" ry="2" />
<text  x="344.09" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="363.7" y="725" width="0.2" height="15.0" fill="rgb(226,150,9)" rx="2" ry="2" />
<text  x="366.73" y="735.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (5 samples, 0.07%)</title><rect x="1182.4" y="725" width="0.8" height="15.0" fill="rgb(222,20,30)" rx="2" ry="2" />
<text  x="1185.40" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="1004.1" y="677" width="0.1" height="15.0" fill="rgb(227,131,53)" rx="2" ry="2" />
<text  x="1007.08" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="257.7" y="805" width="0.1" height="15.0" fill="rgb(220,68,13)" rx="2" ry="2" />
<text  x="260.67" y="815.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1007.8" y="677" width="0.2" height="15.0" fill="rgb(254,173,18)" rx="2" ry="2" />
<text  x="1010.80" y="687.5" ></text>
</g>
<g >
<title>muduo::StringPiece::StringPiece (1 samples, 0.01%)</title><rect x="1017.5" y="693" width="0.2" height="15.0" fill="rgb(226,200,12)" rx="2" ry="2" />
<text  x="1020.50" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="158.6" y="373" width="0.3" height="15.0" fill="rgb(233,104,15)" rx="2" ry="2" />
<text  x="161.57" y="383.5" ></text>
</g>
<g >
<title>sys_setsockopt (1 samples, 0.01%)</title><rect x="385.7" y="517" width="0.2" height="15.0" fill="rgb(232,29,5)" rx="2" ry="2" />
<text  x="388.71" y="527.5" ></text>
</g>
<g >
<title>tcp_cwnd_restart (1 samples, 0.01%)</title><rect x="401.7" y="469" width="0.2" height="15.0" fill="rgb(249,106,19)" rx="2" ry="2" />
<text  x="404.72" y="479.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.04%)</title><rect x="813.8" y="709" width="0.5" height="15.0" fill="rgb(229,22,10)" rx="2" ry="2" />
<text  x="816.80" y="719.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="137.6" y="581" width="0.1" height="15.0" fill="rgb(206,120,32)" rx="2" ry="2" />
<text  x="140.55" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="489.5" y="741" width="0.2" height="15.0" fill="rgb(244,227,19)" rx="2" ry="2" />
<text  x="492.50" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1004.6" y="645" width="0.1" height="15.0" fill="rgb(226,68,26)" rx="2" ry="2" />
<text  x="1007.57" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::TcpConnection*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="771.3" y="581" width="0.1" height="15.0" fill="rgb(220,128,52)" rx="2" ry="2" />
<text  x="774.29" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1129.5" y="629" width="0.2" height="15.0" fill="rgb(208,78,38)" rx="2" ry="2" />
<text  x="1132.54" y="639.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.01%)</title><rect x="905.5" y="437" width="0.1" height="15.0" fill="rgb(223,0,34)" rx="2" ry="2" />
<text  x="908.47" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4 samples, 0.05%)</title><rect x="839.5" y="725" width="0.7" height="15.0" fill="rgb(236,1,4)" rx="2" ry="2" />
<text  x="842.51" y="735.5" ></text>
</g>
<g >
<title>common_file_perm (2 samples, 0.03%)</title><rect x="334.8" y="517" width="0.3" height="15.0" fill="rgb(214,0,39)" rx="2" ry="2" />
<text  x="337.79" y="527.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (12 samples, 0.16%)</title><rect x="1025.3" y="629" width="1.9" height="15.0" fill="rgb(205,105,19)" rx="2" ry="2" />
<text  x="1028.26" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="838.1" y="677" width="0.1" height="15.0" fill="rgb(222,18,13)" rx="2" ry="2" />
<text  x="841.05" y="687.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="94.1" y="421" width="0.1" height="15.0" fill="rgb(252,82,25)" rx="2" ry="2" />
<text  x="97.07" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="809.0" y="661" width="0.1" height="15.0" fill="rgb(242,122,28)" rx="2" ry="2" />
<text  x="811.95" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,372 samples, 18.80%)</title><rect x="37.5" y="869" width="221.8" height="15.0" fill="rgb(244,37,41)" rx="2" ry="2" />
<text  x="40.48" y="879.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="88.6" y="645" width="0.1" height="15.0" fill="rgb(249,199,42)" rx="2" ry="2" />
<text  x="91.57" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1121.3" y="661" width="0.2" height="15.0" fill="rgb(236,139,39)" rx="2" ry="2" />
<text  x="1124.29" y="671.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.01%)</title><rect x="82.6" y="197" width="0.1" height="15.0" fill="rgb(211,32,52)" rx="2" ry="2" />
<text  x="85.59" y="207.5" ></text>
</g>
<g >
<title>__sock_release (1 samples, 0.01%)</title><rect x="247.3" y="325" width="0.2" height="15.0" fill="rgb(217,162,9)" rx="2" ry="2" />
<text  x="250.33" y="335.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 0.01%)</title><rect x="337.4" y="373" width="0.1" height="15.0" fill="rgb(245,39,42)" rx="2" ry="2" />
<text  x="340.37" y="383.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="134.8" y="789" width="0.2" height="15.0" fill="rgb(226,210,5)" rx="2" ry="2" />
<text  x="137.81" y="799.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (5 samples, 0.07%)</title><rect x="166.3" y="85" width="0.8" height="15.0" fill="rgb(214,75,37)" rx="2" ry="2" />
<text  x="169.33" y="95.5" ></text>
</g>
<g >
<title>_IO_vsprintf (2 samples, 0.03%)</title><rect x="948.5" y="981" width="0.3" height="15.0" fill="rgb(244,128,0)" rx="2" ry="2" />
<text  x="951.47" y="991.5" ></text>
</g>
<g >
<title>StaticServer::onParser (1,125 samples, 15.41%)</title><rect x="660.1" y="741" width="181.8" height="15.0" fill="rgb(210,188,35)" rx="2" ry="2" />
<text  x="663.06" y="751.5" >StaticServer::onParser</text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="625.9" y="997" width="0.2" height="15.0" fill="rgb(226,65,25)" rx="2" ry="2" />
<text  x="628.95" y="1007.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="1024.9" y="613" width="0.4" height="15.0" fill="rgb(236,22,45)" rx="2" ry="2" />
<text  x="1027.94" y="623.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1119.7" y="533" width="0.1" height="15.0" fill="rgb(225,173,38)" rx="2" ry="2" />
<text  x="1122.68" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="243.9" y="645" width="0.2" height="15.0" fill="rgb(245,168,19)" rx="2" ry="2" />
<text  x="246.93" y="655.5" ></text>
</g>
<g >
<title>__fdget_pos (3 samples, 0.04%)</title><rect x="76.3" y="581" width="0.5" height="15.0" fill="rgb(238,57,20)" rx="2" ry="2" />
<text  x="79.28" y="591.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="1188.7" y="869" width="0.5" height="15.0" fill="rgb(245,114,22)" rx="2" ry="2" />
<text  x="1191.71" y="879.5" ></text>
</g>
<g >
<title>strlen (3 samples, 0.04%)</title><rect x="1183.7" y="725" width="0.5" height="15.0" fill="rgb(211,122,20)" rx="2" ry="2" />
<text  x="1186.70" y="735.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="87.0" y="629" width="0.1" height="15.0" fill="rgb(219,212,17)" rx="2" ry="2" />
<text  x="89.95" y="639.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="769.0" y="533" width="0.2" height="15.0" fill="rgb(247,187,51)" rx="2" ry="2" />
<text  x="772.02" y="543.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="1130.2" y="677" width="0.3" height="15.0" fill="rgb(248,171,3)" rx="2" ry="2" />
<text  x="1133.18" y="687.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::peek (1 samples, 0.01%)</title><rect x="681.7" y="645" width="0.2" height="15.0" fill="rgb(244,228,16)" rx="2" ry="2" />
<text  x="684.72" y="655.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.01%)</title><rect x="658.8" y="469" width="0.1" height="15.0" fill="rgb(222,150,43)" rx="2" ry="2" />
<text  x="661.77" y="479.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="1146.8" y="645" width="0.2" height="15.0" fill="rgb(254,227,13)" rx="2" ry="2" />
<text  x="1149.84" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (2 samples, 0.03%)</title><rect x="338.8" y="597" width="0.4" height="15.0" fill="rgb(207,55,5)" rx="2" ry="2" />
<text  x="341.83" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::_Iter_equals_iter (1 samples, 0.01%)</title><rect x="1000.5" y="645" width="0.2" height="15.0" fill="rgb(224,54,21)" rx="2" ry="2" />
<text  x="1003.53" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4 samples, 0.05%)</title><rect x="666.4" y="677" width="0.6" height="15.0" fill="rgb(247,180,7)" rx="2" ry="2" />
<text  x="669.36" y="687.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="151.3" y="421" width="0.2" height="15.0" fill="rgb(223,219,9)" rx="2" ry="2" />
<text  x="154.30" y="431.5" ></text>
</g>
<g >
<title>_IO_vsprintf (1 samples, 0.01%)</title><rect x="1189.8" y="949" width="0.2" height="15.0" fill="rgb(232,81,13)" rx="2" ry="2" />
<text  x="1192.84" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1022.4" y="565" width="0.1" height="15.0" fill="rgb(233,131,30)" rx="2" ry="2" />
<text  x="1025.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="1162.0" y="677" width="0.2" height="15.0" fill="rgb(235,107,30)" rx="2" ry="2" />
<text  x="1165.03" y="687.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="621.1" y="981" width="0.2" height="15.0" fill="rgb(209,141,49)" rx="2" ry="2" />
<text  x="624.10" y="991.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::handleRead (25 samples, 0.34%)</title><rect x="320.7" y="693" width="4.1" height="15.0" fill="rgb(221,71,37)" rx="2" ry="2" />
<text  x="323.72" y="703.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="822.0" y="629" width="0.2" height="15.0" fill="rgb(227,79,6)" rx="2" ry="2" />
<text  x="825.05" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="309.9" y="789" width="0.2" height="15.0" fill="rgb(236,16,18)" rx="2" ry="2" />
<text  x="312.89" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (1 samples, 0.01%)</title><rect x="843.2" y="997" width="0.2" height="15.0" fill="rgb(240,9,5)" rx="2" ry="2" />
<text  x="846.23" y="1007.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (2 samples, 0.03%)</title><rect x="498.2" y="741" width="0.4" height="15.0" fill="rgb(231,7,12)" rx="2" ry="2" />
<text  x="501.23" y="751.5" ></text>
</g>
<g >
<title>muduo::net::Channel::eventsToString[abi:cxx11] (1 samples, 0.01%)</title><rect x="499.5" y="789" width="0.2" height="15.0" fill="rgb(252,95,37)" rx="2" ry="2" />
<text  x="502.52" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="806.2" y="613" width="0.2" height="15.0" fill="rgb(207,85,39)" rx="2" ry="2" />
<text  x="809.20" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (3 samples, 0.04%)</title><rect x="997.6" y="693" width="0.5" height="15.0" fill="rgb(233,81,29)" rx="2" ry="2" />
<text  x="1000.62" y="703.5" ></text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.01%)</title><rect x="848.4" y="805" width="0.2" height="15.0" fill="rgb(220,179,51)" rx="2" ry="2" />
<text  x="851.40" y="815.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="1186.4" y="981" width="0.2" height="15.0" fill="rgb(241,117,31)" rx="2" ry="2" />
<text  x="1189.44" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1149.3" y="693" width="0.1" height="15.0" fill="rgb(233,123,10)" rx="2" ry="2" />
<text  x="1152.26" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::operator= (3 samples, 0.04%)</title><rect x="114.3" y="805" width="0.5" height="15.0" fill="rgb(228,57,17)" rx="2" ry="2" />
<text  x="117.27" y="815.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (1 samples, 0.01%)</title><rect x="926.2" y="613" width="0.1" height="15.0" fill="rgb(209,75,48)" rx="2" ry="2" />
<text  x="929.16" y="623.5" ></text>
</g>
<g >
<title>do_iter_read (50 samples, 0.69%)</title><rect x="77.6" y="565" width="8.1" height="15.0" fill="rgb(236,174,39)" rx="2" ry="2" />
<text  x="80.58" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (3 samples, 0.04%)</title><rect x="1158.3" y="709" width="0.5" height="15.0" fill="rgb(224,103,28)" rx="2" ry="2" />
<text  x="1161.31" y="719.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1 samples, 0.01%)</title><rect x="396.2" y="549" width="0.2" height="15.0" fill="rgb(205,81,43)" rx="2" ry="2" />
<text  x="399.22" y="559.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="605.1" y="917" width="0.2" height="15.0" fill="rgb(254,38,7)" rx="2" ry="2" />
<text  x="608.09" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (2 samples, 0.03%)</title><rect x="787.9" y="661" width="0.4" height="15.0" fill="rgb(238,104,32)" rx="2" ry="2" />
<text  x="790.94" y="671.5" ></text>
</g>
<g >
<title>muduo::net::Channel::enableReading (1 samples, 0.01%)</title><rect x="385.2" y="693" width="0.2" height="15.0" fill="rgb(233,121,21)" rx="2" ry="2" />
<text  x="388.23" y="703.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (429 samples, 5.88%)</title><rect x="410.0" y="149" width="69.3" height="15.0" fill="rgb(216,126,14)" rx="2" ry="2" />
<text  x="412.96" y="159.5" >tcp_v4_..</text>
</g>
<g >
<title>std::forward&lt;void  (1 samples, 0.01%)</title><rect x="488.5" y="725" width="0.2" height="15.0" fill="rgb(232,91,15)" rx="2" ry="2" />
<text  x="491.53" y="735.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (10 samples, 0.14%)</title><rect x="245.9" y="693" width="1.6" height="15.0" fill="rgb(223,88,50)" rx="2" ry="2" />
<text  x="248.87" y="703.5" ></text>
</g>
<g >
<title>security_inode_getattr (2 samples, 0.03%)</title><rect x="835.0" y="613" width="0.3" height="15.0" fill="rgb(254,144,8)" rx="2" ry="2" />
<text  x="837.98" y="623.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::retrieveAsString[abi:cxx11] (2 samples, 0.03%)</title><rect x="681.6" y="661" width="0.3" height="15.0" fill="rgb(213,110,29)" rx="2" ry="2" />
<text  x="684.56" y="671.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1162.7" y="693" width="0.1" height="15.0" fill="rgb(244,27,25)" rx="2" ry="2" />
<text  x="1165.68" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (6 samples, 0.08%)</title><rect x="250.6" y="773" width="0.9" height="15.0" fill="rgb(225,33,49)" rx="2" ry="2" />
<text  x="253.56" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="69.5" y="693" width="0.2" height="15.0" fill="rgb(243,186,28)" rx="2" ry="2" />
<text  x="72.49" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="276.7" y="949" width="0.2" height="15.0" fill="rgb(224,52,50)" rx="2" ry="2" />
<text  x="279.75" y="959.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1181.4" y="693" width="0.2" height="15.0" fill="rgb(240,11,29)" rx="2" ry="2" />
<text  x="1184.43" y="703.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (4 samples, 0.05%)</title><rect x="267.4" y="965" width="0.6" height="15.0" fill="rgb(230,33,23)" rx="2" ry="2" />
<text  x="270.37" y="975.5" ></text>
</g>
<g >
<title>free (2 samples, 0.03%)</title><rect x="1006.7" y="693" width="0.3" height="15.0" fill="rgb(211,41,34)" rx="2" ry="2" />
<text  x="1009.67" y="703.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.38 (2 samples, 0.03%)</title><rect x="82.4" y="437" width="0.3" height="15.0" fill="rgb(248,194,7)" rx="2" ry="2" />
<text  x="85.43" y="447.5" ></text>
</g>
<g >
<title>tasklet_action (1 samples, 0.01%)</title><rect x="40.7" y="661" width="0.2" height="15.0" fill="rgb(220,22,2)" rx="2" ry="2" />
<text  x="43.72" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="257.5" y="821" width="0.2" height="15.0" fill="rgb(210,169,19)" rx="2" ry="2" />
<text  x="260.51" y="831.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.01%)</title><rect x="1118.2" y="629" width="0.2" height="15.0" fill="rgb(242,195,17)" rx="2" ry="2" />
<text  x="1121.22" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1006.5" y="661" width="0.2" height="15.0" fill="rgb(237,34,4)" rx="2" ry="2" />
<text  x="1009.51" y="671.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.01%)</title><rect x="404.1" y="389" width="0.2" height="15.0" fill="rgb(213,220,53)" rx="2" ry="2" />
<text  x="407.14" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="505.8" y="965" width="0.2" height="15.0" fill="rgb(237,99,48)" rx="2" ry="2" />
<text  x="508.83" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::detail::FixedBuffer&lt;4000000&gt;, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="802.8" y="677" width="0.2" height="15.0" fill="rgb(217,186,11)" rx="2" ry="2" />
<text  x="805.81" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1 samples, 0.01%)</title><rect x="791.0" y="629" width="0.2" height="15.0" fill="rgb(222,28,41)" rx="2" ry="2" />
<text  x="794.01" y="639.5" ></text>
</g>
<g >
<title>__lock_text_start (10 samples, 0.14%)</title><rect x="654.6" y="677" width="1.6" height="15.0" fill="rgb(206,137,6)" rx="2" ry="2" />
<text  x="657.56" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1157.8" y="709" width="0.2" height="15.0" fill="rgb(223,1,34)" rx="2" ry="2" />
<text  x="1160.83" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.01%)</title><rect x="1188.2" y="757" width="0.2" height="15.0" fill="rgb(222,101,20)" rx="2" ry="2" />
<text  x="1191.22" y="767.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.01%)</title><rect x="11.9" y="709" width="0.2" height="15.0" fill="rgb(217,144,20)" rx="2" ry="2" />
<text  x="14.94" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::end (3 samples, 0.04%)</title><rect x="504.9" y="821" width="0.4" height="15.0" fill="rgb(220,201,34)" rx="2" ry="2" />
<text  x="507.86" y="831.5" ></text>
</g>
<g >
<title>tcp_data_queue (1 samples, 0.01%)</title><rect x="560.6" y="421" width="0.2" height="15.0" fill="rgb(250,186,23)" rx="2" ry="2" />
<text  x="563.63" y="431.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="782.1" y="645" width="0.2" height="15.0" fill="rgb(235,63,12)" rx="2" ry="2" />
<text  x="785.12" y="655.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::~Impl (3 samples, 0.04%)</title><rect x="803.8" y="693" width="0.5" height="15.0" fill="rgb(224,75,12)" rx="2" ry="2" />
<text  x="806.78" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="669.9" y="677" width="0.2" height="15.0" fill="rgb(253,78,20)" rx="2" ry="2" />
<text  x="672.92" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1 samples, 0.01%)</title><rect x="355.3" y="533" width="0.2" height="15.0" fill="rgb(216,94,23)" rx="2" ry="2" />
<text  x="358.32" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="108.9" y="581" width="0.2" height="15.0" fill="rgb(210,208,44)" rx="2" ry="2" />
<text  x="111.94" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::operator (2 samples, 0.03%)</title><rect x="487.2" y="677" width="0.4" height="15.0" fill="rgb(228,140,50)" rx="2" ry="2" />
<text  x="490.24" y="687.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.08%)</title><rect x="617.7" y="981" width="1.0" height="15.0" fill="rgb(241,193,16)" rx="2" ry="2" />
<text  x="620.70" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, char*, false&gt;::_Head_base (1 samples, 0.01%)</title><rect x="1132.6" y="645" width="0.2" height="15.0" fill="rgb(224,66,13)" rx="2" ry="2" />
<text  x="1135.61" y="655.5" ></text>
</g>
<g >
<title>boost::equality_comparable&lt;muduo::Timestamp, muduo::Timestamp, boost::detail::empty_base&lt;muduo::Timestamp&gt;, boost::detail::false_t&gt;::equality_comparable (1 samples, 0.01%)</title><rect x="251.7" y="741" width="0.2" height="15.0" fill="rgb(219,220,0)" rx="2" ry="2" />
<text  x="254.69" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="99.4" y="501" width="0.2" height="15.0" fill="rgb(205,63,6)" rx="2" ry="2" />
<text  x="102.40" y="511.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="316.8" y="677" width="0.2" height="15.0" fill="rgb(214,41,39)" rx="2" ry="2" />
<text  x="319.84" y="687.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="118.3" y="773" width="0.2" height="15.0" fill="rgb(250,61,53)" rx="2" ry="2" />
<text  x="121.32" y="783.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="800.2" y="629" width="0.3" height="15.0" fill="rgb(206,145,13)" rx="2" ry="2" />
<text  x="803.22" y="639.5" ></text>
</g>
<g >
<title>muduo::StringPiece::StringPiece (1 samples, 0.01%)</title><rect x="1148.6" y="709" width="0.2" height="15.0" fill="rgb(240,81,44)" rx="2" ry="2" />
<text  x="1151.61" y="719.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, char const*, char*&gt; (8 samples, 0.11%)</title><rect x="677.2" y="629" width="1.3" height="15.0" fill="rgb(233,111,37)" rx="2" ry="2" />
<text  x="680.20" y="639.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (561 samples, 7.69%)</title><rect x="1027.5" y="629" width="90.7" height="15.0" fill="rgb(240,125,43)" rx="2" ry="2" />
<text  x="1030.53" y="639.5" >[libpthrea..</text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="134.0" y="805" width="0.2" height="15.0" fill="rgb(216,97,36)" rx="2" ry="2" />
<text  x="137.00" y="815.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::printActiveChannels (60 samples, 0.82%)</title><rect x="493.2" y="821" width="9.7" height="15.0" fill="rgb(252,63,47)" rx="2" ry="2" />
<text  x="496.22" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="1135.5" y="645" width="0.2" height="15.0" fill="rgb(247,193,48)" rx="2" ry="2" />
<text  x="1138.52" y="655.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::queueInLoop (2 samples, 0.03%)</title><rect x="88.2" y="373" width="0.4" height="15.0" fill="rgb(217,221,34)" rx="2" ry="2" />
<text  x="91.25" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="101.2" y="533" width="0.5" height="15.0" fill="rgb(229,30,5)" rx="2" ry="2" />
<text  x="104.18" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.01%)</title><rect x="1152.2" y="661" width="0.1" height="15.0" fill="rgb(213,57,50)" rx="2" ry="2" />
<text  x="1155.17" y="671.5" ></text>
</g>
<g >
<title>__skb_clone (4 samples, 0.05%)</title><rect x="237.8" y="405" width="0.6" height="15.0" fill="rgb(216,49,29)" rx="2" ry="2" />
<text  x="240.79" y="415.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="502.4" y="805" width="0.4" height="15.0" fill="rgb(254,148,11)" rx="2" ry="2" />
<text  x="505.43" y="815.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;@plt (1 samples, 0.01%)</title><rect x="22.6" y="965" width="0.2" height="15.0" fill="rgb(218,129,23)" rx="2" ry="2" />
<text  x="25.61" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.03%)</title><rect x="843.9" y="997" width="0.3" height="15.0" fill="rgb(219,199,51)" rx="2" ry="2" />
<text  x="846.87" y="1007.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (2 samples, 0.03%)</title><rect x="1188.4" y="933" width="0.3" height="15.0" fill="rgb(243,123,15)" rx="2" ry="2" />
<text  x="1191.38" y="943.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.01%)</title><rect x="337.4" y="277" width="0.1" height="15.0" fill="rgb(215,170,40)" rx="2" ry="2" />
<text  x="340.37" y="287.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="842.9" y="949" width="0.3" height="15.0" fill="rgb(243,50,30)" rx="2" ry="2" />
<text  x="845.90" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="137.7" y="613" width="0.2" height="15.0" fill="rgb(215,153,8)" rx="2" ry="2" />
<text  x="140.72" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (12 samples, 0.16%)</title><rect x="351.4" y="517" width="2.0" height="15.0" fill="rgb(206,94,23)" rx="2" ry="2" />
<text  x="354.44" y="527.5" ></text>
</g>
<g >
<title>Parser::response_request (1 samples, 0.01%)</title><rect x="1162.8" y="725" width="0.2" height="15.0" fill="rgb(229,17,12)" rx="2" ry="2" />
<text  x="1165.84" y="735.5" ></text>
</g>
<g >
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="584.1" y="773" width="0.3" height="15.0" fill="rgb(220,93,26)" rx="2" ry="2" />
<text  x="587.08" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (16 samples, 0.22%)</title><rect x="102.1" y="549" width="2.6" height="15.0" fill="rgb(227,86,48)" rx="2" ry="2" />
<text  x="105.15" y="559.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (1 samples, 0.01%)</title><rect x="813.6" y="677" width="0.2" height="15.0" fill="rgb(248,19,9)" rx="2" ry="2" />
<text  x="816.64" y="687.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="971.3" y="933" width="0.1" height="15.0" fill="rgb(253,66,20)" rx="2" ry="2" />
<text  x="974.27" y="943.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="343.7" y="517" width="0.1" height="15.0" fill="rgb(227,54,52)" rx="2" ry="2" />
<text  x="346.68" y="527.5" ></text>
</g>
<g >
<title>bictcp_cwnd_event (1 samples, 0.01%)</title><rect x="581.0" y="741" width="0.2" height="15.0" fill="rgb(251,183,22)" rx="2" ry="2" />
<text  x="584.00" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="771.1" y="645" width="0.5" height="15.0" fill="rgb(205,12,6)" rx="2" ry="2" />
<text  x="774.12" y="655.5" ></text>
</g>
<g >
<title>StaticServer::onConnection (2 samples, 0.03%)</title><rect x="385.6" y="597" width="0.3" height="15.0" fill="rgb(245,48,50)" rx="2" ry="2" />
<text  x="388.55" y="607.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1127.4" y="645" width="0.2" height="15.0" fill="rgb(235,35,18)" rx="2" ry="2" />
<text  x="1130.44" y="655.5" ></text>
</g>
<g >
<title>process_backlog (1 samples, 0.01%)</title><rect x="234.9" y="277" width="0.1" height="15.0" fill="rgb(251,8,9)" rx="2" ry="2" />
<text  x="237.88" y="287.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="1183.5" y="725" width="0.2" height="15.0" fill="rgb(240,134,2)" rx="2" ry="2" />
<text  x="1186.53" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::get (7 samples, 0.10%)</title><rect x="782.3" y="693" width="1.1" height="15.0" fill="rgb(239,0,11)" rx="2" ry="2" />
<text  x="785.28" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;void  (131 samples, 1.79%)</title><rect x="89.5" y="677" width="21.2" height="15.0" fill="rgb(209,160,33)" rx="2" ry="2" />
<text  x="92.54" y="687.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="842.3" y="741" width="0.1" height="15.0" fill="rgb(218,89,25)" rx="2" ry="2" />
<text  x="845.26" y="751.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.01%)</title><rect x="1152.7" y="629" width="0.1" height="15.0" fill="rgb(249,204,13)" rx="2" ry="2" />
<text  x="1155.66" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="283.1" y="981" width="0.1" height="15.0" fill="rgb(246,161,13)" rx="2" ry="2" />
<text  x="286.05" y="991.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="119.9" y="773" width="0.2" height="15.0" fill="rgb(223,113,7)" rx="2" ry="2" />
<text  x="122.93" y="783.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (2 samples, 0.03%)</title><rect x="1015.1" y="645" width="0.3" height="15.0" fill="rgb(243,21,7)" rx="2" ry="2" />
<text  x="1018.08" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="1124.0" y="645" width="0.4" height="15.0" fill="rgb(233,198,38)" rx="2" ry="2" />
<text  x="1127.04" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="766.9" y="565" width="0.2" height="15.0" fill="rgb(242,185,52)" rx="2" ry="2" />
<text  x="769.92" y="575.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.01%)</title><rect x="613.8" y="981" width="0.2" height="15.0" fill="rgb(238,202,33)" rx="2" ry="2" />
<text  x="616.82" y="991.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (4 samples, 0.05%)</title><rect x="1131.2" y="677" width="0.6" height="15.0" fill="rgb(208,22,11)" rx="2" ry="2" />
<text  x="1134.15" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (1 samples, 0.01%)</title><rect x="1155.6" y="709" width="0.1" height="15.0" fill="rgb(216,1,15)" rx="2" ry="2" />
<text  x="1158.57" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt; &gt; (17 samples, 0.23%)</title><rect x="104.7" y="533" width="2.8" height="15.0" fill="rgb(226,220,15)" rx="2" ry="2" />
<text  x="107.74" y="543.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (3 samples, 0.04%)</title><rect x="316.5" y="741" width="0.5" height="15.0" fill="rgb(243,131,50)" rx="2" ry="2" />
<text  x="319.52" y="751.5" ></text>
</g>
<g >
<title>__lock_text_start (59 samples, 0.81%)</title><rect x="565.8" y="341" width="9.5" height="15.0" fill="rgb(254,221,23)" rx="2" ry="2" />
<text  x="568.81" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.01%)</title><rect x="255.6" y="789" width="0.1" height="15.0" fill="rgb(234,136,19)" rx="2" ry="2" />
<text  x="258.57" y="799.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.05%)</title><rect x="13.9" y="805" width="0.6" height="15.0" fill="rgb(212,55,19)" rx="2" ry="2" />
<text  x="16.88" y="815.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (2 samples, 0.03%)</title><rect x="385.6" y="613" width="0.3" height="15.0" fill="rgb(205,69,37)" rx="2" ry="2" />
<text  x="388.55" y="623.5" ></text>
</g>
<g >
<title>try_to_wake_up (4 samples, 0.05%)</title><rect x="93.1" y="421" width="0.6" height="15.0" fill="rgb(218,169,46)" rx="2" ry="2" />
<text  x="96.10" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,150 samples, 15.76%)</title><rect x="998.4" y="757" width="185.9" height="15.0" fill="rgb(225,196,36)" rx="2" ry="2" />
<text  x="1001.43" y="767.5" >std::__invoke_impl&lt;void,..</text>
</g>
<g >
<title>std::function&lt;void  (6 samples, 0.08%)</title><rect x="337.1" y="629" width="0.9" height="15.0" fill="rgb(211,79,5)" rx="2" ry="2" />
<text  x="340.05" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="383.1" y="805" width="0.2" height="15.0" fill="rgb(220,131,48)" rx="2" ry="2" />
<text  x="386.13" y="815.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="1145.2" y="629" width="0.2" height="15.0" fill="rgb(220,191,5)" rx="2" ry="2" />
<text  x="1148.22" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="245.4" y="757" width="0.1" height="15.0" fill="rgb(242,142,5)" rx="2" ry="2" />
<text  x="248.39" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1012.0" y="629" width="0.2" height="15.0" fill="rgb(229,133,9)" rx="2" ry="2" />
<text  x="1015.01" y="639.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (3 samples, 0.04%)</title><rect x="674.0" y="645" width="0.4" height="15.0" fill="rgb(238,50,11)" rx="2" ry="2" />
<text  x="676.96" y="655.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1187.4" y="581" width="0.2" height="15.0" fill="rgb(222,59,23)" rx="2" ry="2" />
<text  x="1190.41" y="591.5" ></text>
</g>
<g >
<title>apparmor_file_permission (3 samples, 0.04%)</title><rect x="1116.6" y="517" width="0.5" height="15.0" fill="rgb(241,194,13)" rx="2" ry="2" />
<text  x="1119.60" y="527.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="763.8" y="453" width="0.2" height="15.0" fill="rgb(218,129,24)" rx="2" ry="2" />
<text  x="766.85" y="463.5" ></text>
</g>
<g >
<title>sys_readv (53 samples, 0.73%)</title><rect x="327.5" y="613" width="8.6" height="15.0" fill="rgb(245,211,50)" rx="2" ry="2" />
<text  x="330.51" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3 samples, 0.04%)</title><rect x="658.4" y="661" width="0.5" height="15.0" fill="rgb(240,113,11)" rx="2" ry="2" />
<text  x="661.44" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="381.2" y="789" width="0.1" height="15.0" fill="rgb(241,66,12)" rx="2" ry="2" />
<text  x="384.19" y="799.5" ></text>
</g>
<g >
<title>__strcpy_sse2_unaligned (4 samples, 0.05%)</title><rect x="1164.9" y="725" width="0.7" height="15.0" fill="rgb(242,228,36)" rx="2" ry="2" />
<text  x="1167.94" y="735.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="361.9" y="757" width="0.2" height="15.0" fill="rgb(217,104,35)" rx="2" ry="2" />
<text  x="364.95" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="285.3" y="949" width="0.2" height="15.0" fill="rgb(211,122,12)" rx="2" ry="2" />
<text  x="288.32" y="959.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.3" y="597" width="0.2" height="15.0" fill="rgb(253,76,52)" rx="2" ry="2" />
<text  x="93.35" y="607.5" ></text>
</g>
<g >
<title>muduo::T::T (2 samples, 0.03%)</title><rect x="494.8" y="757" width="0.4" height="15.0" fill="rgb(226,70,36)" rx="2" ry="2" />
<text  x="497.84" y="767.5" ></text>
</g>
<g >
<title>iov_iter_advance (1 samples, 0.01%)</title><rect x="153.6" y="469" width="0.1" height="15.0" fill="rgb(229,185,44)" rx="2" ry="2" />
<text  x="156.56" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;2ul, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="998.1" y="773" width="0.2" height="15.0" fill="rgb(252,36,6)" rx="2" ry="2" />
<text  x="1001.10" y="783.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="949.4" y="949" width="0.2" height="15.0" fill="rgb(253,98,20)" rx="2" ry="2" />
<text  x="952.44" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="806.0" y="597" width="0.2" height="15.0" fill="rgb(251,176,22)" rx="2" ry="2" />
<text  x="809.04" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="680.6" y="629" width="0.2" height="15.0" fill="rgb(238,40,52)" rx="2" ry="2" />
<text  x="683.59" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="839.0" y="725" width="0.2" height="15.0" fill="rgb(242,51,33)" rx="2" ry="2" />
<text  x="842.02" y="735.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (17 samples, 0.23%)</title><rect x="369.7" y="773" width="2.8" height="15.0" fill="rgb(205,86,2)" rx="2" ry="2" />
<text  x="372.71" y="783.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,136 samples, 15.56%)</title><rect x="659.1" y="821" width="183.6" height="15.0" fill="rgb(233,119,34)" rx="2" ry="2" />
<text  x="662.09" y="831.5" >std::_Function_handler&lt;..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="357.1" y="581" width="0.2" height="15.0" fill="rgb(224,151,39)" rx="2" ry="2" />
<text  x="360.10" y="591.5" ></text>
</g>
<g >
<title>apparmor_socket_sendmsg (1 samples, 0.01%)</title><rect x="548.0" y="837" width="0.2" height="15.0" fill="rgb(252,28,6)" rx="2" ry="2" />
<text  x="551.02" y="847.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (72 samples, 0.99%)</title><rect x="75.3" y="645" width="11.7" height="15.0" fill="rgb(234,120,6)" rx="2" ry="2" />
<text  x="78.31" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (11 samples, 0.15%)</title><rect x="245.7" y="773" width="1.8" height="15.0" fill="rgb(227,43,12)" rx="2" ry="2" />
<text  x="248.71" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="92.1" y="469" width="0.2" height="15.0" fill="rgb(241,53,37)" rx="2" ry="2" />
<text  x="95.13" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (8 samples, 0.11%)</title><rect x="768.1" y="597" width="1.2" height="15.0" fill="rgb(249,221,35)" rx="2" ry="2" />
<text  x="771.05" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (3 samples, 0.04%)</title><rect x="997.6" y="709" width="0.5" height="15.0" fill="rgb(250,143,5)" rx="2" ry="2" />
<text  x="1000.62" y="719.5" ></text>
</g>
<g >
<title>__kfree_skb (6 samples, 0.08%)</title><rect x="909.8" y="373" width="1.0" height="15.0" fill="rgb(223,19,33)" rx="2" ry="2" />
<text  x="912.83" y="383.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1141.5" y="645" width="0.2" height="15.0" fill="rgb(208,177,5)" rx="2" ry="2" />
<text  x="1144.50" y="655.5" ></text>
</g>
<g >
<title>__errno_location@plt (1 samples, 0.01%)</title><rect x="309.6" y="821" width="0.1" height="15.0" fill="rgb(232,170,47)" rx="2" ry="2" />
<text  x="312.57" y="831.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::handleRead (21 samples, 0.29%)</title><rect x="70.9" y="693" width="3.4" height="15.0" fill="rgb(227,189,39)" rx="2" ry="2" />
<text  x="73.95" y="703.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.01%)</title><rect x="82.6" y="293" width="0.1" height="15.0" fill="rgb(245,207,46)" rx="2" ry="2" />
<text  x="85.59" y="303.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="279.5" y="965" width="0.3" height="15.0" fill="rgb(233,202,42)" rx="2" ry="2" />
<text  x="282.50" y="975.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (3 samples, 0.04%)</title><rect x="674.4" y="645" width="0.5" height="15.0" fill="rgb(250,3,50)" rx="2" ry="2" />
<text  x="677.45" y="655.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.01%)</title><rect x="82.6" y="133" width="0.1" height="15.0" fill="rgb(238,195,18)" rx="2" ry="2" />
<text  x="85.59" y="143.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="586.2" y="869" width="0.1" height="15.0" fill="rgb(238,98,27)" rx="2" ry="2" />
<text  x="589.18" y="879.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.01%)</title><rect x="1015.1" y="549" width="0.1" height="15.0" fill="rgb(253,72,33)" rx="2" ry="2" />
<text  x="1018.08" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (2 samples, 0.03%)</title><rect x="657.1" y="613" width="0.4" height="15.0" fill="rgb(225,16,1)" rx="2" ry="2" />
<text  x="660.15" y="623.5" ></text>
</g>
<g >
<title>sys_epoll_wait (120 samples, 1.64%)</title><rect x="289.4" y="773" width="19.4" height="15.0" fill="rgb(248,92,49)" rx="2" ry="2" />
<text  x="292.36" y="783.5" ></text>
</g>
<g >
<title>[unknown] (132 samples, 1.81%)</title><rect x="260.7" y="997" width="21.4" height="15.0" fill="rgb(216,31,46)" rx="2" ry="2" />
<text  x="263.74" y="1007.5" >[..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (2 samples, 0.03%)</title><rect x="253.6" y="757" width="0.4" height="15.0" fill="rgb(231,194,9)" rx="2" ry="2" />
<text  x="256.63" y="767.5" ></text>
</g>
<g >
<title>asyncOutput (15 samples, 0.21%)</title><rect x="1013.9" y="677" width="2.5" height="15.0" fill="rgb(248,29,30)" rx="2" ry="2" />
<text  x="1016.95" y="687.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (1 samples, 0.01%)</title><rect x="892.0" y="805" width="0.2" height="15.0" fill="rgb(216,228,25)" rx="2" ry="2" />
<text  x="895.05" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.01%)</title><rect x="353.4" y="469" width="0.1" height="15.0" fill="rgb(226,28,26)" rx="2" ry="2" />
<text  x="356.38" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*, void&gt; (9 samples, 0.12%)</title><rect x="775.8" y="693" width="1.5" height="15.0" fill="rgb(210,55,1)" rx="2" ry="2" />
<text  x="778.81" y="703.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.01%)</title><rect x="1151.8" y="581" width="0.2" height="15.0" fill="rgb(253,181,19)" rx="2" ry="2" />
<text  x="1154.85" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (6 samples, 0.08%)</title><rect x="1120.2" y="597" width="0.9" height="15.0" fill="rgb(242,229,7)" rx="2" ry="2" />
<text  x="1123.16" y="607.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.01%)</title><rect x="559.8" y="437" width="0.2" height="15.0" fill="rgb(239,197,48)" rx="2" ry="2" />
<text  x="562.83" y="447.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="67.6" y="693" width="0.1" height="15.0" fill="rgb(244,147,34)" rx="2" ry="2" />
<text  x="70.55" y="703.5" ></text>
</g>
<g >
<title>wake_up_q (10 samples, 0.14%)</title><rect x="992.4" y="709" width="1.7" height="15.0" fill="rgb(211,2,2)" rx="2" ry="2" />
<text  x="995.44" y="719.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="257.2" y="805" width="0.1" height="15.0" fill="rgb(240,36,8)" rx="2" ry="2" />
<text  x="260.19" y="815.5" ></text>
</g>
<g >
<title>muduo::ThreadPl&lt;Parser&gt;::take (29 samples, 0.40%)</title><rect x="992.0" y="837" width="4.6" height="15.0" fill="rgb(215,91,11)" rx="2" ry="2" />
<text  x="994.96" y="847.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (4 samples, 0.05%)</title><rect x="398.8" y="485" width="0.7" height="15.0" fill="rgb(245,170,54)" rx="2" ry="2" />
<text  x="401.81" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="818.3" y="645" width="0.2" height="15.0" fill="rgb(245,101,31)" rx="2" ry="2" />
<text  x="821.33" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="676.1" y="613" width="0.1" height="15.0" fill="rgb(251,224,14)" rx="2" ry="2" />
<text  x="679.06" y="623.5" ></text>
</g>
<g >
<title>sock_read_iter (137 samples, 1.88%)</title><rect x="509.9" y="885" width="22.1" height="15.0" fill="rgb(218,104,7)" rx="2" ry="2" />
<text  x="512.87" y="895.5" >s..</text>
</g>
<g >
<title>muduo::net::EventLoop::wakeup (562 samples, 7.70%)</title><rect x="1027.5" y="645" width="90.9" height="15.0" fill="rgb(252,32,25)" rx="2" ry="2" />
<text  x="1030.53" y="655.5" >muduo::net..</text>
</g>
<g >
<title>tcp_send_delayed_ack (1 samples, 0.01%)</title><rect x="575.8" y="405" width="0.2" height="15.0" fill="rgb(211,1,48)" rx="2" ry="2" />
<text  x="578.83" y="415.5" ></text>
</g>
<g >
<title>apparmor_file_permission (5 samples, 0.07%)</title><rect x="764.8" y="517" width="0.8" height="15.0" fill="rgb(240,182,16)" rx="2" ry="2" />
<text  x="767.82" y="527.5" ></text>
</g>
<g >
<title>strlen (2 samples, 0.03%)</title><rect x="367.4" y="757" width="0.4" height="15.0" fill="rgb(246,82,32)" rx="2" ry="2" />
<text  x="370.44" y="767.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.01%)</title><rect x="1117.3" y="469" width="0.1" height="15.0" fill="rgb(214,29,17)" rx="2" ry="2" />
<text  x="1120.25" y="479.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="1186.6" y="837" width="0.2" height="15.0" fill="rgb(253,61,43)" rx="2" ry="2" />
<text  x="1189.61" y="847.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="683.0" y="629" width="0.5" height="15.0" fill="rgb(220,26,14)" rx="2" ry="2" />
<text  x="686.02" y="639.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.01%)</title><rect x="674.1" y="549" width="0.2" height="15.0" fill="rgb(217,115,50)" rx="2" ry="2" />
<text  x="677.12" y="559.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7 samples, 0.10%)</title><rect x="994.7" y="789" width="1.1" height="15.0" fill="rgb(206,92,25)" rx="2" ry="2" />
<text  x="997.71" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (6 samples, 0.08%)</title><rect x="342.5" y="501" width="1.0" height="15.0" fill="rgb(228,6,26)" rx="2" ry="2" />
<text  x="345.55" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="784.9" y="661" width="0.3" height="15.0" fill="rgb(211,92,47)" rx="2" ry="2" />
<text  x="787.87" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1 samples, 0.01%)</title><rect x="1133.6" y="645" width="0.1" height="15.0" fill="rgb(219,133,35)" rx="2" ry="2" />
<text  x="1136.58" y="655.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="1025.1" y="501" width="0.2" height="15.0" fill="rgb(233,213,46)" rx="2" ry="2" />
<text  x="1028.10" y="511.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (8 samples, 0.11%)</title><rect x="894.6" y="789" width="1.3" height="15.0" fill="rgb(227,176,32)" rx="2" ry="2" />
<text  x="897.64" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1162.0" y="661" width="0.2" height="15.0" fill="rgb(241,205,44)" rx="2" ry="2" />
<text  x="1165.03" y="671.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="366.6" y="757" width="0.2" height="15.0" fill="rgb(249,228,4)" rx="2" ry="2" />
<text  x="369.64" y="767.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="24.9" y="917" width="0.1" height="15.0" fill="rgb(220,157,19)" rx="2" ry="2" />
<text  x="27.87" y="927.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::setCookie (1 samples, 0.01%)</title><rect x="1148.5" y="661" width="0.1" height="15.0" fill="rgb(228,142,23)" rx="2" ry="2" />
<text  x="1151.45" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;epoll_event*, std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="309.7" y="821" width="0.2" height="15.0" fill="rgb(226,38,32)" rx="2" ry="2" />
<text  x="312.73" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (3 samples, 0.04%)</title><rect x="768.9" y="581" width="0.4" height="15.0" fill="rgb(243,204,40)" rx="2" ry="2" />
<text  x="771.86" y="591.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="792.9" y="597" width="0.2" height="15.0" fill="rgb(245,72,39)" rx="2" ry="2" />
<text  x="795.95" y="607.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleRead (2 samples, 0.03%)</title><rect x="70.0" y="709" width="0.3" height="15.0" fill="rgb(235,35,8)" rx="2" ry="2" />
<text  x="72.98" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="97.5" y="517" width="0.1" height="15.0" fill="rgb(236,155,31)" rx="2" ry="2" />
<text  x="100.46" y="527.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="773.1" y="613" width="0.1" height="15.0" fill="rgb(233,65,40)" rx="2" ry="2" />
<text  x="776.06" y="623.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (6 samples, 0.08%)</title><rect x="166.2" y="101" width="0.9" height="15.0" fill="rgb(225,128,26)" rx="2" ry="2" />
<text  x="169.17" y="111.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::updateChannel (1 samples, 0.01%)</title><rect x="385.2" y="661" width="0.2" height="15.0" fill="rgb(236,27,8)" rx="2" ry="2" />
<text  x="388.23" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.7" y="581" width="0.1" height="15.0" fill="rgb(209,141,14)" rx="2" ry="2" />
<text  x="1122.68" y="591.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="88.1" y="421" width="0.1" height="15.0" fill="rgb(206,66,29)" rx="2" ry="2" />
<text  x="91.08" y="431.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (1 samples, 0.01%)</title><rect x="165.8" y="117" width="0.2" height="15.0" fill="rgb(253,181,52)" rx="2" ry="2" />
<text  x="168.85" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="104.3" y="485" width="0.1" height="15.0" fill="rgb(250,99,51)" rx="2" ry="2" />
<text  x="107.25" y="495.5" ></text>
</g>
<g >
<title>muduo::net::Channel::reventsToString[abi:cxx11] (17 samples, 0.23%)</title><rect x="254.3" y="805" width="2.7" height="15.0" fill="rgb(219,141,53)" rx="2" ry="2" />
<text  x="257.28" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::get (5 samples, 0.07%)</title><rect x="1131.8" y="693" width="0.8" height="15.0" fill="rgb(214,67,26)" rx="2" ry="2" />
<text  x="1134.80" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (3 samples, 0.04%)</title><rect x="127.5" y="757" width="0.5" height="15.0" fill="rgb(229,210,21)" rx="2" ry="2" />
<text  x="130.53" y="767.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.01%)</title><rect x="1144.9" y="629" width="0.2" height="15.0" fill="rgb(247,119,48)" rx="2" ry="2" />
<text  x="1147.90" y="639.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="1147.0" y="661" width="0.2" height="15.0" fill="rgb(225,186,3)" rx="2" ry="2" />
<text  x="1150.00" y="671.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="92.4" y="437" width="0.2" height="15.0" fill="rgb(220,35,14)" rx="2" ry="2" />
<text  x="95.45" y="447.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool&gt; (2 samples, 0.03%)</title><rect x="354.8" y="517" width="0.4" height="15.0" fill="rgb(239,59,8)" rx="2" ry="2" />
<text  x="357.83" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, std::default_delete&lt;muduo::detail::FixedBuffer&lt;4000000&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="497.3" y="709" width="0.1" height="15.0" fill="rgb(207,104,49)" rx="2" ry="2" />
<text  x="500.26" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="793.4" y="597" width="0.2" height="15.0" fill="rgb(249,70,23)" rx="2" ry="2" />
<text  x="796.43" y="607.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="376.2" y="725" width="0.1" height="15.0" fill="rgb(243,98,25)" rx="2" ry="2" />
<text  x="379.17" y="735.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.05%)</title><rect x="780.0" y="661" width="0.7" height="15.0" fill="rgb(241,111,18)" rx="2" ry="2" />
<text  x="783.02" y="671.5" ></text>
</g>
<g >
<title>Parser::findCRLF (9 samples, 0.12%)</title><rect x="661.0" y="709" width="1.5" height="15.0" fill="rgb(229,68,33)" rx="2" ry="2" />
<text  x="664.03" y="719.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.01%)</title><rect x="1014.4" y="581" width="0.2" height="15.0" fill="rgb(223,171,24)" rx="2" ry="2" />
<text  x="1017.43" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="503.9" y="821" width="0.2" height="15.0" fill="rgb(210,52,30)" rx="2" ry="2" />
<text  x="506.89" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="258.6" y="821" width="0.2" height="15.0" fill="rgb(238,104,0)" rx="2" ry="2" />
<text  x="261.64" y="831.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="28.6" y="949" width="0.2" height="15.0" fill="rgb(248,165,2)" rx="2" ry="2" />
<text  x="31.59" y="959.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="410.6" y="133" width="0.3" height="15.0" fill="rgb(206,14,7)" rx="2" ry="2" />
<text  x="413.61" y="143.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (9 samples, 0.12%)</title><rect x="941.4" y="949" width="1.4" height="15.0" fill="rgb(216,36,13)" rx="2" ry="2" />
<text  x="944.36" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.01%)</title><rect x="791.2" y="629" width="0.1" height="15.0" fill="rgb(231,100,15)" rx="2" ry="2" />
<text  x="794.17" y="639.5" ></text>
</g>
<g >
<title>muduo::net::Channel::reventsToString[abi:cxx11] (3 samples, 0.04%)</title><rect x="318.1" y="789" width="0.5" height="15.0" fill="rgb(221,199,38)" rx="2" ry="2" />
<text  x="321.14" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (3 samples, 0.04%)</title><rect x="658.4" y="741" width="0.5" height="15.0" fill="rgb(248,111,22)" rx="2" ry="2" />
<text  x="661.44" y="751.5" ></text>
</g>
<g >
<title>__fdget_pos (3 samples, 0.04%)</title><rect x="1030.8" y="565" width="0.4" height="15.0" fill="rgb(225,96,2)" rx="2" ry="2" />
<text  x="1033.76" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="1131.6" y="629" width="0.2" height="15.0" fill="rgb(232,160,31)" rx="2" ry="2" />
<text  x="1134.64" y="639.5" ></text>
</g>
<g >
<title>__lookup_mnt (2 samples, 0.03%)</title><rect x="829.0" y="517" width="0.3" height="15.0" fill="rgb(238,184,37)" rx="2" ry="2" />
<text  x="832.00" y="527.5" ></text>
</g>
<g >
<title>operator new@plt (1 samples, 0.01%)</title><rect x="353.5" y="421" width="0.2" height="15.0" fill="rgb(206,69,20)" rx="2" ry="2" />
<text  x="356.54" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;StaticServer::Entry, StaticServer::Entry&gt; (1 samples, 0.01%)</title><rect x="106.4" y="437" width="0.1" height="15.0" fill="rgb(243,88,49)" rx="2" ry="2" />
<text  x="109.35" y="447.5" ></text>
</g>
<g >
<title>redisGetReply (1 samples, 0.01%)</title><rect x="600.4" y="965" width="0.2" height="15.0" fill="rgb(220,73,10)" rx="2" ry="2" />
<text  x="603.40" y="975.5" ></text>
</g>
<g >
<title>sock_sendmsg (579 samples, 7.93%)</title><rect x="149.7" y="549" width="93.6" height="15.0" fill="rgb(228,147,14)" rx="2" ry="2" />
<text  x="152.68" y="559.5" >sock_sendmsg</text>
</g>
<g >
<title>muduo::net::EPollPoller::update (1 samples, 0.01%)</title><rect x="385.2" y="629" width="0.2" height="15.0" fill="rgb(247,32,29)" rx="2" ry="2" />
<text  x="388.23" y="639.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="64.0" y="741" width="0.2" height="15.0" fill="rgb(253,167,31)" rx="2" ry="2" />
<text  x="67.00" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="489.3" y="773" width="0.2" height="15.0" fill="rgb(210,215,1)" rx="2" ry="2" />
<text  x="492.34" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;3ul, std::_Placeholder&lt;3&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="356.8" y="597" width="0.1" height="15.0" fill="rgb(222,122,25)" rx="2" ry="2" />
<text  x="359.77" y="607.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="96.2" y="501" width="0.1" height="15.0" fill="rgb(216,190,32)" rx="2" ry="2" />
<text  x="99.17" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="110.2" y="581" width="0.2" height="15.0" fill="rgb(230,61,16)" rx="2" ry="2" />
<text  x="113.23" y="591.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1150.4" y="597" width="0.2" height="15.0" fill="rgb(239,106,14)" rx="2" ry="2" />
<text  x="1153.39" y="607.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="77.3" y="517" width="0.1" height="15.0" fill="rgb(243,169,24)" rx="2" ry="2" />
<text  x="80.25" y="527.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.01%)</title><rect x="549.5" y="805" width="0.1" height="15.0" fill="rgb(234,31,37)" rx="2" ry="2" />
<text  x="552.48" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7 samples, 0.10%)</title><rect x="794.4" y="661" width="1.1" height="15.0" fill="rgb(221,128,5)" rx="2" ry="2" />
<text  x="797.40" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (6 samples, 0.08%)</title><rect x="337.1" y="549" width="0.9" height="15.0" fill="rgb(219,182,27)" rx="2" ry="2" />
<text  x="340.05" y="559.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.01%)</title><rect x="633.4" y="917" width="0.1" height="15.0" fill="rgb(217,192,41)" rx="2" ry="2" />
<text  x="636.38" y="927.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="1148.3" y="661" width="0.2" height="15.0" fill="rgb(237,195,26)" rx="2" ry="2" />
<text  x="1151.29" y="671.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base (1 samples, 0.01%)</title><rect x="97.8" y="501" width="0.1" height="15.0" fill="rgb(219,156,16)" rx="2" ry="2" />
<text  x="100.78" y="511.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="86.3" y="533" width="0.2" height="15.0" fill="rgb(210,161,13)" rx="2" ry="2" />
<text  x="89.31" y="543.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (1 samples, 0.01%)</title><rect x="1009.6" y="661" width="0.1" height="15.0" fill="rgb(213,108,15)" rx="2" ry="2" />
<text  x="1012.58" y="671.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.8" y="533" width="0.2" height="15.0" fill="rgb(234,33,9)" rx="2" ry="2" />
<text  x="1123.81" y="543.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1125.3" y="629" width="0.2" height="15.0" fill="rgb(247,15,32)" rx="2" ry="2" />
<text  x="1128.33" y="639.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="678.5" y="645" width="0.2" height="15.0" fill="rgb(233,59,5)" rx="2" ry="2" />
<text  x="681.49" y="655.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="808.6" y="661" width="0.2" height="15.0" fill="rgb(239,2,37)" rx="2" ry="2" />
<text  x="811.63" y="671.5" ></text>
</g>
<g >
<title>Parser::response_request (836 samples, 11.45%)</title><rect x="662.5" y="709" width="135.1" height="15.0" fill="rgb(250,76,36)" rx="2" ry="2" />
<text  x="665.48" y="719.5" >Parser::response_..</text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="772.4" y="613" width="0.2" height="15.0" fill="rgb(208,19,45)" rx="2" ry="2" />
<text  x="775.42" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (650 samples, 8.91%)</title><rect x="384.4" y="789" width="105.1" height="15.0" fill="rgb(241,206,49)" rx="2" ry="2" />
<text  x="387.42" y="799.5" >std::_Functi..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="286.6" y="965" width="0.2" height="15.0" fill="rgb(242,93,27)" rx="2" ry="2" />
<text  x="289.61" y="975.5" ></text>
</g>
<g >
<title>__inet_lookup_established (7 samples, 0.10%)</title><rect x="558.7" y="437" width="1.1" height="15.0" fill="rgb(208,211,54)" rx="2" ry="2" />
<text  x="561.69" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (5 samples, 0.07%)</title><rect x="781.3" y="613" width="0.8" height="15.0" fill="rgb(231,61,12)" rx="2" ry="2" />
<text  x="784.31" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="112.7" y="661" width="0.1" height="15.0" fill="rgb(228,129,49)" rx="2" ry="2" />
<text  x="115.66" y="671.5" ></text>
</g>
<g >
<title>__inet_lookup_established (2 samples, 0.03%)</title><rect x="410.3" y="133" width="0.3" height="15.0" fill="rgb(221,164,13)" rx="2" ry="2" />
<text  x="413.28" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (7 samples, 0.10%)</title><rect x="1149.6" y="693" width="1.1" height="15.0" fill="rgb(223,173,9)" rx="2" ry="2" />
<text  x="1152.58" y="703.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::isInLoopThread (4 samples, 0.05%)</title><rect x="681.9" y="677" width="0.6" height="15.0" fill="rgb(211,96,10)" rx="2" ry="2" />
<text  x="684.88" y="687.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt; (1 samples, 0.01%)</title><rect x="842.3" y="757" width="0.1" height="15.0" fill="rgb(253,138,24)" rx="2" ry="2" />
<text  x="845.26" y="767.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (1 samples, 0.01%)</title><rect x="156.1" y="469" width="0.2" height="15.0" fill="rgb(252,128,20)" rx="2" ry="2" />
<text  x="159.15" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.04%)</title><rect x="817.7" y="661" width="0.5" height="15.0" fill="rgb(214,139,30)" rx="2" ry="2" />
<text  x="820.68" y="671.5" ></text>
</g>
<g >
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="78.4" y="485" width="0.3" height="15.0" fill="rgb(211,64,4)" rx="2" ry="2" />
<text  x="81.38" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::~LogStream (1 samples, 0.01%)</title><rect x="254.1" y="773" width="0.2" height="15.0" fill="rgb(250,83,18)" rx="2" ry="2" />
<text  x="257.12" y="783.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="406.4" y="277" width="0.2" height="15.0" fill="rgb(216,133,9)" rx="2" ry="2" />
<text  x="409.40" y="287.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="657.5" y="693" width="0.1" height="15.0" fill="rgb(245,112,35)" rx="2" ry="2" />
<text  x="660.47" y="703.5" ></text>
</g>
<g >
<title>muduo::Fmt::length (1 samples, 0.01%)</title><rect x="120.1" y="773" width="0.2" height="15.0" fill="rgb(224,75,2)" rx="2" ry="2" />
<text  x="123.09" y="783.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,151 samples, 15.77%)</title><rect x="998.3" y="773" width="186.0" height="15.0" fill="rgb(237,154,41)" rx="2" ry="2" />
<text  x="1001.26" y="783.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.01%)</title><rect x="63.7" y="741" width="0.1" height="15.0" fill="rgb(246,174,7)" rx="2" ry="2" />
<text  x="66.67" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="601.4" y="949" width="0.1" height="15.0" fill="rgb(234,98,22)" rx="2" ry="2" />
<text  x="604.37" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="997.3" y="821" width="0.2" height="15.0" fill="rgb(219,77,48)" rx="2" ry="2" />
<text  x="1000.29" y="831.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (467 samples, 6.40%)</title><rect x="159.9" y="325" width="75.5" height="15.0" fill="rgb(231,99,42)" rx="2" ry="2" />
<text  x="162.86" y="335.5" >do_softi..</text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="40.7" y="693" width="0.2" height="15.0" fill="rgb(252,89,40)" rx="2" ry="2" />
<text  x="43.72" y="703.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.03%)</title><rect x="395.4" y="597" width="0.3" height="15.0" fill="rgb(232,9,11)" rx="2" ry="2" />
<text  x="398.41" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::tuple (4 samples, 0.05%)</title><rect x="100.5" y="501" width="0.7" height="15.0" fill="rgb(231,225,51)" rx="2" ry="2" />
<text  x="103.53" y="511.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="104.6" y="485" width="0.1" height="15.0" fill="rgb(247,92,8)" rx="2" ry="2" />
<text  x="107.57" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="872.2" y="693" width="0.1" height="15.0" fill="rgb(220,124,14)" rx="2" ry="2" />
<text  x="875.16" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (2 samples, 0.03%)</title><rect x="361.9" y="773" width="0.4" height="15.0" fill="rgb(207,74,39)" rx="2" ry="2" />
<text  x="364.95" y="783.5" ></text>
</g>
<g >
<title>[[vdso]] (1 samples, 0.01%)</title><rect x="64.6" y="725" width="0.2" height="15.0" fill="rgb(211,2,41)" rx="2" ry="2" />
<text  x="67.64" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5 samples, 0.07%)</title><rect x="1161.2" y="677" width="0.8" height="15.0" fill="rgb(228,93,16)" rx="2" ry="2" />
<text  x="1164.22" y="687.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.01%)</title><rect x="490.8" y="597" width="0.2" height="15.0" fill="rgb(223,44,47)" rx="2" ry="2" />
<text  x="493.79" y="607.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.14%)</title><rect x="29.9" y="965" width="1.6" height="15.0" fill="rgb(239,194,22)" rx="2" ry="2" />
<text  x="32.88" y="975.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.01%)</title><rect x="82.6" y="117" width="0.1" height="15.0" fill="rgb(252,191,25)" rx="2" ry="2" />
<text  x="85.59" y="127.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="778.9" y="677" width="0.3" height="15.0" fill="rgb(232,57,6)" rx="2" ry="2" />
<text  x="781.88" y="687.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="351.1" y="517" width="0.2" height="15.0" fill="rgb(234,24,19)" rx="2" ry="2" />
<text  x="354.12" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,154 samples, 15.81%)</title><rect x="998.1" y="789" width="186.6" height="15.0" fill="rgb(229,223,1)" rx="2" ry="2" />
<text  x="1001.10" y="799.5" >std::_Bind&lt;void </text>
</g>
<g >
<title>filename_lookup (47 samples, 0.64%)</title><rect x="823.3" y="613" width="7.6" height="15.0" fill="rgb(215,129,46)" rx="2" ry="2" />
<text  x="826.34" y="623.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (3 samples, 0.04%)</title><rect x="242.8" y="533" width="0.5" height="15.0" fill="rgb(221,55,37)" rx="2" ry="2" />
<text  x="245.80" y="543.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1145.1" y="629" width="0.1" height="15.0" fill="rgb(248,122,0)" rx="2" ry="2" />
<text  x="1148.06" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1183.2" y="693" width="0.2" height="15.0" fill="rgb(214,203,7)" rx="2" ry="2" />
<text  x="1186.21" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="651.2" y="965" width="0.1" height="15.0" fill="rgb(212,158,44)" rx="2" ry="2" />
<text  x="654.17" y="975.5" ></text>
</g>
<g >
<title>muduo::LogStream::~LogStream (1 samples, 0.01%)</title><rect x="1148.5" y="677" width="0.1" height="15.0" fill="rgb(208,195,36)" rx="2" ry="2" />
<text  x="1151.45" y="687.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (8 samples, 0.11%)</title><rect x="1144.4" y="693" width="1.3" height="15.0" fill="rgb(219,4,44)" rx="2" ry="2" />
<text  x="1147.41" y="703.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.01%)</title><rect x="78.1" y="517" width="0.1" height="15.0" fill="rgb(222,182,39)" rx="2" ry="2" />
<text  x="81.06" y="527.5" ></text>
</g>
<g >
<title>__lru_cache_add (4 samples, 0.05%)</title><rect x="11.5" y="741" width="0.6" height="15.0" fill="rgb(237,63,53)" rx="2" ry="2" />
<text  x="14.45" y="751.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1 samples, 0.01%)</title><rect x="380.4" y="757" width="0.1" height="15.0" fill="rgb(231,72,36)" rx="2" ry="2" />
<text  x="383.38" y="767.5" ></text>
</g>
<g >
<title>muduo::noncopyable::noncopyable (1 samples, 0.01%)</title><rect x="1013.3" y="661" width="0.2" height="15.0" fill="rgb(232,175,44)" rx="2" ry="2" />
<text  x="1016.30" y="671.5" ></text>
</g>
<g >
<title>ip_queue_xmit (163 samples, 2.23%)</title><rect x="554.3" y="725" width="26.4" height="15.0" fill="rgb(250,53,11)" rx="2" ry="2" />
<text  x="557.33" y="735.5" >i..</text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (1 samples, 0.01%)</title><rect x="137.7" y="645" width="0.2" height="15.0" fill="rgb(251,138,43)" rx="2" ry="2" />
<text  x="140.72" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (2 samples, 0.03%)</title><rect x="88.9" y="661" width="0.3" height="15.0" fill="rgb(249,106,25)" rx="2" ry="2" />
<text  x="91.89" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (5 samples, 0.07%)</title><rect x="995.0" y="613" width="0.8" height="15.0" fill="rgb(228,224,7)" rx="2" ry="2" />
<text  x="998.03" y="623.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="948.8" y="869" width="0.2" height="15.0" fill="rgb(206,153,32)" rx="2" ry="2" />
<text  x="951.79" y="879.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (4 samples, 0.05%)</title><rect x="1144.7" y="677" width="0.7" height="15.0" fill="rgb(254,88,41)" rx="2" ry="2" />
<text  x="1147.73" y="687.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="82.6" y="277" width="0.1" height="15.0" fill="rgb(235,21,5)" rx="2" ry="2" />
<text  x="85.59" y="287.5" ></text>
</g>
<g >
<title>tcp_data_queue (404 samples, 5.54%)</title><rect x="168.8" y="101" width="65.3" height="15.0" fill="rgb(219,73,20)" rx="2" ry="2" />
<text  x="171.76" y="111.5" >tcp_dat..</text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="347.1" y="533" width="0.1" height="15.0" fill="rgb(238,138,23)" rx="2" ry="2" />
<text  x="350.07" y="543.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::lock (2 samples, 0.03%)</title><rect x="818.2" y="709" width="0.3" height="15.0" fill="rgb(242,133,47)" rx="2" ry="2" />
<text  x="821.17" y="719.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="337.4" y="261" width="0.1" height="15.0" fill="rgb(217,141,34)" rx="2" ry="2" />
<text  x="340.37" y="271.5" ></text>
</g>
<g >
<title>eventfd_poll (4 samples, 0.05%)</title><rect x="42.0" y="693" width="0.7" height="15.0" fill="rgb(221,5,52)" rx="2" ry="2" />
<text  x="45.01" y="703.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks@plt (1 samples, 0.01%)</title><rect x="256.1" y="789" width="0.1" height="15.0" fill="rgb(251,178,16)" rx="2" ry="2" />
<text  x="259.06" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="381.0" y="805" width="0.2" height="15.0" fill="rgb(213,59,18)" rx="2" ry="2" />
<text  x="384.02" y="815.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (508 samples, 6.96%)</title><rect x="401.9" y="469" width="82.1" height="15.0" fill="rgb(237,139,35)" rx="2" ry="2" />
<text  x="404.88" y="479.5" >__tcp_pus..</text>
</g>
<g >
<title>__softirqentry_text_start (455 samples, 6.23%)</title><rect x="406.2" y="293" width="73.6" height="15.0" fill="rgb(227,11,10)" rx="2" ry="2" />
<text  x="409.24" y="303.5" >__softir..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3 samples, 0.04%)</title><rect x="679.9" y="613" width="0.5" height="15.0" fill="rgb(250,79,41)" rx="2" ry="2" />
<text  x="682.94" y="623.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setTcpNoDelay (1 samples, 0.01%)</title><rect x="385.7" y="581" width="0.2" height="15.0" fill="rgb(248,62,32)" rx="2" ry="2" />
<text  x="388.71" y="591.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEventWithGuard (294 samples, 4.03%)</title><rect x="312.3" y="805" width="47.5" height="15.0" fill="rgb(211,7,21)" rx="2" ry="2" />
<text  x="315.32" y="815.5" >mudu..</text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="1004.7" y="677" width="0.2" height="15.0" fill="rgb(224,171,35)" rx="2" ry="2" />
<text  x="1007.73" y="687.5" ></text>
</g>
<g >
<title>muduo::noncopyable::noncopyable (1 samples, 0.01%)</title><rect x="368.6" y="773" width="0.1" height="15.0" fill="rgb(246,151,47)" rx="2" ry="2" />
<text  x="371.58" y="783.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="342.7" y="453" width="0.2" height="15.0" fill="rgb(213,103,22)" rx="2" ry="2" />
<text  x="345.71" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="354.2" y="485" width="0.1" height="15.0" fill="rgb(235,174,15)" rx="2" ry="2" />
<text  x="357.19" y="495.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="796.5" y="597" width="0.2" height="15.0" fill="rgb(213,71,10)" rx="2" ry="2" />
<text  x="799.51" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="1185.0" y="853" width="0.2" height="15.0" fill="rgb(242,159,37)" rx="2" ry="2" />
<text  x="1187.99" y="863.5" ></text>
</g>
<g >
<title>std::swap&lt;char&gt; (2 samples, 0.03%)</title><rect x="362.8" y="709" width="0.3" height="15.0" fill="rgb(248,97,4)" rx="2" ry="2" />
<text  x="365.76" y="719.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1140.7" y="661" width="0.2" height="15.0" fill="rgb(245,111,25)" rx="2" ry="2" />
<text  x="1143.69" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="88.2" y="453" width="0.4" height="15.0" fill="rgb(214,189,0)" rx="2" ry="2" />
<text  x="91.25" y="463.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;StaticServer::Entry&gt;::weak_ptr (1 samples, 0.01%)</title><rect x="355.6" y="565" width="0.2" height="15.0" fill="rgb(233,110,27)" rx="2" ry="2" />
<text  x="358.64" y="575.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (1 samples, 0.01%)</title><rect x="286.9" y="837" width="0.2" height="15.0" fill="rgb(245,115,3)" rx="2" ry="2" />
<text  x="289.93" y="847.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (187 samples, 2.56%)</title><rect x="845.0" y="981" width="30.2" height="15.0" fill="rgb(242,206,24)" rx="2" ry="2" />
<text  x="848.00" y="991.5" >en..</text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (8 samples, 0.11%)</title><rect x="313.8" y="757" width="1.3" height="15.0" fill="rgb(212,125,53)" rx="2" ry="2" />
<text  x="316.77" y="767.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.01%)</title><rect x="1006.2" y="677" width="0.1" height="15.0" fill="rgb(213,192,27)" rx="2" ry="2" />
<text  x="1009.19" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="544.1" y="981" width="0.7" height="15.0" fill="rgb(252,89,19)" rx="2" ry="2" />
<text  x="547.14" y="991.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.12%)</title><rect x="1021.9" y="629" width="1.4" height="15.0" fill="rgb(226,120,18)" rx="2" ry="2" />
<text  x="1024.87" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="654.1" y="789" width="0.1" height="15.0" fill="rgb(211,33,1)" rx="2" ry="2" />
<text  x="657.08" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::operator (2 samples, 0.03%)</title><rect x="110.7" y="677" width="0.3" height="15.0" fill="rgb(239,187,3)" rx="2" ry="2" />
<text  x="113.72" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1162.5" y="677" width="0.2" height="15.0" fill="rgb(251,124,24)" rx="2" ry="2" />
<text  x="1165.52" y="687.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (2 samples, 0.03%)</title><rect x="88.2" y="389" width="0.4" height="15.0" fill="rgb(217,154,2)" rx="2" ry="2" />
<text  x="91.25" y="399.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="253.8" y="741" width="0.2" height="15.0" fill="rgb(233,55,43)" rx="2" ry="2" />
<text  x="256.79" y="751.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*, muduo::Timestamp&gt; (3 samples, 0.04%)</title><rect x="357.3" y="629" width="0.4" height="15.0" fill="rgb(241,55,15)" rx="2" ry="2" />
<text  x="360.26" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="676.1" y="597" width="0.1" height="15.0" fill="rgb(254,152,23)" rx="2" ry="2" />
<text  x="679.06" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="244.3" y="709" width="0.1" height="15.0" fill="rgb(219,111,37)" rx="2" ry="2" />
<text  x="247.25" y="719.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (9 samples, 0.12%)</title><rect x="131.2" y="741" width="1.5" height="15.0" fill="rgb(250,47,49)" rx="2" ry="2" />
<text  x="134.25" y="751.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="1161.5" y="597" width="0.2" height="15.0" fill="rgb(214,108,25)" rx="2" ry="2" />
<text  x="1164.55" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;muduo::net::TcpConnection*,  (1 samples, 0.01%)</title><rect x="247.3" y="533" width="0.2" height="15.0" fill="rgb(253,11,29)" rx="2" ry="2" />
<text  x="250.33" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (13 samples, 0.18%)</title><rect x="1021.5" y="677" width="2.1" height="15.0" fill="rgb(231,150,43)" rx="2" ry="2" />
<text  x="1024.54" y="687.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="114.0" y="789" width="0.1" height="15.0" fill="rgb(219,11,22)" rx="2" ry="2" />
<text  x="116.95" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="500.7" y="741" width="0.3" height="15.0" fill="rgb(243,198,2)" rx="2" ry="2" />
<text  x="503.66" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (94 samples, 1.29%)</title><rect x="820.8" y="693" width="15.2" height="15.0" fill="rgb(253,44,44)" rx="2" ry="2" />
<text  x="823.75" y="703.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::send (1 samples, 0.01%)</title><rect x="806.5" y="709" width="0.2" height="15.0" fill="rgb(254,114,11)" rx="2" ry="2" />
<text  x="809.53" y="719.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="1015.1" y="565" width="0.1" height="15.0" fill="rgb(238,225,29)" rx="2" ry="2" />
<text  x="1018.08" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::unique_ptr&lt;char*, std::default_delete&lt;char []&gt;, void, bool&gt; (4 samples, 0.05%)</title><rect x="783.4" y="693" width="0.7" height="15.0" fill="rgb(219,153,33)" rx="2" ry="2" />
<text  x="786.41" y="703.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (1 samples, 0.01%)</title><rect x="1187.4" y="661" width="0.2" height="15.0" fill="rgb(251,155,35)" rx="2" ry="2" />
<text  x="1190.41" y="671.5" ></text>
</g>
<g >
<title>putname (1 samples, 0.01%)</title><rect x="1175.9" y="613" width="0.2" height="15.0" fill="rgb(211,148,28)" rx="2" ry="2" />
<text  x="1178.94" y="623.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.07%)</title><rect x="260.9" y="965" width="0.8" height="15.0" fill="rgb(221,101,27)" rx="2" ry="2" />
<text  x="263.91" y="975.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="368.7" y="757" width="0.2" height="15.0" fill="rgb(239,22,42)" rx="2" ry="2" />
<text  x="371.74" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="1007.6" y="677" width="0.2" height="15.0" fill="rgb(250,4,32)" rx="2" ry="2" />
<text  x="1010.64" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="1016.4" y="677" width="0.1" height="15.0" fill="rgb(231,98,39)" rx="2" ry="2" />
<text  x="1019.37" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="1152.0" y="613" width="0.2" height="15.0" fill="rgb(253,179,35)" rx="2" ry="2" />
<text  x="1155.01" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="673.5" y="613" width="0.1" height="15.0" fill="rgb(251,133,52)" rx="2" ry="2" />
<text  x="676.48" y="623.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="487.1" y="661" width="0.1" height="15.0" fill="rgb(215,103,35)" rx="2" ry="2" />
<text  x="490.08" y="671.5" ></text>
</g>
<g >
<title>ipv4_mtu (1 samples, 0.01%)</title><rect x="580.0" y="677" width="0.2" height="15.0" fill="rgb(251,4,22)" rx="2" ry="2" />
<text  x="583.03" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="137.7" y="597" width="0.2" height="15.0" fill="rgb(224,11,40)" rx="2" ry="2" />
<text  x="140.72" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1121.0" y="565" width="0.1" height="15.0" fill="rgb(232,24,37)" rx="2" ry="2" />
<text  x="1123.97" y="575.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="368.9" y="773" width="0.2" height="15.0" fill="rgb(244,184,32)" rx="2" ry="2" />
<text  x="371.90" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (3 samples, 0.04%)</title><rect x="658.4" y="677" width="0.5" height="15.0" fill="rgb(216,38,40)" rx="2" ry="2" />
<text  x="661.44" y="687.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="763.2" y="485" width="0.2" height="15.0" fill="rgb(230,148,1)" rx="2" ry="2" />
<text  x="766.20" y="495.5" ></text>
</g>
<g >
<title>muduo::detail::convert&lt;int&gt; (4 samples, 0.05%)</title><rect x="128.7" y="741" width="0.6" height="15.0" fill="rgb(207,96,17)" rx="2" ry="2" />
<text  x="131.66" y="751.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::readableBytes (1 samples, 0.01%)</title><rect x="486.8" y="677" width="0.1" height="15.0" fill="rgb(248,68,17)" rx="2" ry="2" />
<text  x="489.75" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="792.8" y="613" width="0.3" height="15.0" fill="rgb(223,192,8)" rx="2" ry="2" />
<text  x="795.79" y="623.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (1 samples, 0.01%)</title><rect x="495.2" y="709" width="0.1" height="15.0" fill="rgb(233,37,30)" rx="2" ry="2" />
<text  x="498.16" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;muduo::net::EventLoop*&amp;&gt; (1 samples, 0.01%)</title><rect x="349.5" y="565" width="0.2" height="15.0" fill="rgb(232,141,2)" rx="2" ry="2" />
<text  x="352.50" y="575.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (685 samples, 9.38%)</title><rect x="382.5" y="821" width="110.7" height="15.0" fill="rgb(222,180,1)" rx="2" ry="2" />
<text  x="385.48" y="831.5" >muduo::net::E..</text>
</g>
<g >
<title>mod_timer (1 samples, 0.01%)</title><rect x="927.5" y="677" width="0.1" height="15.0" fill="rgb(244,164,7)" rx="2" ry="2" />
<text  x="930.45" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="114.8" y="805" width="0.1" height="15.0" fill="rgb(253,209,36)" rx="2" ry="2" />
<text  x="117.76" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (11 samples, 0.15%)</title><rect x="771.9" y="661" width="1.8" height="15.0" fill="rgb(215,84,43)" rx="2" ry="2" />
<text  x="774.93" y="671.5" ></text>
</g>
<g >
<title>sys_futex (10 samples, 0.14%)</title><rect x="654.6" y="757" width="1.6" height="15.0" fill="rgb(240,162,1)" rx="2" ry="2" />
<text  x="657.56" y="767.5" ></text>
</g>
<g >
<title>vfs_readv (56 samples, 0.77%)</title><rect x="77.4" y="581" width="9.1" height="15.0" fill="rgb(223,188,48)" rx="2" ry="2" />
<text  x="80.41" y="591.5" ></text>
</g>
<g >
<title>Parser::response_request (873 samples, 11.96%)</title><rect x="1001.8" y="709" width="141.2" height="15.0" fill="rgb(252,11,27)" rx="2" ry="2" />
<text  x="1004.82" y="719.5" >Parser::response_..</text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="94.1" y="485" width="0.1" height="15.0" fill="rgb(243,166,50)" rx="2" ry="2" />
<text  x="97.07" y="495.5" ></text>
</g>
<g >
<title>ep_scan_ready_list (22 samples, 0.30%)</title><rect x="41.0" y="741" width="3.6" height="15.0" fill="rgb(223,213,16)" rx="2" ry="2" />
<text  x="44.04" y="751.5" ></text>
</g>
<g >
<title>ip_queue_xmit (175 samples, 2.40%)</title><rect x="898.4" y="725" width="28.2" height="15.0" fill="rgb(245,194,10)" rx="2" ry="2" />
<text  x="901.35" y="735.5" >i..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="111.8" y="709" width="0.2" height="15.0" fill="rgb(240,56,21)" rx="2" ry="2" />
<text  x="114.85" y="719.5" ></text>
</g>
<g >
<title>sys_futex (11 samples, 0.15%)</title><rect x="1025.4" y="581" width="1.8" height="15.0" fill="rgb(218,73,38)" rx="2" ry="2" />
<text  x="1028.42" y="591.5" ></text>
</g>
<g >
<title>boost::typeindex::operator==&lt;boost::typeindex::stl_type_index, std::type_info&gt; (1 samples, 0.01%)</title><rect x="91.8" y="517" width="0.2" height="15.0" fill="rgb(213,184,9)" rx="2" ry="2" />
<text  x="94.80" y="527.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="167.8" y="53" width="0.3" height="15.0" fill="rgb(223,144,6)" rx="2" ry="2" />
<text  x="170.79" y="63.5" ></text>
</g>
<g >
<title>tcp_write_xmit (507 samples, 6.95%)</title><rect x="402.0" y="453" width="82.0" height="15.0" fill="rgb(213,23,8)" rx="2" ry="2" />
<text  x="405.04" y="463.5" >tcp_write..</text>
</g>
<g >
<title>muduo::Logger::~Logger (1 samples, 0.01%)</title><rect x="87.9" y="661" width="0.2" height="15.0" fill="rgb(254,220,23)" rx="2" ry="2" />
<text  x="90.92" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3 samples, 0.04%)</title><rect x="620.0" y="981" width="0.5" height="15.0" fill="rgb(214,25,9)" rx="2" ry="2" />
<text  x="622.97" y="991.5" ></text>
</g>
<g >
<title>sys_read (1 samples, 0.01%)</title><rect x="324.3" y="645" width="0.1" height="15.0" fill="rgb(212,81,7)" rx="2" ry="2" />
<text  x="327.28" y="655.5" ></text>
</g>
<g >
<title>std::function&lt;void  (11 samples, 0.15%)</title><rect x="489.8" y="725" width="1.8" height="15.0" fill="rgb(238,66,9)" rx="2" ry="2" />
<text  x="492.82" y="735.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="66.7" y="773" width="0.2" height="15.0" fill="rgb(227,221,2)" rx="2" ry="2" />
<text  x="69.74" y="783.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="802.0" y="645" width="0.2" height="15.0" fill="rgb(217,117,33)" rx="2" ry="2" />
<text  x="805.00" y="655.5" ></text>
</g>
<g >
<title>dput (2 samples, 0.03%)</title><rect x="824.6" y="581" width="0.4" height="15.0" fill="rgb(217,20,11)" rx="2" ry="2" />
<text  x="827.63" y="591.5" ></text>
</g>
<g >
<title>netif_rx (2 samples, 0.03%)</title><rect x="236.5" y="277" width="0.3" height="15.0" fill="rgb(246,104,13)" rx="2" ry="2" />
<text  x="239.49" y="287.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1181.4" y="677" width="0.2" height="15.0" fill="rgb(218,189,9)" rx="2" ry="2" />
<text  x="1184.43" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (4 samples, 0.05%)</title><rect x="314.4" y="725" width="0.7" height="15.0" fill="rgb(245,151,46)" rx="2" ry="2" />
<text  x="317.42" y="735.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.01%)</title><rect x="234.7" y="245" width="0.2" height="15.0" fill="rgb(215,198,45)" rx="2" ry="2" />
<text  x="237.72" y="255.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.01%)</title><rect x="874.1" y="917" width="0.2" height="15.0" fill="rgb(222,89,9)" rx="2" ry="2" />
<text  x="877.10" y="927.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="809.0" y="693" width="0.1" height="15.0" fill="rgb(212,170,46)" rx="2" ry="2" />
<text  x="811.95" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (466 samples, 6.38%)</title><rect x="159.9" y="293" width="75.3" height="15.0" fill="rgb(215,206,40)" rx="2" ry="2" />
<text  x="162.86" y="303.5" >__softir..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.01%)</title><rect x="1132.9" y="677" width="0.2" height="15.0" fill="rgb(237,100,0)" rx="2" ry="2" />
<text  x="1135.93" y="687.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.01%)</title><rect x="898.5" y="709" width="0.2" height="15.0" fill="rgb(235,187,13)" rx="2" ry="2" />
<text  x="901.52" y="719.5" ></text>
</g>
<g >
<title>tcp_current_mss (7 samples, 0.10%)</title><rect x="241.5" y="469" width="1.1" height="15.0" fill="rgb(234,46,39)" rx="2" ry="2" />
<text  x="244.51" y="479.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6 samples, 0.08%)</title><rect x="994.9" y="757" width="0.9" height="15.0" fill="rgb(233,204,2)" rx="2" ry="2" />
<text  x="997.87" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="842.9" y="965" width="0.3" height="15.0" fill="rgb(253,123,16)" rx="2" ry="2" />
<text  x="845.90" y="975.5" ></text>
</g>
<g >
<title>muduo::net::Channel::disableAll (1 samples, 0.01%)</title><rect x="88.1" y="501" width="0.1" height="15.0" fill="rgb(214,71,32)" rx="2" ry="2" />
<text  x="91.08" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="28.9" y="949" width="0.2" height="15.0" fill="rgb(228,78,20)" rx="2" ry="2" />
<text  x="31.91" y="959.5" ></text>
</g>
<g >
<title>sock_write_iter (243 samples, 3.33%)</title><rect x="889.9" y="869" width="39.3" height="15.0" fill="rgb(241,95,25)" rx="2" ry="2" />
<text  x="892.95" y="879.5" >soc..</text>
</g>
<g >
<title>tcp_write_xmit (183 samples, 2.51%)</title><rect x="553.4" y="757" width="29.5" height="15.0" fill="rgb(245,158,15)" rx="2" ry="2" />
<text  x="556.36" y="767.5" >tc..</text>
</g>
<g >
<title>tcp_event_new_data_sent (4 samples, 0.05%)</title><rect x="483.0" y="437" width="0.7" height="15.0" fill="rgb(211,164,42)" rx="2" ry="2" />
<text  x="486.03" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="349.2" y="469" width="0.1" height="15.0" fill="rgb(247,73,0)" rx="2" ry="2" />
<text  x="352.18" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;2ul, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1 samples, 0.01%)</title><rect x="339.3" y="613" width="0.2" height="15.0" fill="rgb(254,190,41)" rx="2" ry="2" />
<text  x="342.31" y="623.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.01%)</title><rect x="337.4" y="85" width="0.1" height="15.0" fill="rgb(231,208,6)" rx="2" ry="2" />
<text  x="340.37" y="95.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (84 samples, 1.15%)</title><rect x="44.8" y="725" width="13.5" height="15.0" fill="rgb(227,8,34)" rx="2" ry="2" />
<text  x="47.76" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="137.9" y="693" width="0.3" height="15.0" fill="rgb(221,166,20)" rx="2" ry="2" />
<text  x="140.88" y="703.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="315.1" y="693" width="0.1" height="15.0" fill="rgb(232,120,22)" rx="2" ry="2" />
<text  x="318.06" y="703.5" ></text>
</g>
<g >
<title>__fdget (1 samples, 0.01%)</title><rect x="1186.6" y="869" width="0.2" height="15.0" fill="rgb(226,142,36)" rx="2" ry="2" />
<text  x="1189.61" y="879.5" ></text>
</g>
<g >
<title>redisBufferWrite (1 samples, 0.01%)</title><rect x="618.8" y="981" width="0.2" height="15.0" fill="rgb(251,199,8)" rx="2" ry="2" />
<text  x="621.83" y="991.5" ></text>
</g>
<g >
<title>mod_timer (2 samples, 0.03%)</title><rect x="906.8" y="373" width="0.3" height="15.0" fill="rgb(252,165,1)" rx="2" ry="2" />
<text  x="909.76" y="383.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="127.2" y="757" width="0.2" height="15.0" fill="rgb(253,206,36)" rx="2" ry="2" />
<text  x="130.21" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="682.9" y="597" width="0.1" height="15.0" fill="rgb(249,56,33)" rx="2" ry="2" />
<text  x="685.85" y="607.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (2 samples, 0.03%)</title><rect x="340.6" y="517" width="0.3" height="15.0" fill="rgb(231,168,36)" rx="2" ry="2" />
<text  x="343.61" y="527.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (9 samples, 0.12%)</title><rect x="924.4" y="613" width="1.4" height="15.0" fill="rgb(222,76,27)" rx="2" ry="2" />
<text  x="927.38" y="623.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.01%)</title><rect x="333.5" y="501" width="0.2" height="15.0" fill="rgb(237,167,24)" rx="2" ry="2" />
<text  x="336.49" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3 samples, 0.04%)</title><rect x="658.4" y="645" width="0.5" height="15.0" fill="rgb(228,203,37)" rx="2" ry="2" />
<text  x="661.44" y="655.5" ></text>
</g>
<g >
<title>std::tuple&lt;StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::~tuple (3 samples, 0.04%)</title><rect x="997.6" y="757" width="0.5" height="15.0" fill="rgb(238,182,51)" rx="2" ry="2" />
<text  x="1000.62" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="809.0" y="677" width="0.1" height="15.0" fill="rgb(232,64,51)" rx="2" ry="2" />
<text  x="811.95" y="687.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="807.0" y="581" width="0.2" height="15.0" fill="rgb(243,3,23)" rx="2" ry="2" />
<text  x="810.01" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (1 samples, 0.01%)</title><rect x="345.6" y="565" width="0.2" height="15.0" fill="rgb(227,198,37)" rx="2" ry="2" />
<text  x="348.62" y="575.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.01%)</title><rect x="1135.4" y="645" width="0.1" height="15.0" fill="rgb(243,202,50)" rx="2" ry="2" />
<text  x="1138.36" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="795.5" y="645" width="0.2" height="15.0" fill="rgb(218,195,6)" rx="2" ry="2" />
<text  x="798.54" y="655.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.01%)</title><rect x="396.9" y="485" width="0.1" height="15.0" fill="rgb(236,63,14)" rx="2" ry="2" />
<text  x="399.87" y="495.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="669.6" y="693" width="0.5" height="15.0" fill="rgb(244,226,12)" rx="2" ry="2" />
<text  x="672.60" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (3 samples, 0.04%)</title><rect x="255.1" y="789" width="0.5" height="15.0" fill="rgb(218,201,34)" rx="2" ry="2" />
<text  x="258.09" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="650.7" y="949" width="0.1" height="15.0" fill="rgb(217,143,7)" rx="2" ry="2" />
<text  x="653.68" y="959.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="495.0" y="709" width="0.2" height="15.0" fill="rgb(247,91,1)" rx="2" ry="2" />
<text  x="498.00" y="719.5" ></text>
</g>
<g >
<title>inet_release (1 samples, 0.01%)</title><rect x="997.8" y="405" width="0.1" height="15.0" fill="rgb(212,162,49)" rx="2" ry="2" />
<text  x="1000.78" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="354.3" y="485" width="0.2" height="15.0" fill="rgb(249,61,45)" rx="2" ry="2" />
<text  x="357.35" y="495.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="379.4" y="709" width="0.3" height="15.0" fill="rgb(253,216,10)" rx="2" ry="2" />
<text  x="382.41" y="719.5" ></text>
</g>
<g >
<title>sys_epoll_wait (121 samples, 1.66%)</title><rect x="39.4" y="773" width="19.6" height="15.0" fill="rgb(250,68,44)" rx="2" ry="2" />
<text  x="42.42" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="1188.2" y="725" width="0.2" height="15.0" fill="rgb(254,218,42)" rx="2" ry="2" />
<text  x="1191.22" y="735.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setWriteCompleteCallback (11 samples, 0.15%)</title><rect x="771.9" y="693" width="1.8" height="15.0" fill="rgb(227,33,53)" rx="2" ry="2" />
<text  x="774.93" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="368.7" y="741" width="0.2" height="15.0" fill="rgb(239,49,12)" rx="2" ry="2" />
<text  x="371.74" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Tuple_impl (8 samples, 0.11%)</title><rect x="490.1" y="629" width="1.3" height="15.0" fill="rgb(242,57,37)" rx="2" ry="2" />
<text  x="493.15" y="639.5" ></text>
</g>
<g >
<title>muduo::net::EventLoopThread::threadFunc (1,354 samples, 18.55%)</title><rect x="286.8" y="853" width="218.9" height="15.0" fill="rgb(236,146,27)" rx="2" ry="2" />
<text  x="289.77" y="863.5" >muduo::net::EventLoopThread:..</text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="661.0" y="613" width="0.2" height="15.0" fill="rgb(247,34,0)" rx="2" ry="2" />
<text  x="664.03" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="841.8" y="709" width="0.1" height="15.0" fill="rgb(223,157,38)" rx="2" ry="2" />
<text  x="844.77" y="719.5" ></text>
</g>
<g >
<title>skb_release_all (5 samples, 0.07%)</title><rect x="79.8" y="453" width="0.8" height="15.0" fill="rgb(230,148,46)" rx="2" ry="2" />
<text  x="82.84" y="463.5" ></text>
</g>
<g >
<title>__fget_light (3 samples, 0.04%)</title><rect x="76.8" y="581" width="0.5" height="15.0" fill="rgb(224,131,3)" rx="2" ry="2" />
<text  x="79.77" y="591.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;::insert (1 samples, 0.01%)</title><rect x="356.1" y="581" width="0.2" height="15.0" fill="rgb(238,199,49)" rx="2" ry="2" />
<text  x="359.13" y="591.5" ></text>
</g>
<g >
<title>ip_local_out (481 samples, 6.59%)</title><rect x="404.3" y="405" width="77.8" height="15.0" fill="rgb(243,56,27)" rx="2" ry="2" />
<text  x="407.30" y="415.5" >ip_local..</text>
</g>
<g >
<title>do_syscall_64 (493 samples, 6.75%)</title><rect x="686.1" y="597" width="79.7" height="15.0" fill="rgb(234,81,23)" rx="2" ry="2" />
<text  x="689.09" y="607.5" >do_syscal..</text>
</g>
<g >
<title>std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="353.1" y="453" width="0.1" height="15.0" fill="rgb(243,159,10)" rx="2" ry="2" />
<text  x="356.06" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="818.3" y="629" width="0.2" height="15.0" fill="rgb(226,33,49)" rx="2" ry="2" />
<text  x="821.33" y="639.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="270.9" y="965" width="0.4" height="15.0" fill="rgb(229,173,19)" rx="2" ry="2" />
<text  x="273.93" y="975.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.01%)</title><rect x="92.4" y="453" width="0.2" height="15.0" fill="rgb(213,118,39)" rx="2" ry="2" />
<text  x="95.45" y="463.5" ></text>
</g>
<g >
<title>_copy_to_iter (1 samples, 0.01%)</title><rect x="80.6" y="469" width="0.2" height="15.0" fill="rgb(218,33,4)" rx="2" ry="2" />
<text  x="83.65" y="479.5" ></text>
</g>
<g >
<title>security_file_permission (4 samples, 0.05%)</title><rect x="73.4" y="581" width="0.6" height="15.0" fill="rgb(216,185,33)" rx="2" ry="2" />
<text  x="76.37" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9 samples, 0.12%)</title><rect x="344.0" y="549" width="1.5" height="15.0" fill="rgb(246,183,22)" rx="2" ry="2" />
<text  x="347.00" y="559.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (1 samples, 0.01%)</title><rect x="819.0" y="677" width="0.1" height="15.0" fill="rgb(214,209,14)" rx="2" ry="2" />
<text  x="821.98" y="687.5" ></text>
</g>
<g >
<title>StaticServer::onMessage (104 samples, 1.42%)</title><rect x="91.3" y="581" width="16.8" height="15.0" fill="rgb(211,119,39)" rx="2" ry="2" />
<text  x="94.32" y="591.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="272.4" y="917" width="0.1" height="15.0" fill="rgb(212,216,45)" rx="2" ry="2" />
<text  x="275.38" y="927.5" ></text>
</g>
<g >
<title>__lock_text_start (10 samples, 0.14%)</title><rect x="992.4" y="677" width="1.7" height="15.0" fill="rgb(243,46,54)" rx="2" ry="2" />
<text  x="995.44" y="687.5" ></text>
</g>
<g >
<title>muduo::Logger::logLevel (1 samples, 0.01%)</title><rect x="369.5" y="805" width="0.2" height="15.0" fill="rgb(233,97,0)" rx="2" ry="2" />
<text  x="372.55" y="815.5" ></text>
</g>
<g >
<title>malloc (14 samples, 0.19%)</title><rect x="985.8" y="997" width="2.3" height="15.0" fill="rgb(254,165,47)" rx="2" ry="2" />
<text  x="988.82" y="1007.5" ></text>
</g>
<g >
<title>__schedule (45 samples, 0.62%)</title><rect x="140.0" y="597" width="7.3" height="15.0" fill="rgb(247,112,30)" rx="2" ry="2" />
<text  x="142.98" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="1135.2" y="613" width="0.2" height="15.0" fill="rgb(223,204,0)" rx="2" ry="2" />
<text  x="1138.20" y="623.5" ></text>
</g>
<g >
<title>do_readv (63 samples, 0.86%)</title><rect x="76.3" y="597" width="10.2" height="15.0" fill="rgb(246,201,30)" rx="2" ry="2" />
<text  x="79.28" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (14 samples, 0.19%)</title><rect x="489.7" y="789" width="2.2" height="15.0" fill="rgb(206,228,38)" rx="2" ry="2" />
<text  x="492.66" y="799.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="1175.5" y="581" width="0.1" height="15.0" fill="rgb(224,164,14)" rx="2" ry="2" />
<text  x="1178.45" y="591.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="805.7" y="565" width="0.2" height="15.0" fill="rgb(239,122,15)" rx="2" ry="2" />
<text  x="808.72" y="575.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="617.2" y="885" width="0.2" height="15.0" fill="rgb(217,37,41)" rx="2" ry="2" />
<text  x="620.22" y="895.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11 samples, 0.15%)</title><rect x="347.2" y="533" width="1.8" height="15.0" fill="rgb(237,153,14)" rx="2" ry="2" />
<text  x="350.24" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="680.6" y="645" width="0.3" height="15.0" fill="rgb(231,59,20)" rx="2" ry="2" />
<text  x="683.59" y="655.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="777.9" y="661" width="0.2" height="15.0" fill="rgb(227,7,30)" rx="2" ry="2" />
<text  x="780.91" y="671.5" ></text>
</g>
<g >
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="238.1" y="389" width="0.3" height="15.0" fill="rgb(230,102,0)" rx="2" ry="2" />
<text  x="241.11" y="399.5" ></text>
</g>
<g >
<title>muduo::net::Channel::update (1 samples, 0.01%)</title><rect x="385.2" y="677" width="0.2" height="15.0" fill="rgb(231,19,11)" rx="2" ry="2" />
<text  x="388.23" y="687.5" ></text>
</g>
<g >
<title>ext4_do_update_inode (2 samples, 0.03%)</title><rect x="12.9" y="725" width="0.3" height="15.0" fill="rgb(229,64,26)" rx="2" ry="2" />
<text  x="15.91" y="735.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (3 samples, 0.04%)</title><rect x="11.0" y="757" width="0.5" height="15.0" fill="rgb(210,195,26)" rx="2" ry="2" />
<text  x="13.97" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (4 samples, 0.05%)</title><rect x="1135.4" y="661" width="0.6" height="15.0" fill="rgb(240,40,33)" rx="2" ry="2" />
<text  x="1138.36" y="671.5" ></text>
</g>
<g >
<title>__schedule (69 samples, 0.95%)</title><rect x="296.6" y="693" width="11.2" height="15.0" fill="rgb(236,142,14)" rx="2" ry="2" />
<text  x="299.63" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1 samples, 0.01%)</title><rect x="104.4" y="485" width="0.2" height="15.0" fill="rgb(211,18,28)" rx="2" ry="2" />
<text  x="107.41" y="495.5" ></text>
</g>
<g >
<title>jiffies_to_usecs (1 samples, 0.01%)</title><rect x="482.4" y="437" width="0.1" height="15.0" fill="rgb(245,83,24)" rx="2" ry="2" />
<text  x="485.39" y="447.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (17 samples, 0.23%)</title><rect x="826.3" y="533" width="2.7" height="15.0" fill="rgb(219,163,24)" rx="2" ry="2" />
<text  x="829.25" y="543.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="1015.4" y="629" width="0.2" height="15.0" fill="rgb(228,113,28)" rx="2" ry="2" />
<text  x="1018.40" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;3ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (2 samples, 0.03%)</title><rect x="356.8" y="613" width="0.3" height="15.0" fill="rgb(242,156,53)" rx="2" ry="2" />
<text  x="359.77" y="623.5" ></text>
</g>
<g >
<title>__vfs_write (517 samples, 7.08%)</title><rect x="1031.6" y="549" width="83.5" height="15.0" fill="rgb(240,62,49)" rx="2" ry="2" />
<text  x="1034.57" y="559.5" >__vfs_write</text>
</g>
<g >
<title>__fdget_pos (6 samples, 0.08%)</title><rect x="327.8" y="581" width="1.0" height="15.0" fill="rgb(229,207,19)" rx="2" ry="2" />
<text  x="330.84" y="591.5" ></text>
</g>
<g >
<title>tcp_rack_advance (1 samples, 0.01%)</title><rect x="565.3" y="389" width="0.2" height="15.0" fill="rgb(254,88,2)" rx="2" ry="2" />
<text  x="568.32" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (57 samples, 0.78%)</title><rect x="327.0" y="645" width="9.2" height="15.0" fill="rgb(209,46,10)" rx="2" ry="2" />
<text  x="330.03" y="655.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="1013.5" y="661" width="0.3" height="15.0" fill="rgb(235,197,18)" rx="2" ry="2" />
<text  x="1016.46" y="671.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::getContextkv (13 samples, 0.18%)</title><rect x="1021.5" y="693" width="2.1" height="15.0" fill="rgb(222,189,38)" rx="2" ry="2" />
<text  x="1024.54" y="703.5" ></text>
</g>
<g >
<title>apparmor_file_permission (3 samples, 0.04%)</title><rect x="585.0" y="885" width="0.5" height="15.0" fill="rgb(234,166,41)" rx="2" ry="2" />
<text  x="588.05" y="895.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.01%)</title><rect x="151.3" y="405" width="0.2" height="15.0" fill="rgb(241,143,31)" rx="2" ry="2" />
<text  x="154.30" y="415.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="264.5" y="933" width="0.6" height="15.0" fill="rgb(246,55,34)" rx="2" ry="2" />
<text  x="267.46" y="943.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (3 samples, 0.04%)</title><rect x="165.2" y="133" width="0.5" height="15.0" fill="rgb(248,135,0)" rx="2" ry="2" />
<text  x="168.20" y="143.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (11 samples, 0.15%)</title><rect x="654.4" y="821" width="1.8" height="15.0" fill="rgb(248,174,40)" rx="2" ry="2" />
<text  x="657.40" y="831.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="314.9" y="709" width="0.2" height="15.0" fill="rgb(247,150,21)" rx="2" ry="2" />
<text  x="317.90" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="265.4" y="933" width="0.2" height="15.0" fill="rgb(225,13,9)" rx="2" ry="2" />
<text  x="268.43" y="943.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2 samples, 0.03%)</title><rect x="32.3" y="949" width="0.3" height="15.0" fill="rgb(244,166,21)" rx="2" ry="2" />
<text  x="35.31" y="959.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="110.2" y="485" width="0.2" height="15.0" fill="rgb(252,169,5)" rx="2" ry="2" />
<text  x="113.23" y="495.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (38 samples, 0.52%)</title><rect x="119.0" y="789" width="6.1" height="15.0" fill="rgb(243,126,38)" rx="2" ry="2" />
<text  x="121.96" y="799.5" ></text>
</g>
<g >
<title>Parser::access_request (1,017 samples, 13.93%)</title><rect x="998.4" y="725" width="164.4" height="15.0" fill="rgb(243,65,45)" rx="2" ry="2" />
<text  x="1001.43" y="735.5" >Parser::access_request</text>
</g>
<g >
<title>free (1 samples, 0.01%)</title><rect x="994.5" y="709" width="0.2" height="15.0" fill="rgb(215,136,51)" rx="2" ry="2" />
<text  x="997.55" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5 samples, 0.07%)</title><rect x="1149.9" y="677" width="0.8" height="15.0" fill="rgb(241,112,9)" rx="2" ry="2" />
<text  x="1152.91" y="687.5" ></text>
</g>
<g >
<title>ip_output (171 samples, 2.34%)</title><rect x="898.8" y="693" width="27.7" height="15.0" fill="rgb(230,82,49)" rx="2" ry="2" />
<text  x="901.84" y="703.5" >i..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="605.1" y="949" width="0.2" height="15.0" fill="rgb(251,151,26)" rx="2" ry="2" />
<text  x="608.09" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="379.4" y="725" width="0.3" height="15.0" fill="rgb(225,212,2)" rx="2" ry="2" />
<text  x="382.41" y="735.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdown (6 samples, 0.08%)</title><rect x="337.1" y="661" width="0.9" height="15.0" fill="rgb(212,48,24)" rx="2" ry="2" />
<text  x="340.05" y="671.5" ></text>
</g>
<g >
<title>dst_release (2 samples, 0.03%)</title><rect x="413.5" y="101" width="0.3" height="15.0" fill="rgb(235,126,14)" rx="2" ry="2" />
<text  x="416.52" y="111.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="324.1" y="549" width="0.2" height="15.0" fill="rgb(247,137,43)" rx="2" ry="2" />
<text  x="327.12" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1184.3" y="725" width="0.2" height="15.0" fill="rgb(225,13,15)" rx="2" ry="2" />
<text  x="1187.34" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (4 samples, 0.05%)</title><rect x="599.6" y="965" width="0.6" height="15.0" fill="rgb(226,21,33)" rx="2" ry="2" />
<text  x="602.60" y="975.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="794.1" y="613" width="0.1" height="15.0" fill="rgb(206,46,4)" rx="2" ry="2" />
<text  x="797.08" y="623.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="338.8" y="485" width="0.2" height="15.0" fill="rgb(231,121,12)" rx="2" ry="2" />
<text  x="341.83" y="495.5" ></text>
</g>
<g >
<title>__fdget_pos (2 samples, 0.03%)</title><rect x="71.9" y="613" width="0.3" height="15.0" fill="rgb(205,178,20)" rx="2" ry="2" />
<text  x="74.92" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="68.2" y="725" width="0.2" height="15.0" fill="rgb(251,222,7)" rx="2" ry="2" />
<text  x="71.20" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1119.2" y="597" width="0.2" height="15.0" fill="rgb(216,77,1)" rx="2" ry="2" />
<text  x="1122.19" y="607.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="953.2" y="965" width="0.1" height="15.0" fill="rgb(242,34,22)" rx="2" ry="2" />
<text  x="956.16" y="975.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="347.6" y="469" width="0.1" height="15.0" fill="rgb(221,173,23)" rx="2" ry="2" />
<text  x="350.56" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_equals_val&lt;char const&gt; (1 samples, 0.01%)</title><rect x="813.3" y="693" width="0.2" height="15.0" fill="rgb(249,85,21)" rx="2" ry="2" />
<text  x="816.32" y="703.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (1 samples, 0.01%)</title><rect x="873.1" y="821" width="0.2" height="15.0" fill="rgb(223,214,20)" rx="2" ry="2" />
<text  x="876.13" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="807.2" y="661" width="0.3" height="15.0" fill="rgb(245,56,12)" rx="2" ry="2" />
<text  x="810.17" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (128 samples, 1.75%)</title><rect x="90.0" y="661" width="20.7" height="15.0" fill="rgb(219,60,12)" rx="2" ry="2" />
<text  x="93.02" y="671.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (1 samples, 0.01%)</title><rect x="294.0" y="677" width="0.2" height="15.0" fill="rgb(209,229,26)" rx="2" ry="2" />
<text  x="297.05" y="687.5" ></text>
</g>
<g >
<title>finish_task_switch (42 samples, 0.58%)</title><rect x="140.5" y="581" width="6.8" height="15.0" fill="rgb(226,166,54)" rx="2" ry="2" />
<text  x="143.46" y="591.5" ></text>
</g>
<g >
<title>__alloc_skb (10 samples, 0.14%)</title><rect x="399.9" y="469" width="1.7" height="15.0" fill="rgb(221,100,41)" rx="2" ry="2" />
<text  x="402.94" y="479.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.01%)</title><rect x="778.7" y="597" width="0.2" height="15.0" fill="rgb(220,207,40)" rx="2" ry="2" />
<text  x="781.72" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.03%)</title><rect x="839.2" y="725" width="0.3" height="15.0" fill="rgb(233,184,17)" rx="2" ry="2" />
<text  x="842.18" y="735.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1117.3" y="517" width="0.1" height="15.0" fill="rgb(242,223,11)" rx="2" ry="2" />
<text  x="1120.25" y="527.5" ></text>
</g>
<g >
<title>ip_local_deliver (433 samples, 5.93%)</title><rect x="409.3" y="181" width="70.0" height="15.0" fill="rgb(247,192,3)" rx="2" ry="2" />
<text  x="412.31" y="191.5" >ip_loca..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt;::operator (1 samples, 0.01%)</title><rect x="1130.3" y="645" width="0.2" height="15.0" fill="rgb(217,108,20)" rx="2" ry="2" />
<text  x="1133.35" y="655.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1 samples, 0.01%)</title><rect x="32.6" y="997" width="0.2" height="15.0" fill="rgb(241,198,26)" rx="2" ry="2" />
<text  x="35.63" y="1007.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1 samples, 0.01%)</title><rect x="1125.2" y="597" width="0.1" height="15.0" fill="rgb(213,141,51)" rx="2" ry="2" />
<text  x="1128.17" y="607.5" ></text>
</g>
<g >
<title>skb_clone (5 samples, 0.07%)</title><rect x="237.6" y="421" width="0.8" height="15.0" fill="rgb(247,123,0)" rx="2" ry="2" />
<text  x="240.63" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl&lt;muduo::net::TcpConnection*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt; (1 samples, 0.01%)</title><rect x="770.3" y="645" width="0.2" height="15.0" fill="rgb(210,169,6)" rx="2" ry="2" />
<text  x="773.32" y="655.5" ></text>
</g>
<g >
<title>muduo::T::T (1 samples, 0.01%)</title><rect x="251.5" y="773" width="0.2" height="15.0" fill="rgb(246,71,20)" rx="2" ry="2" />
<text  x="254.53" y="783.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1183.0" y="709" width="0.2" height="15.0" fill="rgb(228,100,16)" rx="2" ry="2" />
<text  x="1186.05" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="658.8" y="517" width="0.1" height="15.0" fill="rgb(240,50,43)" rx="2" ry="2" />
<text  x="661.77" y="527.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (705 samples, 9.66%)</title><rect x="134.8" y="821" width="114.0" height="15.0" fill="rgb(209,163,50)" rx="2" ry="2" />
<text  x="137.81" y="831.5" >muduo::net::Ev..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="948.3" y="933" width="0.2" height="15.0" fill="rgb(244,22,48)" rx="2" ry="2" />
<text  x="951.31" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="103.3" y="453" width="0.1" height="15.0" fill="rgb(217,106,38)" rx="2" ry="2" />
<text  x="106.28" y="463.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="803.3" y="597" width="0.2" height="15.0" fill="rgb(223,33,14)" rx="2" ry="2" />
<text  x="806.29" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="997.6" y="773" width="0.5" height="15.0" fill="rgb(228,0,3)" rx="2" ry="2" />
<text  x="1000.62" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (10 samples, 0.14%)</title><rect x="1186.8" y="869" width="1.6" height="15.0" fill="rgb(225,199,28)" rx="2" ry="2" />
<text  x="1189.77" y="879.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="123.8" y="757" width="0.2" height="15.0" fill="rgb(249,139,43)" rx="2" ry="2" />
<text  x="126.81" y="767.5" ></text>
</g>
<g >
<title>std::forward&lt;muduo::Timestamp&gt; (1 samples, 0.01%)</title><rect x="110.4" y="645" width="0.2" height="15.0" fill="rgb(220,44,43)" rx="2" ry="2" />
<text  x="113.39" y="655.5" ></text>
</g>
<g >
<title>std::move&lt;void  (1 samples, 0.01%)</title><rect x="1125.3" y="645" width="0.2" height="15.0" fill="rgb(214,129,5)" rx="2" ry="2" />
<text  x="1128.33" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1156.5" y="693" width="0.2" height="15.0" fill="rgb(222,140,9)" rx="2" ry="2" />
<text  x="1159.54" y="703.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="153.1" y="485" width="0.1" height="15.0" fill="rgb(217,114,23)" rx="2" ry="2" />
<text  x="156.07" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.01%)</title><rect x="789.1" y="629" width="0.1" height="15.0" fill="rgb(244,56,21)" rx="2" ry="2" />
<text  x="792.07" y="639.5" ></text>
</g>
<g >
<title>tcp_tso_segs (2 samples, 0.03%)</title><rect x="240.9" y="437" width="0.3" height="15.0" fill="rgb(229,125,53)" rx="2" ry="2" />
<text  x="243.86" y="447.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (1 samples, 0.01%)</title><rect x="151.3" y="501" width="0.2" height="15.0" fill="rgb(248,195,41)" rx="2" ry="2" />
<text  x="154.30" y="511.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1149.7" y="661" width="0.2" height="15.0" fill="rgb(234,208,50)" rx="2" ry="2" />
<text  x="1152.75" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="1023.3" y="645" width="0.3" height="15.0" fill="rgb(244,177,49)" rx="2" ry="2" />
<text  x="1026.32" y="655.5" ></text>
</g>
<g >
<title>copyin (1 samples, 0.01%)</title><rect x="399.5" y="485" width="0.1" height="15.0" fill="rgb(232,28,37)" rx="2" ry="2" />
<text  x="402.45" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::detail::FixedBuffer&lt;4000000&gt;*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="497.3" y="677" width="0.1" height="15.0" fill="rgb(237,167,27)" rx="2" ry="2" />
<text  x="500.26" y="687.5" ></text>
</g>
<g >
<title>strrchr (1 samples, 0.01%)</title><rect x="359.7" y="789" width="0.1" height="15.0" fill="rgb(239,117,28)" rx="2" ry="2" />
<text  x="362.68" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (1 samples, 0.01%)</title><rect x="1182.2" y="725" width="0.2" height="15.0" fill="rgb(232,85,34)" rx="2" ry="2" />
<text  x="1185.24" y="735.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="151.3" y="373" width="0.2" height="15.0" fill="rgb(226,189,25)" rx="2" ry="2" />
<text  x="154.30" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (6 samples, 0.08%)</title><rect x="994.9" y="725" width="0.9" height="15.0" fill="rgb(232,226,23)" rx="2" ry="2" />
<text  x="997.87" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;StaticServer::Entry&gt;::~shared_ptr (2 samples, 0.03%)</title><rect x="101.8" y="565" width="0.3" height="15.0" fill="rgb(205,51,26)" rx="2" ry="2" />
<text  x="104.83" y="575.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11 samples, 0.15%)</title><rect x="489.8" y="693" width="1.8" height="15.0" fill="rgb(222,131,14)" rx="2" ry="2" />
<text  x="492.82" y="703.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="407.4" y="229" width="0.1" height="15.0" fill="rgb(226,31,27)" rx="2" ry="2" />
<text  x="410.37" y="239.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="133.7" y="757" width="0.1" height="15.0" fill="rgb(232,223,37)" rx="2" ry="2" />
<text  x="136.67" y="767.5" ></text>
</g>
<g >
<title>ip_rcv_finish (448 samples, 6.14%)</title><rect x="162.1" y="197" width="72.5" height="15.0" fill="rgb(222,32,9)" rx="2" ry="2" />
<text  x="165.13" y="207.5" >ip_rcv_f..</text>
</g>
<g >
<title>std::__weak_ptr&lt;StaticServer::Entry,  (2 samples, 0.03%)</title><rect x="92.0" y="533" width="0.3" height="15.0" fill="rgb(253,5,46)" rx="2" ry="2" />
<text  x="94.96" y="543.5" ></text>
</g>
<g >
<title>skb_release_data (5 samples, 0.07%)</title><rect x="79.8" y="437" width="0.8" height="15.0" fill="rgb(217,82,15)" rx="2" ry="2" />
<text  x="82.84" y="447.5" ></text>
</g>
<g >
<title>strncpy_from_user (9 samples, 0.12%)</title><rect x="832.9" y="597" width="1.4" height="15.0" fill="rgb(223,208,27)" rx="2" ry="2" />
<text  x="835.88" y="607.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="1013.8" y="661" width="0.1" height="15.0" fill="rgb(215,168,18)" rx="2" ry="2" />
<text  x="1016.78" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1 samples, 0.01%)</title><rect x="780.7" y="693" width="0.1" height="15.0" fill="rgb(212,90,5)" rx="2" ry="2" />
<text  x="783.66" y="703.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="1016.9" y="661" width="0.1" height="15.0" fill="rgb(212,21,12)" rx="2" ry="2" />
<text  x="1019.86" y="671.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.01%)</title><rect x="337.4" y="69" width="0.1" height="15.0" fill="rgb(253,23,13)" rx="2" ry="2" />
<text  x="340.37" y="79.5" ></text>
</g>
<g >
<title>muduo::Timestamp::Timestamp (1 samples, 0.01%)</title><rect x="251.7" y="757" width="0.2" height="15.0" fill="rgb(252,174,14)" rx="2" ry="2" />
<text  x="254.69" y="767.5" ></text>
</g>
<g >
<title>muduo::net::Socket::~Socket (1 samples, 0.01%)</title><rect x="247.3" y="469" width="0.2" height="15.0" fill="rgb(227,101,2)" rx="2" ry="2" />
<text  x="250.33" y="479.5" ></text>
</g>
<g >
<title>__strcpy_sse2_unaligned (4 samples, 0.05%)</title><rect x="819.1" y="725" width="0.7" height="15.0" fill="rgb(221,227,13)" rx="2" ry="2" />
<text  x="822.14" y="735.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="997.6" y="805" width="0.5" height="15.0" fill="rgb(226,110,36)" rx="2" ry="2" />
<text  x="1000.62" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10 samples, 0.14%)</title><rect x="656.5" y="821" width="1.6" height="15.0" fill="rgb(230,214,54)" rx="2" ry="2" />
<text  x="659.50" y="831.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.01%)</title><rect x="682.9" y="533" width="0.1" height="15.0" fill="rgb(240,83,37)" rx="2" ry="2" />
<text  x="685.85" y="543.5" ></text>
</g>
<g >
<title>__tcp_select_window (1 samples, 0.01%)</title><rect x="897.2" y="741" width="0.2" height="15.0" fill="rgb(222,170,19)" rx="2" ry="2" />
<text  x="900.22" y="751.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::begin (1 samples, 0.01%)</title><rect x="681.7" y="629" width="0.2" height="15.0" fill="rgb(244,107,51)" rx="2" ry="2" />
<text  x="684.72" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (1 samples, 0.01%)</title><rect x="838.9" y="725" width="0.1" height="15.0" fill="rgb(252,172,14)" rx="2" ry="2" />
<text  x="841.86" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1004.1" y="693" width="0.1" height="15.0" fill="rgb(239,217,25)" rx="2" ry="2" />
<text  x="1007.08" y="703.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::isInLoopThread (1 samples, 0.01%)</title><rect x="1027.4" y="645" width="0.1" height="15.0" fill="rgb(224,20,52)" rx="2" ry="2" />
<text  x="1030.36" y="655.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.43 (1 samples, 0.01%)</title><rect x="156.0" y="469" width="0.1" height="15.0" fill="rgb(241,223,1)" rx="2" ry="2" />
<text  x="158.98" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="678.7" y="645" width="0.1" height="15.0" fill="rgb(243,163,47)" rx="2" ry="2" />
<text  x="681.65" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="98.4" y="549" width="0.2" height="15.0" fill="rgb(248,2,17)" rx="2" ry="2" />
<text  x="101.43" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.01%)</title><rect x="1181.1" y="725" width="0.2" height="15.0" fill="rgb(251,39,3)" rx="2" ry="2" />
<text  x="1184.11" y="735.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="153.2" y="469" width="0.4" height="15.0" fill="rgb(246,10,43)" rx="2" ry="2" />
<text  x="156.24" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (2 samples, 0.03%)</title><rect x="359.8" y="789" width="0.4" height="15.0" fill="rgb(231,21,34)" rx="2" ry="2" />
<text  x="362.85" y="799.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="498.4" y="725" width="0.2" height="15.0" fill="rgb(215,55,13)" rx="2" ry="2" />
<text  x="501.39" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2 samples, 0.03%)</title><rect x="817.2" y="645" width="0.3" height="15.0" fill="rgb(207,6,50)" rx="2" ry="2" />
<text  x="820.20" y="655.5" ></text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.01%)</title><rect x="512.6" y="821" width="0.2" height="15.0" fill="rgb(222,50,21)" rx="2" ry="2" />
<text  x="515.62" y="831.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="67.6" y="677" width="0.1" height="15.0" fill="rgb(228,69,34)" rx="2" ry="2" />
<text  x="70.55" y="687.5" ></text>
</g>
<g >
<title>_int_malloc (49 samples, 0.67%)</title><rect x="626.1" y="997" width="7.9" height="15.0" fill="rgb(205,54,16)" rx="2" ry="2" />
<text  x="629.11" y="1007.5" ></text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.01%)</title><rect x="908.4" y="389" width="0.1" height="15.0" fill="rgb(224,33,44)" rx="2" ry="2" />
<text  x="911.38" y="399.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (652 samples, 8.93%)</title><rect x="138.4" y="677" width="105.4" height="15.0" fill="rgb(226,209,52)" rx="2" ry="2" />
<text  x="141.36" y="687.5" >[libpthread-..</text>
</g>
<g >
<title>ext4_reserve_inode_write (2 samples, 0.03%)</title><rect x="13.2" y="741" width="0.4" height="15.0" fill="rgb(254,70,8)" rx="2" ry="2" />
<text  x="16.23" y="751.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.01%)</title><rect x="512.5" y="821" width="0.1" height="15.0" fill="rgb(237,102,35)" rx="2" ry="2" />
<text  x="515.46" y="831.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.01%)</title><rect x="85.8" y="549" width="0.2" height="15.0" fill="rgb(210,152,40)" rx="2" ry="2" />
<text  x="88.82" y="559.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="550.1" y="773" width="0.2" height="15.0" fill="rgb(233,4,8)" rx="2" ry="2" />
<text  x="553.13" y="783.5" ></text>
</g>
<g >
<title>muduo::net::sockets::write (2 samples, 0.03%)</title><rect x="765.8" y="645" width="0.3" height="15.0" fill="rgb(247,218,51)" rx="2" ry="2" />
<text  x="768.79" y="655.5" ></text>
</g>
<g >
<title>[libc-2.23.so] (127 samples, 1.74%)</title><rect x="38.5" y="821" width="20.5" height="15.0" fill="rgb(213,115,38)" rx="2" ry="2" />
<text  x="41.45" y="831.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1117.3" y="533" width="0.1" height="15.0" fill="rgb(235,65,8)" rx="2" ry="2" />
<text  x="1120.25" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="102.0" y="517" width="0.1" height="15.0" fill="rgb(236,74,46)" rx="2" ry="2" />
<text  x="104.99" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="1123.7" y="581" width="0.2" height="15.0" fill="rgb(228,147,14)" rx="2" ry="2" />
<text  x="1126.72" y="591.5" ></text>
</g>
<g >
<title>__lock_text_start (398 samples, 5.45%)</title><rect x="169.7" y="37" width="64.4" height="15.0" fill="rgb(212,50,36)" rx="2" ry="2" />
<text  x="172.73" y="47.5" >__lock_..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base (2 samples, 0.03%)</title><rect x="657.1" y="693" width="0.4" height="15.0" fill="rgb(232,197,46)" rx="2" ry="2" />
<text  x="660.15" y="703.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="22.0" y="917" width="0.1" height="15.0" fill="rgb(215,156,27)" rx="2" ry="2" />
<text  x="24.96" y="927.5" ></text>
</g>
<g >
<title>vfprintf (4 samples, 0.05%)</title><rect x="607.5" y="965" width="0.7" height="15.0" fill="rgb(236,172,5)" rx="2" ry="2" />
<text  x="610.52" y="975.5" ></text>
</g>
<g >
<title>sk_reset_timer (4 samples, 0.05%)</title><rect x="483.0" y="389" width="0.7" height="15.0" fill="rgb(241,185,37)" rx="2" ry="2" />
<text  x="486.03" y="399.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;char*, char*&gt; (1 samples, 0.01%)</title><rect x="118.2" y="725" width="0.1" height="15.0" fill="rgb(206,89,33)" rx="2" ry="2" />
<text  x="121.15" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3 samples, 0.04%)</title><rect x="1130.5" y="693" width="0.5" height="15.0" fill="rgb(221,182,43)" rx="2" ry="2" />
<text  x="1133.51" y="703.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="650.7" y="981" width="0.1" height="15.0" fill="rgb(254,105,11)" rx="2" ry="2" />
<text  x="653.68" y="991.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="1031.2" y="565" width="0.2" height="15.0" fill="rgb(247,61,40)" rx="2" ry="2" />
<text  x="1034.24" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::shared_ptr&lt;StaticServer::Entry&gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (2 samples, 0.03%)</title><rect x="106.4" y="485" width="0.3" height="15.0" fill="rgb(227,180,26)" rx="2" ry="2" />
<text  x="109.35" y="495.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1 samples, 0.01%)</title><rect x="349.2" y="501" width="0.1" height="15.0" fill="rgb(249,207,31)" rx="2" ry="2" />
<text  x="352.18" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (2 samples, 0.03%)</title><rect x="88.9" y="645" width="0.3" height="15.0" fill="rgb(254,177,15)" rx="2" ry="2" />
<text  x="91.89" y="655.5" ></text>
</g>
<g >
<title>ep_scan_ready_list (1 samples, 0.01%)</title><rect x="308.6" y="757" width="0.2" height="15.0" fill="rgb(233,146,46)" rx="2" ry="2" />
<text  x="311.60" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6 samples, 0.08%)</title><rect x="805.2" y="629" width="1.0" height="15.0" fill="rgb(246,57,53)" rx="2" ry="2" />
<text  x="808.23" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,354 samples, 18.55%)</title><rect x="286.8" y="869" width="218.9" height="15.0" fill="rgb(219,191,46)" rx="2" ry="2" />
<text  x="289.77" y="879.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="663.5" y="677" width="0.1" height="15.0" fill="rgb(219,218,41)" rx="2" ry="2" />
<text  x="666.45" y="687.5" ></text>
</g>
<g >
<title>std::swap&lt;void  (3 samples, 0.04%)</title><rect x="773.2" y="645" width="0.5" height="15.0" fill="rgb(213,98,9)" rx="2" ry="2" />
<text  x="776.23" y="655.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1 samples, 0.01%)</title><rect x="13.7" y="757" width="0.2" height="15.0" fill="rgb(213,30,42)" rx="2" ry="2" />
<text  x="16.72" y="767.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (6 samples, 0.08%)</title><rect x="677.2" y="613" width="1.0" height="15.0" fill="rgb(209,164,13)" rx="2" ry="2" />
<text  x="680.20" y="623.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="357.9" y="629" width="0.2" height="15.0" fill="rgb(240,226,52)" rx="2" ry="2" />
<text  x="360.91" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="783.1" y="597" width="0.1" height="15.0" fill="rgb(228,173,28)" rx="2" ry="2" />
<text  x="786.09" y="607.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;1&gt;, false, true&gt;::operator (2 samples, 0.03%)</title><rect x="69.5" y="725" width="0.3" height="15.0" fill="rgb(252,66,23)" rx="2" ry="2" />
<text  x="72.49" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="109.4" y="581" width="0.2" height="15.0" fill="rgb(239,87,16)" rx="2" ry="2" />
<text  x="112.42" y="591.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.01%)</title><rect x="1031.7" y="533" width="0.2" height="15.0" fill="rgb(206,58,44)" rx="2" ry="2" />
<text  x="1034.73" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="843.2" y="965" width="0.2" height="15.0" fill="rgb(241,215,31)" rx="2" ry="2" />
<text  x="846.23" y="975.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="850.3" y="709" width="0.2" height="15.0" fill="rgb(222,82,54)" rx="2" ry="2" />
<text  x="853.34" y="719.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (113 samples, 1.55%)</title><rect x="903.9" y="453" width="18.2" height="15.0" fill="rgb(254,89,22)" rx="2" ry="2" />
<text  x="906.85" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, false&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="107.2" y="469" width="0.1" height="15.0" fill="rgb(252,173,24)" rx="2" ry="2" />
<text  x="110.16" y="479.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="414.2" y="53" width="0.4" height="15.0" fill="rgb(247,207,9)" rx="2" ry="2" />
<text  x="417.16" y="63.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="21.6" y="901" width="0.2" height="15.0" fill="rgb(236,121,49)" rx="2" ry="2" />
<text  x="24.64" y="911.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="489.2" y="725" width="0.1" height="15.0" fill="rgb(223,10,41)" rx="2" ry="2" />
<text  x="492.18" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="99.4" y="485" width="0.2" height="15.0" fill="rgb(219,0,43)" rx="2" ry="2" />
<text  x="102.40" y="495.5" ></text>
</g>
<g >
<title>mod_timer (1 samples, 0.01%)</title><rect x="927.8" y="709" width="0.1" height="15.0" fill="rgb(245,200,12)" rx="2" ry="2" />
<text  x="930.78" y="719.5" ></text>
</g>
<g >
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="922.1" y="469" width="0.3" height="15.0" fill="rgb(220,130,48)" rx="2" ry="2" />
<text  x="925.12" y="479.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (18 samples, 0.25%)</title><rect x="493.9" y="805" width="2.9" height="15.0" fill="rgb(231,162,24)" rx="2" ry="2" />
<text  x="496.87" y="815.5" ></text>
</g>
<g >
<title>ip_queue_xmit (492 samples, 6.74%)</title><rect x="158.1" y="421" width="79.5" height="15.0" fill="rgb(230,187,24)" rx="2" ry="2" />
<text  x="161.09" y="431.5" >ip_queue_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="1160.6" y="677" width="0.1" height="15.0" fill="rgb(229,103,34)" rx="2" ry="2" />
<text  x="1163.58" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="259.9" y="949" width="0.2" height="15.0" fill="rgb(214,132,15)" rx="2" ry="2" />
<text  x="262.94" y="959.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::append (1 samples, 0.01%)</title><rect x="1148.8" y="709" width="0.1" height="15.0" fill="rgb(245,107,2)" rx="2" ry="2" />
<text  x="1151.78" y="719.5" ></text>
</g>
<g >
<title>__check_object_size (4 samples, 0.05%)</title><rect x="332.0" y="453" width="0.7" height="15.0" fill="rgb(207,155,33)" rx="2" ry="2" />
<text  x="335.04" y="463.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (115 samples, 1.58%)</title><rect x="90.5" y="613" width="18.6" height="15.0" fill="rgb(235,124,54)" rx="2" ry="2" />
<text  x="93.51" y="623.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="92.4" y="389" width="0.2" height="15.0" fill="rgb(248,203,10)" rx="2" ry="2" />
<text  x="95.45" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;StaticServer*&amp;&gt; (1 samples, 0.01%)</title><rect x="841.9" y="773" width="0.2" height="15.0" fill="rgb(233,35,19)" rx="2" ry="2" />
<text  x="844.93" y="783.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="367.3" y="693" width="0.1" height="15.0" fill="rgb(215,120,1)" rx="2" ry="2" />
<text  x="370.28" y="703.5" ></text>
</g>
<g >
<title>skb_put (1 samples, 0.01%)</title><rect x="397.0" y="501" width="0.2" height="15.0" fill="rgb(215,172,35)" rx="2" ry="2" />
<text  x="400.03" y="511.5" ></text>
</g>
<g >
<title>ip_local_out (1 samples, 0.01%)</title><rect x="404.0" y="421" width="0.1" height="15.0" fill="rgb(241,156,44)" rx="2" ry="2" />
<text  x="406.98" y="431.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.01%)</title><rect x="1167.7" y="613" width="0.2" height="15.0" fill="rgb(227,93,4)" rx="2" ry="2" />
<text  x="1170.69" y="623.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2 samples, 0.03%)</title><rect x="772.4" y="629" width="0.3" height="15.0" fill="rgb(254,23,7)" rx="2" ry="2" />
<text  x="775.42" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (14 samples, 0.19%)</title><rect x="130.8" y="773" width="2.2" height="15.0" fill="rgb(230,111,38)" rx="2" ry="2" />
<text  x="133.76" y="783.5" ></text>
</g>
<g >
<title>muduo::implict_cast&lt;unsigned long, int&gt; (1 samples, 0.01%)</title><rect x="496.5" y="725" width="0.1" height="15.0" fill="rgb(235,186,20)" rx="2" ry="2" />
<text  x="499.45" y="735.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;3&gt;, false, true&gt;::operator (1 samples, 0.01%)</title><rect x="357.1" y="629" width="0.2" height="15.0" fill="rgb(206,1,14)" rx="2" ry="2" />
<text  x="360.10" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;muduo::Thread, std::default_delete&lt;muduo::Thread&gt; &gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="343.8" y="549" width="0.2" height="15.0" fill="rgb(209,17,24)" rx="2" ry="2" />
<text  x="346.84" y="559.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="490.6" y="581" width="0.2" height="15.0" fill="rgb(207,74,7)" rx="2" ry="2" />
<text  x="493.63" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="259.9" y="965" width="0.2" height="15.0" fill="rgb(215,70,25)" rx="2" ry="2" />
<text  x="262.94" y="975.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="376.3" y="709" width="0.2" height="15.0" fill="rgb(205,18,10)" rx="2" ry="2" />
<text  x="379.34" y="719.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (1 samples, 0.01%)</title><rect x="905.6" y="437" width="0.2" height="15.0" fill="rgb(245,47,32)" rx="2" ry="2" />
<text  x="908.63" y="447.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (541 samples, 7.41%)</title><rect x="682.5" y="677" width="87.5" height="15.0" fill="rgb(210,199,48)" rx="2" ry="2" />
<text  x="685.53" y="687.5" >muduo::net..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (1 samples, 0.01%)</title><rect x="350.3" y="517" width="0.2" height="15.0" fill="rgb(244,107,37)" rx="2" ry="2" />
<text  x="353.31" y="527.5" ></text>
</g>
<g >
<title>asyncOutput (5 samples, 0.07%)</title><rect x="1146.4" y="693" width="0.8" height="15.0" fill="rgb(208,63,1)" rx="2" ry="2" />
<text  x="1149.35" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.14%)</title><rect x="654.6" y="789" width="1.6" height="15.0" fill="rgb(219,223,45)" rx="2" ry="2" />
<text  x="657.56" y="799.5" ></text>
</g>
<g >
<title>ip_rcv (124 samples, 1.70%)</title><rect x="902.7" y="517" width="20.1" height="15.0" fill="rgb(251,43,16)" rx="2" ry="2" />
<text  x="905.72" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (265 samples, 3.63%)</title><rect x="887.7" y="949" width="42.8" height="15.0" fill="rgb(205,36,28)" rx="2" ry="2" />
<text  x="890.68" y="959.5" >do_s..</text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="504.7" y="709" width="0.2" height="15.0" fill="rgb(254,120,42)" rx="2" ry="2" />
<text  x="507.70" y="719.5" ></text>
</g>
<g >
<title>do_futex (11 samples, 0.15%)</title><rect x="683.7" y="565" width="1.7" height="15.0" fill="rgb(246,217,19)" rx="2" ry="2" />
<text  x="686.66" y="575.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (5 samples, 0.07%)</title><rect x="92.9" y="533" width="0.8" height="15.0" fill="rgb(208,117,50)" rx="2" ry="2" />
<text  x="95.93" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;void  (1 samples, 0.01%)</title><rect x="99.1" y="565" width="0.1" height="15.0" fill="rgb(236,124,26)" rx="2" ry="2" />
<text  x="102.08" y="575.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (3 samples, 0.04%)</title><rect x="1186.8" y="629" width="0.5" height="15.0" fill="rgb(208,227,8)" rx="2" ry="2" />
<text  x="1189.77" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (6 samples, 0.08%)</title><rect x="247.6" y="789" width="1.0" height="15.0" fill="rgb(234,101,52)" rx="2" ry="2" />
<text  x="250.65" y="799.5" ></text>
</g>
<g >
<title>rw_verify_area (4 samples, 0.05%)</title><rect x="73.4" y="597" width="0.6" height="15.0" fill="rgb(248,103,42)" rx="2" ry="2" />
<text  x="76.37" y="607.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="28.8" y="853" width="0.1" height="15.0" fill="rgb(211,61,3)" rx="2" ry="2" />
<text  x="31.75" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.01%)</title><rect x="1129.4" y="661" width="0.1" height="15.0" fill="rgb(205,165,8)" rx="2" ry="2" />
<text  x="1132.38" y="671.5" ></text>
</g>
<g >
<title>sprintf (1 samples, 0.01%)</title><rect x="837.9" y="725" width="0.2" height="15.0" fill="rgb(251,183,54)" rx="2" ry="2" />
<text  x="840.89" y="735.5" ></text>
</g>
<g >
<title>__lock_text_start (11 samples, 0.15%)</title><rect x="683.7" y="501" width="1.7" height="15.0" fill="rgb(232,53,10)" rx="2" ry="2" />
<text  x="686.66" y="511.5" ></text>
</g>
<g >
<title>generic_write_end (6 samples, 0.08%)</title><rect x="12.9" y="805" width="1.0" height="15.0" fill="rgb(227,57,38)" rx="2" ry="2" />
<text  x="15.91" y="815.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (7 samples, 0.10%)</title><rect x="372.5" y="789" width="1.1" height="15.0" fill="rgb(230,35,42)" rx="2" ry="2" />
<text  x="375.46" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.08%)</title><rect x="679.5" y="629" width="0.9" height="15.0" fill="rgb(239,1,9)" rx="2" ry="2" />
<text  x="682.46" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Poller, std::default_delete&lt;muduo::net::Poller&gt; &gt;::get (3 samples, 0.04%)</title><rect x="258.0" y="805" width="0.5" height="15.0" fill="rgb(222,189,20)" rx="2" ry="2" />
<text  x="261.00" y="815.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::loop (1,351 samples, 18.51%)</title><rect x="287.1" y="837" width="218.4" height="15.0" fill="rgb(217,79,11)" rx="2" ry="2" />
<text  x="290.10" y="847.5" >muduo::net::EventLoop::loop</text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (3 samples, 0.04%)</title><rect x="1147.3" y="661" width="0.5" height="15.0" fill="rgb(252,77,52)" rx="2" ry="2" />
<text  x="1150.32" y="671.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="129.1" y="709" width="0.2" height="15.0" fill="rgb(213,110,4)" rx="2" ry="2" />
<text  x="132.15" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;StaticServer::Entry,  (1 samples, 0.01%)</title><rect x="352.4" y="437" width="0.2" height="15.0" fill="rgb(213,37,41)" rx="2" ry="2" />
<text  x="355.41" y="447.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (11 samples, 0.15%)</title><rect x="252.5" y="805" width="1.8" height="15.0" fill="rgb(249,180,20)" rx="2" ry="2" />
<text  x="255.50" y="815.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="33.9" y="997" width="0.2" height="15.0" fill="rgb(241,22,24)" rx="2" ry="2" />
<text  x="36.93" y="1007.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::__uniq_ptr_impl (1 samples, 0.01%)</title><rect x="1132.6" y="677" width="0.2" height="15.0" fill="rgb(232,84,5)" rx="2" ry="2" />
<text  x="1135.61" y="687.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="1144.1" y="709" width="0.1" height="15.0" fill="rgb(244,29,29)" rx="2" ry="2" />
<text  x="1147.09" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="310.9" y="789" width="0.3" height="15.0" fill="rgb(252,110,1)" rx="2" ry="2" />
<text  x="313.86" y="799.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="366.2" y="725" width="0.1" height="15.0" fill="rgb(229,189,32)" rx="2" ry="2" />
<text  x="369.15" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1015.1" y="597" width="0.1" height="15.0" fill="rgb(227,14,9)" rx="2" ry="2" />
<text  x="1018.08" y="607.5" ></text>
</g>
<g >
<title>webServer (25 samples, 0.34%)</title><rect x="1186.0" y="1013" width="4.0" height="15.0" fill="rgb(224,122,2)" rx="2" ry="2" />
<text  x="1188.96" y="1023.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="90.3" y="581" width="0.2" height="15.0" fill="rgb(216,95,20)" rx="2" ry="2" />
<text  x="93.35" y="591.5" ></text>
</g>
<g >
<title>std::reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="675.4" y="613" width="0.2" height="15.0" fill="rgb(207,202,6)" rx="2" ry="2" />
<text  x="678.42" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1186.8" y="613" width="0.5" height="15.0" fill="rgb(219,228,53)" rx="2" ry="2" />
<text  x="1189.77" y="623.5" ></text>
</g>
<g >
<title>std::map&lt;int, muduo::net::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::find (34 samples, 0.47%)</title><rect x="375.0" y="789" width="5.5" height="15.0" fill="rgb(208,161,42)" rx="2" ry="2" />
<text  x="378.04" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.01%)</title><rect x="1187.7" y="645" width="0.2" height="15.0" fill="rgb(214,18,2)" rx="2" ry="2" />
<text  x="1190.74" y="655.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="317.7" y="741" width="0.1" height="15.0" fill="rgb(210,157,8)" rx="2" ry="2" />
<text  x="320.65" y="751.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, StaticServer*, false&gt;::_Head_base&lt;StaticServer*&gt; (1 samples, 0.01%)</title><rect x="100.2" y="469" width="0.2" height="15.0" fill="rgb(230,76,38)" rx="2" ry="2" />
<text  x="103.21" y="479.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="1011.7" y="629" width="0.1" height="15.0" fill="rgb(217,180,33)" rx="2" ry="2" />
<text  x="1014.68" y="639.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1121.3" y="629" width="0.2" height="15.0" fill="rgb(224,158,39)" rx="2" ry="2" />
<text  x="1124.29" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (2 samples, 0.03%)</title><rect x="359.8" y="773" width="0.4" height="15.0" fill="rgb(240,141,34)" rx="2" ry="2" />
<text  x="362.85" y="783.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="927.5" y="661" width="0.1" height="15.0" fill="rgb(254,105,48)" rx="2" ry="2" />
<text  x="930.45" y="671.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;&gt; (1 samples, 0.01%)</title><rect x="358.7" y="709" width="0.2" height="15.0" fill="rgb(236,100,30)" rx="2" ry="2" />
<text  x="361.71" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="379.7" y="725" width="0.2" height="15.0" fill="rgb(249,6,29)" rx="2" ry="2" />
<text  x="382.73" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2 samples, 0.03%)</title><rect x="107.8" y="501" width="0.3" height="15.0" fill="rgb(233,131,40)" rx="2" ry="2" />
<text  x="110.81" y="511.5" ></text>
</g>
<g >
<title>link_path_walk (27 samples, 0.37%)</title><rect x="825.0" y="581" width="4.3" height="15.0" fill="rgb(228,117,49)" rx="2" ry="2" />
<text  x="827.96" y="591.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="330.3" y="261" width="0.1" height="15.0" fill="rgb(210,79,45)" rx="2" ry="2" />
<text  x="333.26" y="271.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.01%)</title><rect x="285.8" y="997" width="0.2" height="15.0" fill="rgb(232,25,26)" rx="2" ry="2" />
<text  x="288.80" y="1007.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, muduo::net::Poller*, std::default_delete&lt;muduo::net::Poller&gt; &gt; (1 samples, 0.01%)</title><rect x="504.2" y="773" width="0.2" height="15.0" fill="rgb(212,102,21)" rx="2" ry="2" />
<text  x="507.21" y="783.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.01%)</title><rect x="396.5" y="485" width="0.2" height="15.0" fill="rgb(232,110,10)" rx="2" ry="2" />
<text  x="399.54" y="495.5" ></text>
</g>
<g >
<title>inflateInit_ (2 samples, 0.03%)</title><rect x="669.1" y="693" width="0.3" height="15.0" fill="rgb(234,146,18)" rx="2" ry="2" />
<text  x="672.11" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (3 samples, 0.04%)</title><rect x="1129.2" y="677" width="0.5" height="15.0" fill="rgb(222,219,34)" rx="2" ry="2" />
<text  x="1132.21" y="687.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (10 samples, 0.14%)</title><rect x="411.9" y="101" width="1.6" height="15.0" fill="rgb(208,201,22)" rx="2" ry="2" />
<text  x="414.90" y="111.5" ></text>
</g>
<g >
<title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="150.5" y="501" width="0.1" height="15.0" fill="rgb(220,214,14)" rx="2" ry="2" />
<text  x="153.49" y="511.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (3 samples, 0.04%)</title><rect x="261.1" y="933" width="0.5" height="15.0" fill="rgb(214,208,44)" rx="2" ry="2" />
<text  x="264.07" y="943.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1022.8" y="581" width="0.2" height="15.0" fill="rgb(207,48,26)" rx="2" ry="2" />
<text  x="1025.84" y="591.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (26 samples, 0.36%)</title><rect x="61.7" y="789" width="4.2" height="15.0" fill="rgb(221,41,27)" rx="2" ry="2" />
<text  x="64.73" y="799.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="348.0" y="437" width="0.2" height="15.0" fill="rgb(212,222,51)" rx="2" ry="2" />
<text  x="351.04" y="447.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.04%)</title><rect x="342.1" y="549" width="0.4" height="15.0" fill="rgb(231,226,32)" rx="2" ry="2" />
<text  x="345.06" y="559.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (1 samples, 0.01%)</title><rect x="66.3" y="741" width="0.1" height="15.0" fill="rgb(235,189,2)" rx="2" ry="2" />
<text  x="69.26" y="751.5" ></text>
</g>
<g >
<title>__vfs_write (454 samples, 6.22%)</title><rect x="690.6" y="549" width="73.4" height="15.0" fill="rgb(223,50,24)" rx="2" ry="2" />
<text  x="693.61" y="559.5" >__vfs_wr..</text>
</g>
<g >
<title>muduo::net::EventLoop::runInLoop (4 samples, 0.05%)</title><rect x="1186.8" y="677" width="0.6" height="15.0" fill="rgb(246,21,1)" rx="2" ry="2" />
<text  x="1189.77" y="687.5" ></text>
</g>
<g >
<title>ep_scan_ready_list (24 samples, 0.33%)</title><rect x="291.1" y="741" width="3.9" height="15.0" fill="rgb(227,37,41)" rx="2" ry="2" />
<text  x="294.14" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="771.8" y="661" width="0.1" height="15.0" fill="rgb(219,195,18)" rx="2" ry="2" />
<text  x="774.77" y="671.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="82.9" y="453" width="0.2" height="15.0" fill="rgb(210,67,27)" rx="2" ry="2" />
<text  x="85.91" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (4 samples, 0.05%)</title><rect x="1131.2" y="693" width="0.6" height="15.0" fill="rgb(208,214,47)" rx="2" ry="2" />
<text  x="1134.15" y="703.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, muduo::net::Buffer*&amp;&amp;, muduo::Timestamp&amp;&amp;&gt; (2 samples, 0.03%)</title><rect x="338.8" y="565" width="0.4" height="15.0" fill="rgb(254,185,6)" rx="2" ry="2" />
<text  x="341.83" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1120.0" y="581" width="0.2" height="15.0" fill="rgb(206,48,5)" rx="2" ry="2" />
<text  x="1123.00" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, muduo::net::TcpConnection*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="488.9" y="709" width="0.1" height="15.0" fill="rgb(206,48,6)" rx="2" ry="2" />
<text  x="491.85" y="719.5" ></text>
</g>
<g >
<title>common_perm (2 samples, 0.03%)</title><rect x="835.0" y="565" width="0.3" height="15.0" fill="rgb(246,146,21)" rx="2" ry="2" />
<text  x="837.98" y="575.5" ></text>
</g>
<g >
<title>loopback_xmit (5 samples, 0.07%)</title><rect x="236.2" y="293" width="0.8" height="15.0" fill="rgb(251,213,35)" rx="2" ry="2" />
<text  x="239.17" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;muduo::net::EventLoop*, std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;muduo::net::EventLoop* const, std::shared_ptr&lt;boost::circular_buffer&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;, std::allocator&lt;std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;muduo::net::EventLoop*&gt;, std::hash&lt;muduo::net::EventLoop*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.04%)</title><rect x="350.5" y="533" width="0.5" height="15.0" fill="rgb(207,115,23)" rx="2" ry="2" />
<text  x="353.47" y="543.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="64.0" y="709" width="0.2" height="15.0" fill="rgb(242,36,25)" rx="2" ry="2" />
<text  x="67.00" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1 samples, 0.01%)</title><rect x="1188.2" y="693" width="0.2" height="15.0" fill="rgb(219,61,6)" rx="2" ry="2" />
<text  x="1191.22" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.01%)</title><rect x="786.8" y="581" width="0.2" height="15.0" fill="rgb(229,99,42)" rx="2" ry="2" />
<text  x="789.81" y="591.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1121.5" y="645" width="0.1" height="15.0" fill="rgb(253,10,7)" rx="2" ry="2" />
<text  x="1124.45" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="349.0" y="533" width="0.5" height="15.0" fill="rgb(215,132,5)" rx="2" ry="2" />
<text  x="352.01" y="543.5" ></text>
</g>
<g >
<title>__sk_destruct (1 samples, 0.01%)</title><rect x="658.8" y="325" width="0.1" height="15.0" fill="rgb(205,124,2)" rx="2" ry="2" />
<text  x="661.77" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2 samples, 0.03%)</title><rect x="769.7" y="645" width="0.3" height="15.0" fill="rgb(215,222,37)" rx="2" ry="2" />
<text  x="772.67" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="376.0" y="709" width="0.2" height="15.0" fill="rgb(218,77,27)" rx="2" ry="2" />
<text  x="379.01" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.01%)</title><rect x="265.3" y="965" width="0.1" height="15.0" fill="rgb(221,41,24)" rx="2" ry="2" />
<text  x="268.27" y="975.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (1 samples, 0.01%)</title><rect x="510.4" y="837" width="0.1" height="15.0" fill="rgb(249,111,47)" rx="2" ry="2" />
<text  x="513.36" y="847.5" ></text>
</g>
<g >
<title>fput (1 samples, 0.01%)</title><rect x="689.2" y="581" width="0.1" height="15.0" fill="rgb(210,185,33)" rx="2" ry="2" />
<text  x="692.16" y="591.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (6 samples, 0.08%)</title><rect x="661.4" y="661" width="0.9" height="15.0" fill="rgb(253,3,52)" rx="2" ry="2" />
<text  x="664.35" y="671.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.01%)</title><rect x="803.0" y="661" width="0.1" height="15.0" fill="rgb(211,133,54)" rx="2" ry="2" />
<text  x="805.97" y="671.5" ></text>
</g>
<g >
<title>lock_timer_base (1 samples, 0.01%)</title><rect x="561.8" y="341" width="0.1" height="15.0" fill="rgb(252,89,20)" rx="2" ry="2" />
<text  x="564.77" y="351.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="674.1" y="517" width="0.2" height="15.0" fill="rgb(227,73,48)" rx="2" ry="2" />
<text  x="677.12" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="1187.3" y="597" width="0.1" height="15.0" fill="rgb(232,209,13)" rx="2" ry="2" />
<text  x="1190.25" y="607.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.01%)</title><rect x="1014.4" y="565" width="0.2" height="15.0" fill="rgb(230,102,43)" rx="2" ry="2" />
<text  x="1017.43" y="575.5" ></text>
</g>
<g >
<title>ip_finish_output (478 samples, 6.55%)</title><rect x="404.8" y="373" width="77.3" height="15.0" fill="rgb(226,106,33)" rx="2" ry="2" />
<text  x="407.79" y="383.5" >ip_finis..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (1 samples, 0.01%)</title><rect x="253.1" y="773" width="0.2" height="15.0" fill="rgb(244,94,14)" rx="2" ry="2" />
<text  x="256.15" y="783.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (2 samples, 0.03%)</title><rect x="82.4" y="421" width="0.3" height="15.0" fill="rgb(211,77,17)" rx="2" ry="2" />
<text  x="85.43" y="431.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.01%)</title><rect x="162.0" y="197" width="0.1" height="15.0" fill="rgb(237,79,28)" rx="2" ry="2" />
<text  x="164.97" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (9 samples, 0.12%)</title><rect x="1150.9" y="677" width="1.4" height="15.0" fill="rgb(240,21,16)" rx="2" ry="2" />
<text  x="1153.88" y="687.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="1145.4" y="677" width="0.3" height="15.0" fill="rgb(247,197,43)" rx="2" ry="2" />
<text  x="1148.38" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (4 samples, 0.05%)</title><rect x="796.0" y="661" width="0.7" height="15.0" fill="rgb(205,165,7)" rx="2" ry="2" />
<text  x="799.02" y="671.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.01%)</title><rect x="872.5" y="789" width="0.1" height="15.0" fill="rgb(237,75,29)" rx="2" ry="2" />
<text  x="875.49" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::operator= (2 samples, 0.03%)</title><rect x="359.8" y="805" width="0.4" height="15.0" fill="rgb(207,228,54)" rx="2" ry="2" />
<text  x="362.85" y="815.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="840.0" y="693" width="0.2" height="15.0" fill="rgb(225,116,29)" rx="2" ry="2" />
<text  x="842.99" y="703.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.03%)</title><rect x="10.6" y="725" width="0.4" height="15.0" fill="rgb(247,82,40)" rx="2" ry="2" />
<text  x="13.65" y="735.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="651.2" y="949" width="0.1" height="15.0" fill="rgb(238,123,54)" rx="2" ry="2" />
<text  x="654.17" y="959.5" ></text>
</g>
<g >
<title>__wake_up (1 samples, 0.01%)</title><rect x="12.6" y="773" width="0.1" height="15.0" fill="rgb(248,182,30)" rx="2" ry="2" />
<text  x="15.59" y="783.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="253.6" y="741" width="0.2" height="15.0" fill="rgb(254,126,4)" rx="2" ry="2" />
<text  x="256.63" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (18 samples, 0.25%)</title><rect x="71.1" y="645" width="2.9" height="15.0" fill="rgb(224,194,31)" rx="2" ry="2" />
<text  x="74.11" y="655.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="498.1" y="741" width="0.1" height="15.0" fill="rgb(222,77,39)" rx="2" ry="2" />
<text  x="501.07" y="751.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="674.0" y="629" width="0.3" height="15.0" fill="rgb(207,116,46)" rx="2" ry="2" />
<text  x="676.96" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="111.2" y="693" width="0.2" height="15.0" fill="rgb(235,220,3)" rx="2" ry="2" />
<text  x="114.20" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="349.2" y="421" width="0.1" height="15.0" fill="rgb(244,229,6)" rx="2" ry="2" />
<text  x="352.18" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1 samples, 0.01%)</title><rect x="891.9" y="805" width="0.1" height="15.0" fill="rgb(244,79,29)" rx="2" ry="2" />
<text  x="894.89" y="815.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1005.9" y="629" width="0.1" height="15.0" fill="rgb(239,155,40)" rx="2" ry="2" />
<text  x="1008.86" y="639.5" ></text>
</g>
<g >
<title>tcp_urg (2 samples, 0.03%)</title><rect x="921.6" y="421" width="0.4" height="15.0" fill="rgb(209,92,23)" rx="2" ry="2" />
<text  x="924.63" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (1 samples, 0.01%)</title><rect x="493.7" y="773" width="0.2" height="15.0" fill="rgb(248,162,31)" rx="2" ry="2" />
<text  x="496.70" y="783.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;muduo::net::TcpConnection&gt;::lock (6 samples, 0.08%)</title><rect x="795.7" y="693" width="1.0" height="15.0" fill="rgb(223,59,10)" rx="2" ry="2" />
<text  x="798.70" y="703.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, true, false&gt;, bool&gt; (1 samples, 0.01%)</title><rect x="107.3" y="517" width="0.2" height="15.0" fill="rgb(209,202,7)" rx="2" ry="2" />
<text  x="110.32" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.03%)</title><rect x="1156.2" y="709" width="0.3" height="15.0" fill="rgb(237,76,45)" rx="2" ry="2" />
<text  x="1159.21" y="719.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1143.3" y="677" width="0.1" height="15.0" fill="rgb(207,228,17)" rx="2" ry="2" />
<text  x="1146.28" y="687.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="546.4" y="885" width="0.2" height="15.0" fill="rgb(240,126,20)" rx="2" ry="2" />
<text  x="549.41" y="895.5" ></text>
</g>
<g >
<title>__errno_location (4 samples, 0.05%)</title><rect x="59.0" y="821" width="0.6" height="15.0" fill="rgb(209,156,50)" rx="2" ry="2" />
<text  x="61.98" y="831.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="813.8" y="661" width="0.2" height="15.0" fill="rgb(239,36,20)" rx="2" ry="2" />
<text  x="816.80" y="671.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (1 samples, 0.01%)</title><rect x="124.9" y="773" width="0.2" height="15.0" fill="rgb(209,6,53)" rx="2" ry="2" />
<text  x="127.94" y="783.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="818.7" y="693" width="0.3" height="15.0" fill="rgb(227,106,30)" rx="2" ry="2" />
<text  x="821.65" y="703.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (1 samples, 0.01%)</title><rect x="251.2" y="741" width="0.2" height="15.0" fill="rgb(223,104,41)" rx="2" ry="2" />
<text  x="254.21" y="751.5" ></text>
</g>
<g >
<title>security_file_permission (2 samples, 0.03%)</title><rect x="874.8" y="901" width="0.3" height="15.0" fill="rgb(247,144,13)" rx="2" ry="2" />
<text  x="877.75" y="911.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.01%)</title><rect x="82.6" y="341" width="0.1" height="15.0" fill="rgb(222,186,15)" rx="2" ry="2" />
<text  x="85.59" y="351.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (245 samples, 3.36%)</title><rect x="319.8" y="757" width="39.6" height="15.0" fill="rgb(223,222,34)" rx="2" ry="2" />
<text  x="322.75" y="767.5" >std..</text>
</g>
<g >
<title>__memcpy_avx_unaligned (4 samples, 0.05%)</title><rect x="608.3" y="981" width="0.7" height="15.0" fill="rgb(242,147,27)" rx="2" ry="2" />
<text  x="611.33" y="991.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (392 samples, 5.37%)</title><rect x="415.6" y="53" width="63.4" height="15.0" fill="rgb(217,192,32)" rx="2" ry="2" />
<text  x="418.62" y="63.5" >__wake..</text>
</g>
<g >
<title>muduo::LogStream::append (1 samples, 0.01%)</title><rect x="672.2" y="645" width="0.1" height="15.0" fill="rgb(230,25,17)" rx="2" ry="2" />
<text  x="675.18" y="655.5" ></text>
</g>
<g >
<title>cmpxchg_double_slab.isra.33 (1 samples, 0.01%)</title><rect x="330.9" y="373" width="0.2" height="15.0" fill="rgb(253,203,34)" rx="2" ry="2" />
<text  x="333.91" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (642 samples, 8.80%)</title><rect x="384.9" y="741" width="103.8" height="15.0" fill="rgb(225,125,30)" rx="2" ry="2" />
<text  x="387.90" y="751.5" >std::__invok..</text>
</g>
<g >
<title>muduo::net::TcpConnection::handleError (1 samples, 0.01%)</title><rect x="324.8" y="693" width="0.1" height="15.0" fill="rgb(247,194,47)" rx="2" ry="2" />
<text  x="327.76" y="703.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, char const*, char*&gt; (10 samples, 0.14%)</title><rect x="1019.0" y="645" width="1.6" height="15.0" fill="rgb(228,6,38)" rx="2" ry="2" />
<text  x="1021.96" y="655.5" ></text>
</g>
<g >
<title>vfprintf (14 samples, 0.19%)</title><rect x="605.3" y="965" width="2.2" height="15.0" fill="rgb(246,52,16)" rx="2" ry="2" />
<text  x="608.25" y="975.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3 samples, 0.04%)</title><rect x="95.8" y="517" width="0.5" height="15.0" fill="rgb(206,91,20)" rx="2" ry="2" />
<text  x="98.84" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="134.8" y="773" width="0.2" height="15.0" fill="rgb(232,154,47)" rx="2" ry="2" />
<text  x="137.81" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (118 samples, 1.62%)</title><rect x="338.8" y="645" width="19.1" height="15.0" fill="rgb(239,184,41)" rx="2" ry="2" />
<text  x="341.83" y="655.5" ></text>
</g>
<g >
<title>__strcmp_sse2_unaligned (4 samples, 0.05%)</title><rect x="286.1" y="981" width="0.7" height="15.0" fill="rgb(254,1,4)" rx="2" ry="2" />
<text  x="289.13" y="991.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1020.7" y="645" width="0.2" height="15.0" fill="rgb(227,181,32)" rx="2" ry="2" />
<text  x="1023.74" y="655.5" ></text>
</g>
<g >
<title>inflate (73 samples, 1.00%)</title><rect x="637.1" y="997" width="11.8" height="15.0" fill="rgb(211,184,2)" rx="2" ry="2" />
<text  x="640.10" y="1007.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, StaticServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (4 samples, 0.05%)</title><rect x="100.5" y="485" width="0.7" height="15.0" fill="rgb(226,41,54)" rx="2" ry="2" />
<text  x="103.53" y="495.5" ></text>
</g>
<g >
<title>sys_futex (5 samples, 0.07%)</title><rect x="92.9" y="485" width="0.8" height="15.0" fill="rgb(236,67,3)" rx="2" ry="2" />
<text  x="95.93" y="495.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (3 samples, 0.04%)</title><rect x="250.9" y="757" width="0.5" height="15.0" fill="rgb(219,132,43)" rx="2" ry="2" />
<text  x="253.88" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="359.5" y="757" width="0.2" height="15.0" fill="rgb(218,102,24)" rx="2" ry="2" />
<text  x="362.52" y="767.5" ></text>
</g>
<g >
<title>std::__reverse&lt;char*&gt; (1 samples, 0.01%)</title><rect x="118.2" y="741" width="0.1" height="15.0" fill="rgb(208,156,19)" rx="2" ry="2" />
<text  x="121.15" y="751.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::shared_ptr&lt;StaticServer::Entry&gt;, std::hash&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::equal_to&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;StaticServer::Entry&gt; &gt; &gt;::insert (19 samples, 0.26%)</title><rect x="104.7" y="565" width="3.1" height="15.0" fill="rgb(245,162,1)" rx="2" ry="2" />
<text  x="107.74" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, muduo::net::Buffer*&gt;::_Tuple_impl (3 samples, 0.04%)</title><rect x="100.7" y="469" width="0.5" height="15.0" fill="rgb(245,81,28)" rx="2" ry="2" />
<text  x="103.69" y="479.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.01%)</title><rect x="280.1" y="981" width="0.2" height="15.0" fill="rgb(218,168,49)" rx="2" ry="2" />
<text  x="283.14" y="991.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="11.5" y="709" width="0.4" height="15.0" fill="rgb(248,37,52)" rx="2" ry="2" />
<text  x="14.45" y="719.5" ></text>
</g>
<g >
<title>vfs_read (181 samples, 2.48%)</title><rect x="845.8" y="933" width="29.3" height="15.0" fill="rgb(251,187,21)" rx="2" ry="2" />
<text  x="848.81" y="943.5" >vf..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;muduo::net::TcpConnection*,  (2 samples, 0.03%)</title><rect x="997.8" y="629" width="0.3" height="15.0" fill="rgb(229,125,12)" rx="2" ry="2" />
<text  x="1000.78" y="639.5" ></text>
</g>
<g >
<title>__lookup_mnt (2 samples, 0.03%)</title><rect x="1173.0" y="533" width="0.3" height="15.0" fill="rgb(232,64,49)" rx="2" ry="2" />
<text  x="1176.03" y="543.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::lock (4 samples, 0.05%)</title><rect x="114.9" y="805" width="0.7" height="15.0" fill="rgb(239,119,25)" rx="2" ry="2" />
<text  x="117.92" y="815.5" ></text>
</g>
<g >
<title>boost::any::type (2 samples, 0.03%)</title><rect x="340.0" y="517" width="0.3" height="15.0" fill="rgb(229,147,14)" rx="2" ry="2" />
<text  x="342.96" y="527.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="240.2" y="421" width="0.5" height="15.0" fill="rgb(222,204,45)" rx="2" ry="2" />
<text  x="243.21" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (9 samples, 0.12%)</title><rect x="1160.7" y="709" width="1.5" height="15.0" fill="rgb(228,225,52)" rx="2" ry="2" />
<text  x="1163.74" y="719.5" ></text>
</g>
<g >
<title>strlen@plt (1 samples, 0.01%)</title><rect x="1189.7" y="981" width="0.1" height="15.0" fill="rgb(219,164,3)" rx="2" ry="2" />
<text  x="1192.68" y="991.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (5 samples, 0.07%)</title><rect x="893.7" y="789" width="0.8" height="15.0" fill="rgb(250,171,10)" rx="2" ry="2" />
<text  x="896.67" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1 samples, 0.01%)</title><rect x="360.2" y="757" width="0.1" height="15.0" fill="rgb(227,195,32)" rx="2" ry="2" />
<text  x="363.17" y="767.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (398 samples, 5.45%)</title><rect x="169.7" y="53" width="64.4" height="15.0" fill="rgb(229,132,51)" rx="2" ry="2" />
<text  x="172.73" y="63.5" >__wake_..</text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="97.5" y="501" width="0.1" height="15.0" fill="rgb(227,79,43)" rx="2" ry="2" />
<text  x="100.46" y="511.5" ></text>
</g>
<g >
<title>[libpthread-2.23.so] (163 samples, 2.23%)</title><rect x="506.8" y="997" width="26.4" height="15.0" fill="rgb(207,46,2)" rx="2" ry="2" />
<text  x="509.80" y="1007.5" >[..</text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::function&lt;void  (1 samples, 0.01%)</title><rect x="383.3" y="805" width="0.1" height="15.0" fill="rgb(243,103,48)" rx="2" ry="2" />
<text  x="386.29" y="815.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (34 samples, 0.47%)</title><rect x="363.9" y="789" width="5.5" height="15.0" fill="rgb(217,139,27)" rx="2" ry="2" />
<text  x="366.89" y="799.5" ></text>
</g>
<g >
<title>loopback_xmit (9 samples, 0.12%)</title><rect x="577.6" y="597" width="1.5" height="15.0" fill="rgb(228,157,5)" rx="2" ry="2" />
<text  x="580.61" y="607.5" ></text>
</g>
<g >
<title>net_rx_action (133 samples, 1.82%)</title><rect x="901.6" y="581" width="21.5" height="15.0" fill="rgb(228,53,20)" rx="2" ry="2" />
<text  x="904.59" y="591.5" >n..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="320.2" y="661" width="0.2" height="15.0" fill="rgb(218,193,38)" rx="2" ry="2" />
<text  x="323.24" y="671.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.01%)</title><rect x="822.9" y="613" width="0.1" height="15.0" fill="rgb(237,110,27)" rx="2" ry="2" />
<text  x="825.86" y="623.5" ></text>
</g>
<g >
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="10.2" y="725" width="0.3" height="15.0" fill="rgb(205,49,2)" rx="2" ry="2" />
<text  x="13.16" y="735.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::append (1 samples, 0.01%)</title><rect x="1015.4" y="645" width="0.2" height="15.0" fill="rgb(215,221,36)" rx="2" ry="2" />
<text  x="1018.40" y="655.5" ></text>
</g>
<g >
<title>sock_read_iter (28 samples, 0.38%)</title><rect x="329.3" y="533" width="4.5" height="15.0" fill="rgb(252,16,34)" rx="2" ry="2" />
<text  x="332.29" y="543.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (2 samples, 0.03%)</title><rect x="800.2" y="661" width="0.3" height="15.0" fill="rgb(207,221,27)" rx="2" ry="2" />
<text  x="803.22" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="949.3" y="965" width="0.1" height="15.0" fill="rgb(246,117,1)" rx="2" ry="2" />
<text  x="952.28" y="975.5" ></text>
</g>
<g >
<title>kmem_cache_free (4 samples, 0.05%)</title><rect x="79.2" y="437" width="0.6" height="15.0" fill="rgb(235,47,1)" rx="2" ry="2" />
<text  x="82.19" y="447.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="836.8" y="677" width="0.3" height="15.0" fill="rgb(252,197,29)" rx="2" ry="2" />
<text  x="839.76" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="283.1" y="949" width="0.1" height="15.0" fill="rgb(240,58,35)" rx="2" ry="2" />
<text  x="286.05" y="959.5" ></text>
</g>
<g >
<title>sys_write (473 samples, 6.48%)</title><rect x="689.3" y="581" width="76.5" height="15.0" fill="rgb(248,43,51)" rx="2" ry="2" />
<text  x="692.32" y="591.5" >sys_write</text>
</g>
</g>
</svg>
